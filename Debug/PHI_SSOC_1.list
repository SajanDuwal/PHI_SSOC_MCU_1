
PHI_SSOC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d578  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800d6b8  0800d6b8  0001d6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df74  0800df74  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800df74  0800df74  0001df74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df7c  0800df7c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df7c  0800df7c  0001df7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df80  0800df80  0001df80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800df84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  20000068  0800dfec  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  0800dfec  00020954  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026f3b  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005277  00000000  00000000  00047010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002488  00000000  00000000  0004c288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c17  00000000  00000000  0004e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024636  00000000  00000000  00050327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026eaa  00000000  00000000  0007495d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6aa7  00000000  00000000  0009b807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009f0c  00000000  00000000  001722b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017c1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d6a0 	.word	0x0800d6a0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800d6a0 	.word	0x0800d6a0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	f023 0203 	bic.w	r2, r3, #3
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	431a      	orrs	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	60da      	str	r2, [r3, #12]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	f003 0303 	and.w	r3, r3, #3
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800056a:	f023 0317 	bic.w	r3, r3, #23
 800056e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000590:	f023 0317 	bic.w	r3, r3, #23
 8000594:	f043 0201 	orr.w	r2, r3, #1
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d101      	bne.n	80005be <LL_ADC_IsEnabled+0x18>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e000      	b.n	80005c0 <LL_ADC_IsEnabled+0x1a>
 80005be:	2300      	movs	r3, #0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr

080005ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d101      	bne.n	80005e2 <LL_ADC_IsDisableOngoing+0x18>
 80005de:	2301      	movs	r3, #1
 80005e0:	e000      	b.n	80005e4 <LL_ADC_IsDisableOngoing+0x1a>
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80005fe:	f023 0317 	bic.w	r3, r3, #23
 8000602:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000628:	d101      	bne.n	800062e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800062a:	2301      	movs	r3, #1
 800062c:	e000      	b.n	8000630 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800064a:	f023 0317 	bic.w	r3, r3, #23
 800064e:	f043 0204 	orr.w	r2, r3, #4
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	2b04      	cmp	r3, #4
 8000672:	d101      	bne.n	8000678 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000674:	2301      	movs	r3, #1
 8000676:	e000      	b.n	800067a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	b29b      	uxth	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d101      	bne.n	80006b4 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 80006b0:	2301      	movs	r3, #1
 80006b2:	e000      	b.n	80006b6 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d101      	bne.n	80006d8 <LL_ADC_IsActiveFlag_EOC+0x18>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <LL_ADC_IsActiveFlag_EOC+0x1a>
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2204      	movs	r2, #4
 80006f0:	601a      	str	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <Activate_ADC>:
__IO uint16_t uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE; /* ADC group regular conversion data */

/* Variables for ADC conversion data computation to physical values */
__IO int16_t hADCxConvertedData_Temperature_DegreeCelsius; /* Value of temperature calculated from ADC conversion data (unit: degree Celsius) */

void Activate_ADC(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	__IO uint32_t wait_loop_index = 0U;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
	__IO uint32_t backup_setting_adc_dma_transfer = 0U;
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
	/*       implemented anyway to show the best practice usages                */
	/*       corresponding to reference manual procedure.                       */
	/*       Software can be optimized by removing some of these checks, if     */
	/*       they are not relevant considering previous settings and actions    */
	/*       in user application.                                               */
	if (LL_ADC_IsEnabled(ADC) == 0) {
 800070a:	4828      	ldr	r0, [pc, #160]	; (80007ac <Activate_ADC+0xb0>)
 800070c:	f7ff ff4b 	bl	80005a6 <LL_ADC_IsEnabled>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d145      	bne.n	80007a2 <Activate_ADC+0xa6>
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(ADC);
 8000716:	4825      	ldr	r0, [pc, #148]	; (80007ac <Activate_ADC+0xb0>)
 8000718:	f7ff ff1f 	bl	800055a <LL_ADC_EnableInternalRegulator>
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		/* Note: If system core clock frequency is below 200kHz, wait time        */
		/*       is only a few CPU processing cycles.                             */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
				* (SystemCoreClock / (100000 * 2))) / 10);
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <Activate_ADC+0xb4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	099b      	lsrs	r3, r3, #6
 8000722:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <Activate_ADC+0xb8>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	099a      	lsrs	r2, r3, #6
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	461a      	mov	r2, r3
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <Activate_ADC+0xbc>)
 8000736:	fba3 2302 	umull	r2, r3, r3, r2
 800073a:	08db      	lsrs	r3, r3, #3
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
 800073c:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 800073e:	e002      	b.n	8000746 <Activate_ADC+0x4a>
			wait_loop_index--;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f9      	bne.n	8000740 <Activate_ADC+0x44>
		/* Note: Specificity of this STM32 series: Calibration factor is          */
		/*       available in data register and also transferred by DMA.          */
		/*       To not insert ADC calibration factor among ADC conversion data   */
		/*       in DMA destination address, DMA transfer must be disabled during */
		/*       calibration.                                                     */
		backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(ADC);
 800074c:	4817      	ldr	r0, [pc, #92]	; (80007ac <Activate_ADC+0xb0>)
 800074e:	f7ff fef7 	bl	8000540 <LL_ADC_REG_GetDMATransfer>
 8000752:	4603      	mov	r3, r0
 8000754:	603b      	str	r3, [r7, #0]
		LL_ADC_REG_SetDMATransfer(ADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8000756:	2100      	movs	r1, #0
 8000758:	4814      	ldr	r0, [pc, #80]	; (80007ac <Activate_ADC+0xb0>)
 800075a:	f7ff fedf 	bl	800051c <LL_ADC_REG_SetDMATransfer>

		/* Run ADC self calibration */
		LL_ADC_StartCalibration(ADC);
 800075e:	4813      	ldr	r0, [pc, #76]	; (80007ac <Activate_ADC+0xb0>)
 8000760:	f7ff ff45 	bl	80005ee <LL_ADC_StartCalibration>
		/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
	    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
	    #endif /* USE_TIMEOUT */

		while (LL_ADC_IsCalibrationOnGoing(ADC) != 0) {
 8000764:	bf00      	nop
 8000766:	4811      	ldr	r0, [pc, #68]	; (80007ac <Activate_ADC+0xb0>)
 8000768:	f7ff ff54 	bl	8000614 <LL_ADC_IsCalibrationOnGoing>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f9      	bne.n	8000766 <Activate_ADC+0x6a>
	      }
	    #endif /* USE_TIMEOUT */
		}

		/* Restore ADC DMA transfer request after calibration */
		LL_ADC_REG_SetDMATransfer(ADC, backup_setting_adc_dma_transfer);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <Activate_ADC+0xb0>)
 8000778:	f7ff fed0 	bl	800051c <LL_ADC_REG_SetDMATransfer>

		/* Delay between ADC end of calibration and ADC enable.                   */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 800077c:	2320      	movs	r3, #32
 800077e:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 8000780:	e002      	b.n	8000788 <Activate_ADC+0x8c>
			wait_loop_index--;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3b01      	subs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f9      	bne.n	8000782 <Activate_ADC+0x86>
		}

		/* Enable ADC */
		LL_ADC_Enable(ADC);
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <Activate_ADC+0xb0>)
 8000790:	f7ff fef6 	bl	8000580 <LL_ADC_Enable>
		/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
	    Timeout = ADC_ENABLE_TIMEOUT_MS;
	    #endif /* USE_TIMEOUT */

		while (LL_ADC_IsActiveFlag_ADRDY(ADC) == 0) {
 8000794:	bf00      	nop
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <Activate_ADC+0xb0>)
 8000798:	f7ff ff80 	bl	800069c <LL_ADC_IsActiveFlag_ADRDY>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f9      	beq.n	8000796 <Activate_ADC+0x9a>
		/*       status afterwards.                                               */
		/*       This flag should be cleared at ADC Deactivation, before a new    */
		/*       ADC activation, using function "LL_ADC_ClearFlag_ADRDY()".       */
	}

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40012400 	.word	0x40012400
 80007b0:	2000000c 	.word	0x2000000c
 80007b4:	053e2d63 	.word	0x053e2d63
 80007b8:	cccccccd 	.word	0xcccccccd

080007bc <ConversionStartPoll_ADC_GrpRegular>:

/**
 * @brief  Perform ADC group regular conversion start, poll for conversion
 *         completion.*/

void ConversionStartPoll_ADC_GrpRegular(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	  uint32_t Timeout = 0U; /* Variable used for timeout management */
	  #endif /* USE_TIMEOUT */

	/* Start ADC group regular conversion */

	if ((LL_ADC_IsEnabled(ADC) == 1) && (LL_ADC_IsDisableOngoing(ADC) == 0)
 80007c0:	4811      	ldr	r0, [pc, #68]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007c2:	f7ff fef0 	bl	80005a6 <LL_ADC_IsEnabled>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d10f      	bne.n	80007ec <ConversionStartPoll_ADC_GrpRegular+0x30>
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007ce:	f7ff fefc 	bl	80005ca <LL_ADC_IsDisableOngoing>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d109      	bne.n	80007ec <ConversionStartPoll_ADC_GrpRegular+0x30>
			&& (LL_ADC_REG_IsConversionOngoing(ADC) == 0)) {
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007da:	f7ff ff41 	bl	8000660 <LL_ADC_REG_IsConversionOngoing>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d103      	bne.n	80007ec <ConversionStartPoll_ADC_GrpRegular+0x30>
		LL_ADC_REG_StartConversion(ADC);
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007e6:	f7ff ff28 	bl	800063a <LL_ADC_REG_StartConversion>
 80007ea:	e001      	b.n	80007f0 <ConversionStartPoll_ADC_GrpRegular+0x34>
	} else {
		/* Error: ADC conversion start could not be performed */
		Error_Handler();
 80007ec:	f001 f950 	bl	8001a90 <Error_Handler>

#if (USE_TIMEOUT == 1)
	  Timeout = ADC_UNITARY_CONVERSION_TIMEOUT_MS;
	  #endif /* USE_TIMEOUT */

	while (LL_ADC_IsActiveFlag_EOC(ADC) == 0) {
 80007f0:	bf00      	nop
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007f4:	f7ff ff64 	bl	80006c0 <LL_ADC_IsActiveFlag_EOC>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f9      	beq.n	80007f2 <ConversionStartPoll_ADC_GrpRegular+0x36>
	    }
	  #endif /* USE_TIMEOUT */
	}

	/* Clear flag ADC group regular end of unitary conversion */
	LL_ADC_ClearFlag_EOC(ADC);
 80007fe:	4802      	ldr	r0, [pc, #8]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 8000800:	f7ff ff70 	bl	80006e4 <LL_ADC_ClearFlag_EOC>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40012400 	.word	0x40012400

0800080c <ReadTemperature>:

uint16_t ReadTemperature() {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	Activate_ADC();
 8000810:	f7ff ff74 	bl	80006fc <Activate_ADC>
	/* Init variable containing ADC conversion data */
	uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <ReadTemperature+0x84>)
 8000816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800081a:	801a      	strh	r2, [r3, #0]

	/* Perform ADC group regular conversion start, poll for conversion        */
	/* completion.                                                            */
	ConversionStartPoll_ADC_GrpRegular();
 800081c:	f7ff ffce 	bl	80007bc <ConversionStartPoll_ADC_GrpRegular>

	/* Retrieve ADC conversion data */
	/* (data scale corresponds to ADC resolution: 12 bits) */
	uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADC);
 8000820:	481c      	ldr	r0, [pc, #112]	; (8000894 <ReadTemperature+0x88>)
 8000822:	f7ff ff2f 	bl	8000684 <LL_ADC_REG_ReadConversionData12>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <ReadTemperature+0x84>)
 800082c:	801a      	strh	r2, [r3, #0]

	/* Turn LED on after ADC conversion completion */

	/* Computation of ADC conversions raw data to physical values             */
	/* using LL ADC driver helper macro.                                      */
	hADCxConvertedData_Temperature_DegreeCelsius = __LL_ADC_CALC_TEMPERATURE(
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <ReadTemperature+0x8c>)
 8000830:	881a      	ldrh	r2, [r3, #0]
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <ReadTemperature+0x90>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d020      	beq.n	800087c <ReadTemperature+0x70>
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <ReadTemperature+0x84>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b29b      	uxth	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000846:	fb02 f303 	mul.w	r3, r2, r3
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <ReadTemperature+0x94>)
 800084e:	fba2 2303 	umull	r2, r3, r2, r3
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	461a      	mov	r2, r3
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <ReadTemperature+0x90>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2264      	movs	r2, #100	; 0x64
 800085e:	fb03 f202 	mul.w	r2, r3, r2
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <ReadTemperature+0x8c>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	4619      	mov	r1, r3
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <ReadTemperature+0x90>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	1acb      	subs	r3, r1, r3
 800086e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000872:	b29b      	uxth	r3, r3
 8000874:	331e      	adds	r3, #30
 8000876:	b29b      	uxth	r3, r3
 8000878:	b21b      	sxth	r3, r3
 800087a:	e001      	b.n	8000880 <ReadTemperature+0x74>
 800087c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000880:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <ReadTemperature+0x98>)
 8000882:	8013      	strh	r3, [r2, #0]
			VDDA_APPLI, uhADCxConvertedData, LL_ADC_RESOLUTION_12B);

	return hADCxConvertedData_Temperature_DegreeCelsius;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <ReadTemperature+0x98>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	b21b      	sxth	r3, r3
 800088a:	b29b      	uxth	r3, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000000 	.word	0x20000000
 8000894:	40012400 	.word	0x40012400
 8000898:	1fff75c8 	.word	0x1fff75c8
 800089c:	1fff75a8 	.word	0x1fff75a8
 80008a0:	09ee009f 	.word	0x09ee009f
 80008a4:	20000084 	.word	0x20000084

080008a8 <myDebug>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void myDebug(const char *fmt, ...) {
 80008a8:	b40f      	push	{r0, r1, r2, r3}
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	2164      	movs	r1, #100	; 0x64
 80008bc:	480a      	ldr	r0, [pc, #40]	; (80008e8 <myDebug+0x40>)
 80008be:	f00c fa5f 	bl	800cd80 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 80008c2:	4809      	ldr	r0, [pc, #36]	; (80008e8 <myDebug+0x40>)
 80008c4:	f000 f814 	bl	80008f0 <bufferSize>
 80008c8:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	4905      	ldr	r1, [pc, #20]	; (80008e8 <myDebug+0x40>)
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <myDebug+0x44>)
 80008d6:	f007 f826 	bl	8007926 <HAL_UART_Transmit>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008e4:	b004      	add	sp, #16
 80008e6:	4770      	bx	lr
 80008e8:	20000088 	.word	0x20000088
 80008ec:	20000278 	.word	0x20000278

080008f0 <bufferSize>:

int bufferSize(char *buffer) {
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80008fc:	e002      	b.n	8000904 <bufferSize+0x14>
		i++;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f6      	bne.n	80008fe <bufferSize+0xe>
	return i;
 8000910:	68fb      	ldr	r3, [r7, #12]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <delay_us>:

void delay_us(uint16_t ms) {
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
	uint8_t delay_counter_disp = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <delay_us+0x38>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < ms) {
 8000932:	e002      	b.n	800093a <delay_us+0x1e>
		delay_counter_disp++;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	3301      	adds	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
	while (__HAL_TIM_GET_COUNTER(&htim1) < ms) {
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <delay_us+0x38>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	429a      	cmp	r2, r3
 8000944:	d3f6      	bcc.n	8000934 <delay_us+0x18>
		// wait for the counter to reach the us input in the parameter
	}
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000534 	.word	0x20000534

08000958 <Read_ID>:
 */

#include "main.h"
#include "flash_memory.h"

void Read_ID(SPI_HandleTypeDef *SPI, DEVICE_ID *FM_ID) {
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b08e      	sub	sp, #56	; 0x38
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	uint8_t cmd = READ_ID;
 8000962:	239e      	movs	r3, #158	; 0x9e
 8000964:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	DEVICE_ID buff;
	uint8_t data[20];
	int i;
	FM_Enable(SPI);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 f915 	bl	8000b98 <FM_Enable>
	delay_us(1);
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff ffd4 	bl	800091c <delay_us>
	HAL_SPI_Transmit(SPI, &cmd, 1, 300);
 8000974:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8000978:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800097c:	2201      	movs	r2, #1
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f004 ffce 	bl	8005920 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, 20, 1000);
 8000984:	f107 0108 	add.w	r1, r7, #8
 8000988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098c:	2214      	movs	r2, #20
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f005 f956 	bl	8005c40 <HAL_SPI_Receive>
	delay_us(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff ffc1 	bl	800091c <delay_us>
	FM_Disable(SPI);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 f90d 	bl	8000bba <FM_Disable>
	delay_us(500);
 80009a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a4:	f7ff ffba 	bl	800091c <delay_us>
	buff.MAN_ID = data[0];
 80009a8:	7a3b      	ldrb	r3, [r7, #8]
 80009aa:	773b      	strb	r3, [r7, #28]
	buff.M_TYPE = data[1];
 80009ac:	7a7b      	ldrb	r3, [r7, #9]
 80009ae:	777b      	strb	r3, [r7, #29]
	buff.M_CAP = data[2];
 80009b0:	7abb      	ldrb	r3, [r7, #10]
 80009b2:	77bb      	strb	r3, [r7, #30]
	buff.REM_BYTES = data[3];
 80009b4:	7afb      	ldrb	r3, [r7, #11]
 80009b6:	77fb      	strb	r3, [r7, #31]
	buff.EXT_ID = data[4];
 80009b8:	7b3b      	ldrb	r3, [r7, #12]
 80009ba:	f887 3020 	strb.w	r3, [r7, #32]
	buff.DEV_INFO = data[5];
 80009be:	7b7b      	ldrb	r3, [r7, #13]
 80009c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	for (i = 6; i < 20; i++) {
 80009c4:	2306      	movs	r3, #6
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
 80009c8:	e00d      	b.n	80009e6 <Read_ID+0x8e>
		buff.UID[i] = data[i];
 80009ca:	f107 0208 	add.w	r2, r7, #8
 80009ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d0:	4413      	add	r3, r2
 80009d2:	7819      	ldrb	r1, [r3, #0]
 80009d4:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80009d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009da:	4413      	add	r3, r2
 80009dc:	460a      	mov	r2, r1
 80009de:	701a      	strb	r2, [r3, #0]
	for (i = 6; i < 20; i++) {
 80009e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e2:	3301      	adds	r3, #1
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
 80009e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e8:	2b13      	cmp	r3, #19
 80009ea:	ddee      	ble.n	80009ca <Read_ID+0x72>
	}
	*FM_ID = buff;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	461d      	mov	r5, r3
 80009f0:	f107 041c 	add.w	r4, r7, #28
 80009f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f6:	6028      	str	r0, [r5, #0]
 80009f8:	6069      	str	r1, [r5, #4]
 80009fa:	60aa      	str	r2, [r5, #8]
 80009fc:	60eb      	str	r3, [r5, #12]
 80009fe:	6820      	ldr	r0, [r4, #0]
 8000a00:	6128      	str	r0, [r5, #16]
	return;
 8000a02:	bf00      	nop
}
 8000a04:	3738      	adds	r7, #56	; 0x38
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bdb0      	pop	{r4, r5, r7, pc}

08000a0a <Page_Write>:
 * 			*data		data to be written into the address
 * 			size		size of the data
 *@retval	none
 */
void Page_Write(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	807b      	strh	r3, [r7, #2]
	uint8_t cmd = PAGE_PROGRAM;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	75fb      	strb	r3, [r7, #23]
	uint8_t command[3];
	while (size > PAGE_SIZE) {
 8000a1c:	e03a      	b.n	8000a94 <Page_Write+0x8a>
		command[0] = (uint8_t) (address >> 16 & 0xff);
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	0c1b      	lsrs	r3, r3, #16
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	753b      	strb	r3, [r7, #20]
		command[1] = (uint8_t) (address >> 8 & 0xff);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	757b      	strb	r3, [r7, #21]
		command[2] = (uint8_t) (address & 0xff);
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	75bb      	strb	r3, [r7, #22]
		Write_Enable(SPI);
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f000 f863 	bl	8000b00 <Write_Enable>
		FM_Enable(SPI);
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f000 f8ac 	bl	8000b98 <FM_Enable>
		delay_us(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff ff6b 	bl	800091c <delay_us>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 8000a46:	f107 0117 	add.w	r1, r7, #23
 8000a4a:	2364      	movs	r3, #100	; 0x64
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f004 ff66 	bl	8005920 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, command, 3, 200);
 8000a54:	f107 0114 	add.w	r1, r7, #20
 8000a58:	23c8      	movs	r3, #200	; 0xc8
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f004 ff5f 	bl	8005920 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, data, PAGE_SIZE, 200);
 8000a62:	23c8      	movs	r3, #200	; 0xc8
 8000a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f004 ff58 	bl	8005920 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f000 f8a2 	bl	8000bba <FM_Disable>
		delay_us(5);
 8000a76:	2005      	movs	r0, #5
 8000a78:	f7ff ff50 	bl	800091c <delay_us>
		size = size - PAGE_SIZE;
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a82:	807b      	strh	r3, [r7, #2]
		data = data + 256;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a8a:	607b      	str	r3, [r7, #4]
		address = address + 256;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a92:	60bb      	str	r3, [r7, #8]
	while (size > PAGE_SIZE) {
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a9a:	d8c0      	bhi.n	8000a1e <Page_Write+0x14>
	}
	command[0] = (uint8_t) (address >> 16 & 0xff);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	0c1b      	lsrs	r3, r3, #16
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	753b      	strb	r3, [r7, #20]
	command[1] = (uint8_t) (address >> 8 & 0xff);
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	757b      	strb	r3, [r7, #21]
	command[2] = (uint8_t) (address & 0xff);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	75bb      	strb	r3, [r7, #22]
	Write_Enable(SPI);
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f000 f824 	bl	8000b00 <Write_Enable>
	FM_Enable(SPI);
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 f86d 	bl	8000b98 <FM_Enable>
	delay_us(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff ff2c 	bl	800091c <delay_us>
	HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 8000ac4:	f107 0117 	add.w	r1, r7, #23
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	2201      	movs	r2, #1
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f004 ff27 	bl	8005920 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI, command, 3, 200);
 8000ad2:	f107 0114 	add.w	r1, r7, #20
 8000ad6:	23c8      	movs	r3, #200	; 0xc8
 8000ad8:	2203      	movs	r2, #3
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f004 ff20 	bl	8005920 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI, data, size, 200);
 8000ae0:	887a      	ldrh	r2, [r7, #2]
 8000ae2:	23c8      	movs	r3, #200	; 0xc8
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f004 ff1a 	bl	8005920 <HAL_SPI_Transmit>
	FM_Disable(SPI);
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f000 f864 	bl	8000bba <FM_Disable>
	delay_us(5);
 8000af2:	2005      	movs	r0, #5
 8000af4:	f7ff ff12 	bl	800091c <delay_us>
	return;
 8000af8:	bf00      	nop
}
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <Write_Enable>:
	default:
		return 0;
	}
}

void Write_Enable(SPI_HandleTypeDef *SPI) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	uint8_t cmd = WRITE_ENABLE;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	73fb      	strb	r3, [r7, #15]
	FM_Enable(SPI);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 f843 	bl	8000b98 <FM_Enable>
	delay_us(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff ff02 	bl	800091c <delay_us>
	HAL_SPI_Transmit(SPI, &cmd, 1, 500);
 8000b18:	f107 010f 	add.w	r1, r7, #15
 8000b1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b20:	2201      	movs	r2, #1
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f004 fefc 	bl	8005920 <HAL_SPI_Transmit>
	FM_Disable(SPI);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 f846 	bl	8000bba <FM_Disable>
	delay_us(10);
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f7ff fef4 	bl	800091c <delay_us>
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Bulk_Read>:
 * @param	address		address from which the data is to be read
 * 			*data		pointer to store the data which is read from the corresponding address
 * 			size		size of the data to be read
 */
void Bulk_Read(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	807b      	strh	r3, [r7, #2]
	uint8_t cmd[4];
	cmd[0] = READ;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	753b      	strb	r3, [r7, #20]
	cmd[1] = (uint8_t) (address >> 16 & 0xff);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	0c1b      	lsrs	r3, r3, #16
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	757b      	strb	r3, [r7, #21]
	cmd[2] = (uint8_t) (address >> 8 & 0xff);
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t) (address & 0xff);
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	75fb      	strb	r3, [r7, #23]
	FM_Enable(SPI);
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 f817 	bl	8000b98 <FM_Enable>
	HAL_SPI_Transmit(SPI, cmd, 4, 100);
 8000b6a:	f107 0114 	add.w	r1, r7, #20
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	2204      	movs	r2, #4
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f004 fed4 	bl	8005920 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, size, 200);
 8000b78:	887a      	ldrh	r2, [r7, #2]
 8000b7a:	23c8      	movs	r3, #200	; 0xc8
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f005 f85e 	bl	8005c40 <HAL_SPI_Receive>
	FM_Disable(SPI);
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 f818 	bl	8000bba <FM_Disable>
	delay_us(5);
 8000b8a:	2005      	movs	r0, #5
 8000b8c:	f7ff fec6 	bl	800091c <delay_us>
	return;
 8000b90:	bf00      	nop
}
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <FM_Enable>:

void FM_Enable(SPI_HandleTypeDef *SPI) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f002 ff7a 	bl	8003aa0 <HAL_GPIO_WritePin>
	delay_us(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f7ff feb5 	bl	800091c <delay_us>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <FM_Disable>:

void FM_Disable(SPI_HandleTypeDef *SPI) {
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f002 ff69 	bl	8003aa0 <HAL_GPIO_WritePin>
	delay_us(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fea4 	bl	800091c <delay_us>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c00:	68fb      	ldr	r3, [r7, #12]
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c30:	68fb      	ldr	r3, [r7, #12]
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <setDataToBeTransmitted>:
void MSN_Error();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setDataToBeTransmitted() {
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b090      	sub	sp, #64	; 0x40
 8000c40:	af02      	add	r7, sp, #8
	uint8_t temp_count = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t temp_sensor[30];

	setTime(MAIN_CMD[8], MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 8000c48:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c4a:	7a18      	ldrb	r0, [r3, #8]
 8000c4c:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c4e:	7a59      	ldrb	r1, [r3, #9]
 8000c50:	4b52      	ldr	r3, [pc, #328]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c52:	7a9c      	ldrb	r4, [r3, #10]
 8000c54:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c56:	7add      	ldrb	r5, [r3, #11]
 8000c58:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c5a:	7b1b      	ldrb	r3, [r3, #12]
 8000c5c:	4a4f      	ldr	r2, [pc, #316]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c5e:	7b52      	ldrb	r2, [r2, #13]
 8000c60:	9201      	str	r2, [sp, #4]
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	462b      	mov	r3, r5
 8000c66:	4622      	mov	r2, r4
 8000c68:	f001 f858 	bl	8001d1c <setTime>
			MAIN_CMD[13]);

	while (temp_count < 30) {
 8000c6c:	e017      	b.n	8000c9e <setDataToBeTransmitted+0x62>
		if (ReadTemperature() > 0)
 8000c6e:	f7ff fdcd 	bl	800080c <ReadTemperature>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00a      	beq.n	8000c8e <setDataToBeTransmitted+0x52>
			temp_sensor[temp_count] = ReadTemperature();
 8000c78:	f7ff fdc8 	bl	800080c <ReadTemperature>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	3338      	adds	r3, #56	; 0x38
 8000c88:	443b      	add	r3, r7
 8000c8a:	f803 2c38 	strb.w	r2, [r3, #-56]
		delay_us(10);
 8000c8e:	200a      	movs	r0, #10
 8000c90:	f7ff fe44 	bl	800091c <delay_us>
		temp_count++;
 8000c94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (temp_count < 30) {
 8000c9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca2:	2b1d      	cmp	r3, #29
 8000ca4:	d9e3      	bls.n	8000c6e <setDataToBeTransmitted+0x32>
	}

	getTime();
 8000ca6:	f001 f87f 	bl	8001da8 <getTime>

	txBuffer[0] = 0xBA;
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cac:	22ba      	movs	r2, #186	; 0xba
 8000cae:	701a      	strb	r2, [r3, #0]
	txBuffer[1] = 0x01;
 8000cb0:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	705a      	strb	r2, [r3, #1]
	txBuffer[2] = pkt_id;
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <setDataToBeTransmitted+0x168>)
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cbc:	709a      	strb	r2, [r3, #2]
	txBuffer[3] = gDate.Year;
 8000cbe:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <setDataToBeTransmitted+0x16c>)
 8000cc0:	78da      	ldrb	r2, [r3, #3]
 8000cc2:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cc4:	70da      	strb	r2, [r3, #3]
	txBuffer[4] = gDate.Month;
 8000cc6:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <setDataToBeTransmitted+0x16c>)
 8000cc8:	785a      	ldrb	r2, [r3, #1]
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000ccc:	711a      	strb	r2, [r3, #4]
	txBuffer[5] = gDate.WeekDay;
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <setDataToBeTransmitted+0x16c>)
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cd4:	715a      	strb	r2, [r3, #5]
	txBuffer[6] = gTime.Hours;
 8000cd6:	4b35      	ldr	r3, [pc, #212]	; (8000dac <setDataToBeTransmitted+0x170>)
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cdc:	719a      	strb	r2, [r3, #6]
	txBuffer[7] = gTime.Minutes;
 8000cde:	4b33      	ldr	r3, [pc, #204]	; (8000dac <setDataToBeTransmitted+0x170>)
 8000ce0:	785a      	ldrb	r2, [r3, #1]
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000ce4:	71da      	strb	r2, [r3, #7]
	txBuffer[8] = gTime.Seconds;
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <setDataToBeTransmitted+0x170>)
 8000ce8:	789a      	ldrb	r2, [r3, #2]
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cec:	721a      	strb	r2, [r3, #8]
	int j = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 9; i <= 28; i += 2) {
 8000cf2:	2309      	movs	r3, #9
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf6:	e012      	b.n	8000d1e <setDataToBeTransmitted+0xe2>
		txBuffer[i] = 0xDA;
 8000cf8:	4a29      	ldr	r2, [pc, #164]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	4413      	add	r3, r2
 8000cfe:	22da      	movs	r2, #218	; 0xda
 8000d00:	701a      	strb	r2, [r3, #0]
		txBuffer[i + 1] = temp_sensor[j];
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	3301      	adds	r3, #1
 8000d06:	4639      	mov	r1, r7
 8000d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d0a:	440a      	add	r2, r1
 8000d0c:	7811      	ldrb	r1, [r2, #0]
 8000d0e:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d10:	54d1      	strb	r1, [r2, r3]
		j++;
 8000d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d14:	3301      	adds	r3, #1
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 9; i <= 28; i += 2) {
 8000d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d20:	2b1c      	cmp	r3, #28
 8000d22:	dde9      	ble.n	8000cf8 <setDataToBeTransmitted+0xbc>
	}
	uint16_t _HK_SUM = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	857b      	strh	r3, [r7, #42]	; 0x2a
	for (int i = 0; i <= 28; i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2c:	e00a      	b.n	8000d44 <setDataToBeTransmitted+0x108>
		_HK_SUM += txBuffer[i];
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d3a:	4413      	add	r3, r2
 8000d3c:	857b      	strh	r3, [r7, #42]	; 0x2a
	for (int i = 0; i <= 28; i++) {
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	3301      	adds	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	2b1c      	cmp	r3, #28
 8000d48:	ddf1      	ble.n	8000d2e <setDataToBeTransmitted+0xf2>
	}
	txBuffer[29] = _HK_SUM >> 8;
 8000d4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d54:	775a      	strb	r2, [r3, #29]
	txBuffer[30] = _HK_SUM;
 8000d56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d5c:	779a      	strb	r2, [r3, #30]
	txBuffer[31] = 0xFE;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d60:	22fe      	movs	r2, #254	; 0xfe
 8000d62:	77da      	strb	r2, [r3, #31]
	myDebug("### Data to be transmitted:\n");
 8000d64:	4812      	ldr	r0, [pc, #72]	; (8000db0 <setDataToBeTransmitted+0x174>)
 8000d66:	f7ff fd9f 	bl	80008a8 <myDebug>
	for (int i = 0; i < PayLoadLength; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
 8000d6e:	e00a      	b.n	8000d86 <setDataToBeTransmitted+0x14a>
		myDebug("%x ", txBuffer[i]);
 8000d70:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	4413      	add	r3, r2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <setDataToBeTransmitted+0x178>)
 8000d7c:	f7ff fd94 	bl	80008a8 <myDebug>
	for (int i = 0; i < PayLoadLength; i++) {
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	3301      	adds	r3, #1
 8000d84:	623b      	str	r3, [r7, #32]
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	2b1f      	cmp	r3, #31
 8000d8a:	ddf1      	ble.n	8000d70 <setDataToBeTransmitted+0x134>
	}
	myDebug("\n");
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <setDataToBeTransmitted+0x17c>)
 8000d8e:	f7ff fd8b 	bl	80008a8 <myDebug>
}
 8000d92:	bf00      	nop
 8000d94:	3738      	adds	r7, #56	; 0x38
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200005f4 	.word	0x200005f4
 8000da0:	2000059c 	.word	0x2000059c
 8000da4:	20000581 	.word	0x20000581
 8000da8:	20000638 	.word	0x20000638
 8000dac:	20000624 	.word	0x20000624
 8000db0:	0800d6b8 	.word	0x0800d6b8
 8000db4:	0800d6d8 	.word	0x0800d6d8
 8000db8:	0800d6dc 	.word	0x0800d6dc

08000dbc <EOM>:

void EOM() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	//add ACK and Latest mission FM address
	END_MSN[0] = 0xBA;
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <EOM+0xc8>)
 8000dc4:	22ba      	movs	r2, #186	; 0xba
 8000dc6:	701a      	strb	r2, [r3, #0]
	END_MSN[1] = MSN_CMP >> 24;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <EOM+0xcc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0e1b      	lsrs	r3, r3, #24
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <EOM+0xc8>)
 8000dd2:	705a      	strb	r2, [r3, #1]
	END_MSN[2] = MSN_CMP >> 16;
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <EOM+0xcc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	0c1b      	lsrs	r3, r3, #16
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <EOM+0xc8>)
 8000dde:	709a      	strb	r2, [r3, #2]

	END_MSN[3] = MSN_CMP >> 8;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <EOM+0xcc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <EOM+0xc8>)
 8000dea:	70da      	strb	r2, [r3, #3]

	END_MSN[4] = MSN_CMP;
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <EOM+0xcc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <EOM+0xc8>)
 8000df4:	711a      	strb	r2, [r3, #4]

	//SEND NEW FM ADDRESS;
	END_MSN[5] = MAIN_ADDR >> 24;
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <EOM+0xd0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	0e1b      	lsrs	r3, r3, #24
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <EOM+0xc8>)
 8000e00:	715a      	strb	r2, [r3, #5]
	END_MSN[6] = MAIN_ADDR >> 16;
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <EOM+0xd0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0c1b      	lsrs	r3, r3, #16
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <EOM+0xc8>)
 8000e0c:	719a      	strb	r2, [r3, #6]
	END_MSN[7] = MAIN_ADDR >> 8;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <EOM+0xd0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <EOM+0xc8>)
 8000e18:	71da      	strb	r2, [r3, #7]
	END_MSN[8] = MAIN_ADDR;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <EOM+0xd0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <EOM+0xc8>)
 8000e22:	721a      	strb	r2, [r3, #8]
	END_MSN[9] = 0xFE;
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <EOM+0xc8>)
 8000e26:	22fe      	movs	r2, #254	; 0xfe
 8000e28:	725a      	strb	r2, [r3, #9]

	// END of Mission
	HAL_UART_Transmit(&huart1, END_MSN, 10, 1000);
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	220a      	movs	r2, #10
 8000e30:	4914      	ldr	r1, [pc, #80]	; (8000e84 <EOM+0xc8>)
 8000e32:	4817      	ldr	r0, [pc, #92]	; (8000e90 <EOM+0xd4>)
 8000e34:	f006 fd77 	bl	8007926 <HAL_UART_Transmit>
	myDebug("### Sent End of mission data: ");
 8000e38:	4816      	ldr	r0, [pc, #88]	; (8000e94 <EOM+0xd8>)
 8000e3a:	f7ff fd35 	bl	80008a8 <myDebug>
	for (int i = 0; i < 10; i++) {
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e00a      	b.n	8000e5a <EOM+0x9e>
		myDebug("%x", END_MSN[i]);
 8000e44:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <EOM+0xc8>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <EOM+0xdc>)
 8000e50:	f7ff fd2a 	bl	80008a8 <myDebug>
	for (int i = 0; i < 10; i++) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3301      	adds	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b09      	cmp	r3, #9
 8000e5e:	ddf1      	ble.n	8000e44 <EOM+0x88>
	}
	myDebug("\n");
 8000e60:	480e      	ldr	r0, [pc, #56]	; (8000e9c <EOM+0xe0>)
 8000e62:	f7ff fd21 	bl	80008a8 <myDebug>
	myDebug("--> LoRa_Mission_Execution Complete and Packet count is %x\r\n",
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <EOM+0xe4>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <EOM+0xe8>)
 8000e6e:	f7ff fd1b 	bl	80008a8 <myDebug>
			pkt_id);
	memset(END_MSN, '\0', 10);
 8000e72:	220a      	movs	r2, #10
 8000e74:	2100      	movs	r1, #0
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <EOM+0xc8>)
 8000e78:	f00b ff90 	bl	800cd9c <memset>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200005dc 	.word	0x200005dc
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000608 	.word	0x20000608
 8000e90:	200001e4 	.word	0x200001e4
 8000e94:	0800d6e0 	.word	0x0800d6e0
 8000e98:	0800d700 	.word	0x0800d700
 8000e9c:	0800d6dc 	.word	0x0800d6dc
 8000ea0:	20000581 	.word	0x20000581
 8000ea4:	0800d704 	.word	0x0800d704

08000ea8 <MSN_Error>:

void MSN_Error() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	MSN_ERR[0] = 0xBA;
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <MSN_Error+0xc8>)
 8000eb0:	22ba      	movs	r2, #186	; 0xba
 8000eb2:	701a      	strb	r2, [r3, #0]
	MSN_ERR[1] = NACK >> 24;
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <MSN_Error+0xcc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	0e1b      	lsrs	r3, r3, #24
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <MSN_Error+0xc8>)
 8000ebe:	705a      	strb	r2, [r3, #1]
	MSN_ERR[2] = NACK >> 16;
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <MSN_Error+0xcc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	0c1b      	lsrs	r3, r3, #16
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <MSN_Error+0xc8>)
 8000eca:	709a      	strb	r2, [r3, #2]

	MSN_ERR[3] = NACK >> 8;
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <MSN_Error+0xcc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <MSN_Error+0xc8>)
 8000ed6:	70da      	strb	r2, [r3, #3]

	MSN_ERR[4] = NACK;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MSN_Error+0xcc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <MSN_Error+0xc8>)
 8000ee0:	711a      	strb	r2, [r3, #4]

//SEND NEW FM ADDRESS;
	MSN_ERR[5] = MAIN_ADDR >> 24;
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <MSN_Error+0xd0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0e1b      	lsrs	r3, r3, #24
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MSN_Error+0xc8>)
 8000eec:	715a      	strb	r2, [r3, #5]
	MSN_ERR[6] = MAIN_ADDR >> 16;
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <MSN_Error+0xd0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	0c1b      	lsrs	r3, r3, #16
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MSN_Error+0xc8>)
 8000ef8:	719a      	strb	r2, [r3, #6]
	MSN_ERR[7] = MAIN_ADDR >> 8;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MSN_Error+0xd0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MSN_Error+0xc8>)
 8000f04:	71da      	strb	r2, [r3, #7]
	MSN_ERR[8] = MAIN_ADDR;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MSN_Error+0xd0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MSN_Error+0xc8>)
 8000f0e:	721a      	strb	r2, [r3, #8]
	MSN_ERR[9] = 0xFE;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MSN_Error+0xc8>)
 8000f12:	22fe      	movs	r2, #254	; 0xfe
 8000f14:	725a      	strb	r2, [r3, #9]

// Error of Mission
	myDebug("###  Mission error occurred! ");
 8000f16:	4819      	ldr	r0, [pc, #100]	; (8000f7c <MSN_Error+0xd4>)
 8000f18:	f7ff fcc6 	bl	80008a8 <myDebug>
	HAL_UART_Transmit(&huart1, MSN_ERR, 10, 1000);
 8000f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f20:	220a      	movs	r2, #10
 8000f22:	4913      	ldr	r1, [pc, #76]	; (8000f70 <MSN_Error+0xc8>)
 8000f24:	4816      	ldr	r0, [pc, #88]	; (8000f80 <MSN_Error+0xd8>)
 8000f26:	f006 fcfe 	bl	8007926 <HAL_UART_Transmit>
	myDebug("### Sent Mission error data: ");
 8000f2a:	4816      	ldr	r0, [pc, #88]	; (8000f84 <MSN_Error+0xdc>)
 8000f2c:	f7ff fcbc 	bl	80008a8 <myDebug>
	for (int i = 0; i < 10; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e00a      	b.n	8000f4c <MSN_Error+0xa4>
		myDebug("%x", MSN_ERR[i]);
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <MSN_Error+0xc8>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MSN_Error+0xe0>)
 8000f42:	f7ff fcb1 	bl	80008a8 <myDebug>
	for (int i = 0; i < 10; i++) {
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b09      	cmp	r3, #9
 8000f50:	ddf1      	ble.n	8000f36 <MSN_Error+0x8e>
	}
	myDebug("\n");
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <MSN_Error+0xe4>)
 8000f54:	f7ff fca8 	bl	80008a8 <myDebug>
	myDebug("#### MAIN and LoRa MCU ACK FAILED___ Please RESET #### \n ");
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <MSN_Error+0xe8>)
 8000f5a:	f7ff fca5 	bl	80008a8 <myDebug>
	memset(MSN_ERR, '\0', 10);
 8000f5e:	220a      	movs	r2, #10
 8000f60:	2100      	movs	r1, #0
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <MSN_Error+0xc8>)
 8000f64:	f00b ff1a 	bl	800cd9c <memset>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200005e8 	.word	0x200005e8
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000608 	.word	0x20000608
 8000f7c:	0800d744 	.word	0x0800d744
 8000f80:	200001e4 	.word	0x200001e4
 8000f84:	0800d764 	.word	0x0800d764
 8000f88:	0800d700 	.word	0x0800d700
 8000f8c:	0800d6dc 	.word	0x0800d6dc
 8000f90:	0800d784 	.word	0x0800d784

08000f94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a56      	ldr	r2, [pc, #344]	; (80010f8 <HAL_UART_RxCpltCallback+0x164>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	f040 80a5 	bne.w	80010f0 <HAL_UART_RxCpltCallback+0x15c>

		uint16_t _HK_SUM_Check = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	83fb      	strh	r3, [r7, #30]
		for (int i = 0; i <= 28; i++) {
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	e00a      	b.n	8000fc6 <HAL_UART_RxCpltCallback+0x32>
			_HK_SUM_Check += rxData[i];
 8000fb0:	4a52      	ldr	r2, [pc, #328]	; (80010fc <HAL_UART_RxCpltCallback+0x168>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	8bfb      	ldrh	r3, [r7, #30]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	83fb      	strh	r3, [r7, #30]
		for (int i = 0; i <= 28; i++) {
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	2b1c      	cmp	r3, #28
 8000fca:	ddf1      	ble.n	8000fb0 <HAL_UART_RxCpltCallback+0x1c>
		}

		uint8_t crc[2];
		crc[0] = _HK_SUM_Check >> 8;
 8000fcc:	8bfb      	ldrh	r3, [r7, #30]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
		crc[1] = _HK_SUM_Check;
 8000fd6:	8bfb      	ldrh	r3, [r7, #30]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]

		if (crc[0] == txBuffer[29] && crc[1] == txBuffer[30]) {
 8000fdc:	7b3a      	ldrb	r2, [r7, #12]
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <HAL_UART_RxCpltCallback+0x16c>)
 8000fe0:	7f5b      	ldrb	r3, [r3, #29]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d16b      	bne.n	80010be <HAL_UART_RxCpltCallback+0x12a>
 8000fe6:	7b7a      	ldrb	r2, [r7, #13]
 8000fe8:	4b45      	ldr	r3, [pc, #276]	; (8001100 <HAL_UART_RxCpltCallback+0x16c>)
 8000fea:	7f9b      	ldrb	r3, [r3, #30]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d166      	bne.n	80010be <HAL_UART_RxCpltCallback+0x12a>
			Read_ID(&hspi2, &FM_ID);
 8000ff0:	4944      	ldr	r1, [pc, #272]	; (8001104 <HAL_UART_RxCpltCallback+0x170>)
 8000ff2:	4845      	ldr	r0, [pc, #276]	; (8001108 <HAL_UART_RxCpltCallback+0x174>)
 8000ff4:	f7ff fcb0 	bl	8000958 <Read_ID>
			delay_us(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff fc8f 	bl	800091c <delay_us>

			present_address = MAIN_ADDR;
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <HAL_UART_RxCpltCallback+0x178>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a43      	ldr	r2, [pc, #268]	; (8001110 <HAL_UART_RxCpltCallback+0x17c>)
 8001004:	6013      	str	r3, [r2, #0]

			myDebug("### Storing HK Data in : 0x%x \n", present_address);
 8001006:	4b42      	ldr	r3, [pc, #264]	; (8001110 <HAL_UART_RxCpltCallback+0x17c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	4841      	ldr	r0, [pc, #260]	; (8001114 <HAL_UART_RxCpltCallback+0x180>)
 800100e:	f7ff fc4b 	bl	80008a8 <myDebug>
			Page_Write(&hspi2, present_address, txBuffer, PayLoadLength);
 8001012:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <HAL_UART_RxCpltCallback+0x17c>)
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	2320      	movs	r3, #32
 8001018:	4a39      	ldr	r2, [pc, #228]	; (8001100 <HAL_UART_RxCpltCallback+0x16c>)
 800101a:	483b      	ldr	r0, [pc, #236]	; (8001108 <HAL_UART_RxCpltCallback+0x174>)
 800101c:	f7ff fcf5 	bl	8000a0a <Page_Write>
			delay_us(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fc7b 	bl	800091c <delay_us>
			myDebug("### Checking if data is stored or not, in : 0x%x \n",
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <HAL_UART_RxCpltCallback+0x17c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	483a      	ldr	r0, [pc, #232]	; (8001118 <HAL_UART_RxCpltCallback+0x184>)
 800102e:	f7ff fc3b 	bl	80008a8 <myDebug>
					present_address);
			myDebug("--> Stored Data : \n");
 8001032:	483a      	ldr	r0, [pc, #232]	; (800111c <HAL_UART_RxCpltCallback+0x188>)
 8001034:	f7ff fc38 	bl	80008a8 <myDebug>
			Bulk_Read(&hspi2, present_address, rxData, PayLoadLength);
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <HAL_UART_RxCpltCallback+0x17c>)
 800103a:	6819      	ldr	r1, [r3, #0]
 800103c:	2320      	movs	r3, #32
 800103e:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <HAL_UART_RxCpltCallback+0x168>)
 8001040:	4831      	ldr	r0, [pc, #196]	; (8001108 <HAL_UART_RxCpltCallback+0x174>)
 8001042:	f7ff fd7b 	bl	8000b3c <Bulk_Read>
			delay_us(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff fc68 	bl	800091c <delay_us>
			for (int i = 0; i < PayLoadLength; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e00a      	b.n	8001068 <HAL_UART_RxCpltCallback+0xd4>
				myDebug("%x ", rxData[i]);
 8001052:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <HAL_UART_RxCpltCallback+0x168>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	4830      	ldr	r0, [pc, #192]	; (8001120 <HAL_UART_RxCpltCallback+0x18c>)
 800105e:	f7ff fc23 	bl	80008a8 <myDebug>
			for (int i = 0; i < PayLoadLength; i++) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b1f      	cmp	r3, #31
 800106c:	ddf1      	ble.n	8001052 <HAL_UART_RxCpltCallback+0xbe>
			}
			myDebug("\n");
 800106e:	482d      	ldr	r0, [pc, #180]	; (8001124 <HAL_UART_RxCpltCallback+0x190>)
 8001070:	f7ff fc1a 	bl	80008a8 <myDebug>
			MAIN_ADDR += 32;
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_UART_RxCpltCallback+0x178>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3320      	adds	r3, #32
 800107a:	4a24      	ldr	r2, [pc, #144]	; (800110c <HAL_UART_RxCpltCallback+0x178>)
 800107c:	6013      	str	r3, [r2, #0]
			pkt_id++;
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_UART_RxCpltCallback+0x194>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <HAL_UART_RxCpltCallback+0x194>)
 8001088:	701a      	strb	r2, [r3, #0]
			EOM();
 800108a:	f7ff fe97 	bl	8000dbc <EOM>
			memset(txBuffer, '\0', PayLoadLength);
 800108e:	2220      	movs	r2, #32
 8001090:	2100      	movs	r1, #0
 8001092:	481b      	ldr	r0, [pc, #108]	; (8001100 <HAL_UART_RxCpltCallback+0x16c>)
 8001094:	f00b fe82 	bl	800cd9c <memset>
			memset(rxData, '\0', PayLoadLength);
 8001098:	2220      	movs	r2, #32
 800109a:	2100      	movs	r1, #0
 800109c:	4817      	ldr	r0, [pc, #92]	; (80010fc <HAL_UART_RxCpltCallback+0x168>)
 800109e:	f00b fe7d 	bl	800cd9c <memset>
			memset(MAIN_CMD, '\0', 15);
 80010a2:	220f      	movs	r2, #15
 80010a4:	2100      	movs	r1, #0
 80010a6:	4821      	ldr	r0, [pc, #132]	; (800112c <HAL_UART_RxCpltCallback+0x198>)
 80010a8:	f00b fe78 	bl	800cd9c <memset>
			delay_us(999);
 80010ac:	f240 30e7 	movw	r0, #999	; 0x3e7
 80010b0:	f7ff fc34 	bl	800091c <delay_us>
			delay_us(999);
 80010b4:	f240 30e7 	movw	r0, #999	; 0x3e7
 80010b8:	f7ff fc30 	bl	800091c <delay_us>
			}
			myDebug("\n");
			Error_Handler();
		}
	}
}
 80010bc:	e018      	b.n	80010f0 <HAL_UART_RxCpltCallback+0x15c>
			myDebug("### Data error occurred:\n");
 80010be:	481c      	ldr	r0, [pc, #112]	; (8001130 <HAL_UART_RxCpltCallback+0x19c>)
 80010c0:	f7ff fbf2 	bl	80008a8 <myDebug>
			for (int i = 0; i < PayLoadLength; i++) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	e00a      	b.n	80010e0 <HAL_UART_RxCpltCallback+0x14c>
				myDebug("%x ", rxData[i]);
 80010ca:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <HAL_UART_RxCpltCallback+0x168>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4812      	ldr	r0, [pc, #72]	; (8001120 <HAL_UART_RxCpltCallback+0x18c>)
 80010d6:	f7ff fbe7 	bl	80008a8 <myDebug>
			for (int i = 0; i < PayLoadLength; i++) {
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	3301      	adds	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	2b1f      	cmp	r3, #31
 80010e4:	ddf1      	ble.n	80010ca <HAL_UART_RxCpltCallback+0x136>
			myDebug("\n");
 80010e6:	480f      	ldr	r0, [pc, #60]	; (8001124 <HAL_UART_RxCpltCallback+0x190>)
 80010e8:	f7ff fbde 	bl	80008a8 <myDebug>
			Error_Handler();
 80010ec:	f000 fcd0 	bl	8001a90 <Error_Handler>
}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000150 	.word	0x20000150
 80010fc:	200005bc 	.word	0x200005bc
 8001100:	2000059c 	.word	0x2000059c
 8001104:	20000584 	.word	0x20000584
 8001108:	200004c4 	.word	0x200004c4
 800110c:	20000608 	.word	0x20000608
 8001110:	20000598 	.word	0x20000598
 8001114:	0800d7c0 	.word	0x0800d7c0
 8001118:	0800d7e0 	.word	0x0800d7e0
 800111c:	0800d814 	.word	0x0800d814
 8001120:	0800d6d8 	.word	0x0800d6d8
 8001124:	0800d6dc 	.word	0x0800d6dc
 8001128:	20000581 	.word	0x20000581
 800112c:	200005f4 	.word	0x200005f4
 8001130:	0800d828 	.word	0x0800d828

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b092      	sub	sp, #72	; 0x48
 8001138:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f001 fa89 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f933 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f000 fc17 	bl	8001974 <MX_GPIO_Init>
  MX_DMA_Init();
 8001146:	f000 fbeb 	bl	8001920 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800114a:	f000 fa95 	bl	8001678 <MX_USART2_UART_Init>
  MX_SubGHz_Phy_Init();
 800114e:	f00b fa7a 	bl	800c646 <MX_SubGHz_Phy_Init>
  MX_USART1_UART_Init();
 8001152:	f000 fa45 	bl	80015e0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001156:	f000 fb8f 	bl	8001878 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 800115a:	f000 f9f5 	bl	8001548 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800115e:	f000 fad7 	bl	8001710 <MX_RTC_Init>
  MX_ADC_Init();
 8001162:	f000 f989 	bl	8001478 <MX_ADC_Init>
  MX_SPI2_Init();
 8001166:	f000 fb37 	bl	80017d8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim1);
 800116a:	4874      	ldr	r0, [pc, #464]	; (800133c <main+0x208>)
 800116c:	f006 f904 	bl	8007378 <HAL_TIM_Base_Start>

	myDebug("\n########## Wait for Handshake ##########\r\n");
 8001170:	4873      	ldr	r0, [pc, #460]	; (8001340 <main+0x20c>)
 8001172:	f7ff fb99 	bl	80008a8 <myDebug>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8001176:	e001      	b.n	800117c <main+0x48>
		WAIT_FOR_HANDSHAKE();
 8001178:	f000 fc92 	bl	8001aa0 <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 800117c:	4b71      	ldr	r3, [pc, #452]	; (8001344 <main+0x210>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f9      	beq.n	8001178 <main+0x44>
	}

	myDebug("__________LoRa Starting.......###\r\n\n");
 8001184:	4870      	ldr	r0, [pc, #448]	; (8001348 <main+0x214>)
 8001186:	f7ff fb8f 	bl	80008a8 <myDebug>
	pkt_id = 0;
 800118a:	4b70      	ldr	r3, [pc, #448]	; (800134c <main+0x218>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8001190:	f00b fa61 	bl	800c656 <MX_SubGHz_Phy_Process>

    /* USER CODE BEGIN 3 */

		if (OBC_HANDSHAKE_FLAG == 1) {
 8001194:	4b6b      	ldr	r3, [pc, #428]	; (8001344 <main+0x210>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d1f9      	bne.n	8001190 <main+0x5c>
			myDebug("### Waiting to receive CMD from OBC.....\n");
 800119c:	486c      	ldr	r0, [pc, #432]	; (8001350 <main+0x21c>)
 800119e:	f7ff fb83 	bl	80008a8 <myDebug>
			Receive_MAIN_CMD();
 80011a2:	f000 fd2b 	bl	8001bfc <Receive_MAIN_CMD>
			delay_us(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff fbb8 	bl	800091c <delay_us>
			Execute_MAIN_CMD();
 80011ac:	f000 fd7e 	bl	8001cac <Execute_MAIN_CMD>
			delay_us(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff fbb3 	bl	800091c <delay_us>
			myDebug("--> MCU_ID: 0x%x\n", MCU_ID);
 80011b6:	4b67      	ldr	r3, [pc, #412]	; (8001354 <main+0x220>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4866      	ldr	r0, [pc, #408]	; (8001358 <main+0x224>)
 80011be:	f7ff fb73 	bl	80008a8 <myDebug>
			myDebug("--> Flash address: 0x%x\n", MAIN_ADDR);
 80011c2:	4b66      	ldr	r3, [pc, #408]	; (800135c <main+0x228>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4865      	ldr	r0, [pc, #404]	; (8001360 <main+0x22c>)
 80011ca:	f7ff fb6d 	bl	80008a8 <myDebug>
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011ce:	4b65      	ldr	r3, [pc, #404]	; (8001364 <main+0x230>)
 80011d0:	7a1b      	ldrb	r3, [r3, #8]
 80011d2:	4618      	mov	r0, r3
					MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 80011d4:	4b63      	ldr	r3, [pc, #396]	; (8001364 <main+0x230>)
 80011d6:	7a5b      	ldrb	r3, [r3, #9]
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011d8:	461c      	mov	r4, r3
					MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 80011da:	4b62      	ldr	r3, [pc, #392]	; (8001364 <main+0x230>)
 80011dc:	7a9b      	ldrb	r3, [r3, #10]
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011de:	461d      	mov	r5, r3
					MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 80011e0:	4b60      	ldr	r3, [pc, #384]	; (8001364 <main+0x230>)
 80011e2:	7adb      	ldrb	r3, [r3, #11]
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011e4:	461a      	mov	r2, r3
					MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 80011e6:	4b5f      	ldr	r3, [pc, #380]	; (8001364 <main+0x230>)
 80011e8:	7b1b      	ldrb	r3, [r3, #12]
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011ea:	4619      	mov	r1, r3
					MAIN_CMD[13]);
 80011ec:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <main+0x230>)
 80011ee:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	9101      	str	r1, [sp, #4]
 80011f4:	9200      	str	r2, [sp, #0]
 80011f6:	462b      	mov	r3, r5
 80011f8:	4622      	mov	r2, r4
 80011fa:	4601      	mov	r1, r0
 80011fc:	485a      	ldr	r0, [pc, #360]	; (8001368 <main+0x234>)
 80011fe:	f7ff fb53 	bl	80008a8 <myDebug>

			setDataToBeTransmitted();
 8001202:	f7ff fd1b 	bl	8000c3c <setDataToBeTransmitted>

			PacketParams_t pkt_params;
			pkt_params.PacketType = PACKET_TYPE_LORA;
 8001206:	2301      	movs	r3, #1
 8001208:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			pkt_params.Params.LoRa.PayloadLength = PayLoadLength;
 800120c:	2320      	movs	r3, #32
 800120e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			pkt_params.Params.LoRa.PreambleLength = 8;
 8001212:	2308      	movs	r3, #8
 8001214:	867b      	strh	r3, [r7, #50]	; 0x32
			pkt_params.Params.LoRa.HeaderType = LORA_PACKET_IMPLICIT;
 8001216:	2301      	movs	r3, #1
 8001218:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			pkt_params.Params.LoRa.CrcMode = LORA_CRC_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			pkt_params.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001222:	2300      	movs	r3, #0
 8001224:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			ModulationParams_t mod_params;
			mod_params.PacketType = PACKET_TYPE_LORA;
 8001228:	2301      	movs	r3, #1
 800122a:	723b      	strb	r3, [r7, #8]
			mod_params.Params.LoRa.Bandwidth = LORA_BW_031;
 800122c:	2302      	movs	r3, #2
 800122e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			mod_params.Params.LoRa.SpreadingFactor = LORA_SF10;
 8001232:	230a      	movs	r3, #10
 8001234:	f887 3020 	strb.w	r3, [r7, #32]
			mod_params.Params.LoRa.CodingRate = LORA_CR_4_8;
 8001238:	2304      	movs	r3, #4
 800123a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			mod_params.Params.LoRa.LowDatarateOptimize = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			SUBGRF_Init(DioIrqHndlr);
 8001244:	4849      	ldr	r0, [pc, #292]	; (800136c <main+0x238>)
 8001246:	f009 ffb5 	bl	800b1b4 <SUBGRF_Init>
			SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800124a:	2100      	movs	r1, #0
 800124c:	2000      	movs	r0, #0
 800124e:	f00a fe1d 	bl	800be8c <SUBGRF_SetBufferBaseAddress>
			SUBGRF_SetPayload(txBuffer, PayLoadLength);
 8001252:	2120      	movs	r1, #32
 8001254:	4846      	ldr	r0, [pc, #280]	; (8001370 <main+0x23c>)
 8001256:	f009 ffff 	bl	800b258 <SUBGRF_SetPayload>
			SUBGRF_SetPacketParams(&pkt_params);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4618      	mov	r0, r3
 8001260:	f00a fd76 	bl	800bd50 <SUBGRF_SetPacketParams>
			SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 8001264:	4a43      	ldr	r2, [pc, #268]	; (8001374 <main+0x240>)
 8001266:	463b      	mov	r3, r7
 8001268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001270:	463b      	mov	r3, r7
 8001272:	4618      	mov	r0, r3
 8001274:	f00a f835 	bl	800b2e2 <SUBGRF_SetSyncWord>
							0x00, 0x00, 0x00 });
			SUBGRF_SetWhiteningSeed(0x01FF);
 8001278:	f240 10ff 	movw	r0, #511	; 0x1ff
 800127c:	f00a f880 	bl	800b380 <SUBGRF_SetWhiteningSeed>
			SUBGRF_SetRfFrequency(FREQ_433_MHZ);
 8001280:	483d      	ldr	r0, [pc, #244]	; (8001378 <main+0x244>)
 8001282:	f00a fb59 	bl	800b938 <SUBGRF_SetRfFrequency>
			SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8001286:	2301      	movs	r3, #1
 8001288:	2200      	movs	r2, #0
 800128a:	2107      	movs	r1, #7
 800128c:	2004      	movs	r0, #4
 800128e:	f00a fad5 	bl	800b83c <SUBGRF_SetPaConfig>
			SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
 8001292:	2206      	movs	r2, #6
 8001294:	2116      	movs	r1, #22
 8001296:	2002      	movs	r0, #2
 8001298:	f00a fbba 	bl	800ba10 <SUBGRF_SetTxParams>
			SUBGRF_SetModulationParams(&mod_params);
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00a fc83 	bl	800bbac <SUBGRF_SetModulationParams>
			SUBGRF_SetDioIrqParams(
 80012a6:	2300      	movs	r3, #0
 80012a8:	2200      	movs	r2, #0
 80012aa:	f240 210f 	movw	r1, #527	; 0x20f
 80012ae:	f240 200f 	movw	r0, #527	; 0x20f
 80012b2:	f00a fae5 	bl	800b880 <SUBGRF_SetDioIrqParams>
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_RADIO_NONE, IRQ_RADIO_NONE);

			myDebug("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 80012b6:	4831      	ldr	r0, [pc, #196]	; (800137c <main+0x248>)
 80012b8:	f7ff faf6 	bl	80008a8 <myDebug>
			myDebug("Modulation: LoRa PACKET\r\n");
 80012bc:	4830      	ldr	r0, [pc, #192]	; (8001380 <main+0x24c>)
 80012be:	f7ff faf3 	bl	80008a8 <myDebug>
			myDebug("FREQUENCY : %lu\r\n", FREQ_433_MHZ);
 80012c2:	492d      	ldr	r1, [pc, #180]	; (8001378 <main+0x244>)
 80012c4:	482f      	ldr	r0, [pc, #188]	; (8001384 <main+0x250>)
 80012c6:	f7ff faef 	bl	80008a8 <myDebug>
			myDebug(
 80012ca:	2316      	movs	r3, #22
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2300      	movs	r3, #0
 80012d0:	2207      	movs	r2, #7
 80012d2:	2104      	movs	r1, #4
 80012d4:	482c      	ldr	r0, [pc, #176]	; (8001388 <main+0x254>)
 80012d6:	f7ff fae7 	bl	80008a8 <myDebug>
					"POWER CONFIG:\r\n    PA_DUTY_CYCLE : %x,    HP_MAX: %x,\n\r    PA_SEL : %x,    POWER TX: %u dBm\n\r",
					PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.LoRa.Bandwidth);
 80012da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80012de:	4619      	mov	r1, r3
 80012e0:	482a      	ldr	r0, [pc, #168]	; (800138c <main+0x258>)
 80012e2:	f7ff fae1 	bl	80008a8 <myDebug>
			myDebug("Packet Type: 			%d\n\r", pkt_params.PacketType);
 80012e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4828      	ldr	r0, [pc, #160]	; (8001390 <main+0x25c>)
 80012ee:	f7ff fadb 	bl	80008a8 <myDebug>
			myDebug("PayloadLength: 		%d\n\r",
					pkt_params.Params.LoRa.PayloadLength);
 80012f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
			myDebug("PayloadLength: 		%d\n\r",
 80012f6:	4619      	mov	r1, r3
 80012f8:	4826      	ldr	r0, [pc, #152]	; (8001394 <main+0x260>)
 80012fa:	f7ff fad5 	bl	80008a8 <myDebug>
			myDebug("PreambleLength: 		%d\n\r",
					pkt_params.Params.LoRa.PreambleLength);
 80012fe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
			myDebug("PreambleLength: 		%d\n\r",
 8001300:	4619      	mov	r1, r3
 8001302:	4825      	ldr	r0, [pc, #148]	; (8001398 <main+0x264>)
 8001304:	f7ff fad0 	bl	80008a8 <myDebug>
			myDebug("HeaderType: 			%d\n\r", pkt_params.Params.LoRa.HeaderType);
 8001308:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800130c:	4619      	mov	r1, r3
 800130e:	4823      	ldr	r0, [pc, #140]	; (800139c <main+0x268>)
 8001310:	f7ff faca 	bl	80008a8 <myDebug>
			myDebug("__________________________________________________\r\n");
 8001314:	4822      	ldr	r0, [pc, #136]	; (80013a0 <main+0x26c>)
 8001316:	f7ff fac7 	bl	80008a8 <myDebug>
			myDebug(
 800131a:	4822      	ldr	r0, [pc, #136]	; (80013a4 <main+0x270>)
 800131c:	f7ff fac4 	bl	80008a8 <myDebug>
					"________________LoRa Transmitting to SSOC_2____________\r\n");

			SUBGRF_SetRfFrequency(FREQ_433_MHZ);
 8001320:	4815      	ldr	r0, [pc, #84]	; (8001378 <main+0x244>)
 8001322:	f00a fb09 	bl	800b938 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
 8001326:	2101      	movs	r1, #1
 8001328:	2002      	movs	r0, #2
 800132a:	f00a ff4d 	bl	800c1c8 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(txBuffer, 32, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2120      	movs	r1, #32
 8001332:	480f      	ldr	r0, [pc, #60]	; (8001370 <main+0x23c>)
 8001334:	f009 ffc2 	bl	800b2bc <SUBGRF_SendPayload>
    MX_SubGHz_Phy_Process();
 8001338:	e72a      	b.n	8001190 <main+0x5c>
 800133a:	bf00      	nop
 800133c:	20000534 	.word	0x20000534
 8001340:	0800d844 	.word	0x0800d844
 8001344:	20000580 	.word	0x20000580
 8001348:	0800d870 	.word	0x0800d870
 800134c:	20000581 	.word	0x20000581
 8001350:	0800d898 	.word	0x0800d898
 8001354:	20000603 	.word	0x20000603
 8001358:	0800d8c4 	.word	0x0800d8c4
 800135c:	20000608 	.word	0x20000608
 8001360:	0800d8d8 	.word	0x0800d8d8
 8001364:	200005f4 	.word	0x200005f4
 8001368:	0800d8f4 	.word	0x0800d8f4
 800136c:	08001a29 	.word	0x08001a29
 8001370:	2000059c 	.word	0x2000059c
 8001374:	0800dacc 	.word	0x0800dacc
 8001378:	19cf0e40 	.word	0x19cf0e40
 800137c:	0800d91c 	.word	0x0800d91c
 8001380:	0800d950 	.word	0x0800d950
 8001384:	0800d96c 	.word	0x0800d96c
 8001388:	0800d980 	.word	0x0800d980
 800138c:	0800d9e0 	.word	0x0800d9e0
 8001390:	0800d9fc 	.word	0x0800d9fc
 8001394:	0800da14 	.word	0x0800da14
 8001398:	0800da2c 	.word	0x0800da2c
 800139c:	0800da44 	.word	0x0800da44
 80013a0:	0800da58 	.word	0x0800da58
 80013a4:	0800da90 	.word	0x0800da90

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b09a      	sub	sp, #104	; 0x68
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2248      	movs	r2, #72	; 0x48
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00b fcf0 	bl	800cd9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <SystemClock_Config+0xcc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013d6:	4a27      	ldr	r2, [pc, #156]	; (8001474 <SystemClock_Config+0xcc>)
 80013d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <SystemClock_Config+0xcc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80013ea:	230b      	movs	r3, #11
 80013ec:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80013ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fa:	2340      	movs	r3, #64	; 0x40
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001406:	2301      	movs	r3, #1
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140e:	2303      	movs	r3, #3
 8001410:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001412:	2310      	movs	r3, #16
 8001414:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8001416:	2306      	movs	r3, #6
 8001418:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800141a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001420:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001424:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800142a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fe1f 	bl	8004074 <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800143c:	f000 fb28 	bl	8001a90 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001440:	234f      	movs	r3, #79	; 0x4f
 8001442:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001444:	2303      	movs	r3, #3
 8001446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2102      	movs	r1, #2
 800145c:	4618      	mov	r0, r3
 800145e:	f003 f98b 	bl	8004778 <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001468:	f000 fb12 	bl	8001a90 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	3768      	adds	r7, #104	; 0x68
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	58000400 	.word	0x58000400

08001478 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MX_ADC_Init+0xc4>)
 800148a:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <MX_ADC_Init+0xc8>)
 800148c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <MX_ADC_Init+0xc4>)
 8001490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001494:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <MX_ADC_Init+0xc4>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <MX_ADC_Init+0xc4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <MX_ADC_Init+0xc4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <MX_ADC_Init+0xc4>)
 80014aa:	2204      	movs	r2, #4
 80014ac:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <MX_ADC_Init+0xc4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80014b4:	4b21      	ldr	r3, [pc, #132]	; (800153c <MX_ADC_Init+0xc4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <MX_ADC_Init+0xc4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_ADC_Init+0xc4>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_ADC_Init+0xc4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_ADC_Init+0xc4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_ADC_Init+0xc4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_ADC_Init+0xc4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_ADC_Init+0xc4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_ADC_Init+0xc4>)
 80014ea:	2207      	movs	r2, #7
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_ADC_Init+0xc4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_ADC_Init+0xc4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_ADC_Init+0xc4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001502:	480e      	ldr	r0, [pc, #56]	; (800153c <MX_ADC_Init+0xc4>)
 8001504:	f001 fa12 	bl	800292c <HAL_ADC_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_ADC_Init+0x9a>
  {
    Error_Handler();
 800150e:	f000 fabf 	bl	8001a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_ADC_Init+0xcc>)
 8001514:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <MX_ADC_Init+0xc4>)
 8001524:	f001 fb96 	bl	8002c54 <HAL_ADC_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_ADC_Init+0xba>
  {
    Error_Handler();
 800152e:	f000 faaf 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200000ec 	.word	0x200000ec
 8001540:	40012400 	.word	0x40012400
 8001544:	b0001000 	.word	0xb0001000

08001548 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 800154e:	4a23      	ldr	r2, [pc, #140]	; (80015dc <MX_LPUART1_UART_Init+0x94>)
 8001550:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 800157a:	2200      	movs	r2, #0
 800157c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 8001592:	f006 f978 	bl	8007886 <HAL_UART_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800159c:	f000 fa78 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 80015a4:	f007 fda0 	bl	80090e8 <HAL_UARTEx_SetTxFifoThreshold>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015ae:	f000 fa6f 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b2:	2100      	movs	r1, #0
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 80015b6:	f007 fdd5 	bl	8009164 <HAL_UARTEx_SetRxFifoThreshold>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015c0:	f000 fa66 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_LPUART1_UART_Init+0x90>)
 80015c6:	f007 fd57 	bl	8009078 <HAL_UARTEx_DisableFifoMode>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015d0:	f000 fa5e 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000150 	.word	0x20000150
 80015dc:	40008000 	.word	0x40008000

080015e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <MX_USART1_UART_Init+0x90>)
 80015e6:	4a23      	ldr	r2, [pc, #140]	; (8001674 <MX_USART1_UART_Init+0x94>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_USART1_UART_Init+0x90>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_USART1_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_USART1_UART_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_USART1_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_USART1_UART_Init+0x90>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <MX_USART1_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_USART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <MX_USART1_UART_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <MX_USART1_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001628:	4811      	ldr	r0, [pc, #68]	; (8001670 <MX_USART1_UART_Init+0x90>)
 800162a:	f006 f92c 	bl	8007886 <HAL_UART_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001634:	f000 fa2c 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001638:	2100      	movs	r1, #0
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_USART1_UART_Init+0x90>)
 800163c:	f007 fd54 	bl	80090e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001646:	f000 fa23 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <MX_USART1_UART_Init+0x90>)
 800164e:	f007 fd89 	bl	8009164 <HAL_UARTEx_SetRxFifoThreshold>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001658:	f000 fa1a 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_USART1_UART_Init+0x90>)
 800165e:	f007 fd0b 	bl	8009078 <HAL_UARTEx_DisableFifoMode>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001668:	f000 fa12 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200001e4 	.word	0x200001e4
 8001674:	40013800 	.word	0x40013800

08001678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <MX_USART2_UART_Init+0x90>)
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <MX_USART2_UART_Init+0x94>)
 8001680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_USART2_UART_Init+0x90>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_USART2_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <MX_USART2_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_USART2_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_USART2_UART_Init+0x90>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_USART2_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_USART2_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_USART2_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_USART2_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_USART2_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c0:	4811      	ldr	r0, [pc, #68]	; (8001708 <MX_USART2_UART_Init+0x90>)
 80016c2:	f006 f8e0 	bl	8007886 <HAL_UART_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016cc:	f000 f9e0 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d0:	2100      	movs	r1, #0
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_USART2_UART_Init+0x90>)
 80016d4:	f007 fd08 	bl	80090e8 <HAL_UARTEx_SetTxFifoThreshold>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016de:	f000 f9d7 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <MX_USART2_UART_Init+0x90>)
 80016e6:	f007 fd3d 	bl	8009164 <HAL_UARTEx_SetRxFifoThreshold>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016f0:	f000 f9ce 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_USART2_UART_Init+0x90>)
 80016f6:	f007 fcbf 	bl	8009078 <HAL_UARTEx_DisableFifoMode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001700:	f000 f9c6 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000278 	.word	0x20000278
 800170c:	40004400 	.word	0x40004400

08001710 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001724:	2300      	movs	r3, #0
 8001726:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001728:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <MX_RTC_Init+0xc0>)
 800172a:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <MX_RTC_Init+0xc4>)
 800172c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800172e:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <MX_RTC_Init+0xc0>)
 8001730:	2200      	movs	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001734:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <MX_RTC_Init+0xc0>)
 8001736:	227f      	movs	r2, #127	; 0x7f
 8001738:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <MX_RTC_Init+0xc0>)
 800173c:	22ff      	movs	r2, #255	; 0xff
 800173e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001740:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <MX_RTC_Init+0xc0>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <MX_RTC_Init+0xc0>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <MX_RTC_Init+0xc0>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <MX_RTC_Init+0xc0>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001758:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_RTC_Init+0xc0>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <MX_RTC_Init+0xc0>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001766:	481a      	ldr	r0, [pc, #104]	; (80017d0 <MX_RTC_Init+0xc0>)
 8001768:	f003 fce0 	bl	800512c <HAL_RTC_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001772:	f000 f98d 	bl	8001a90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001776:	2300      	movs	r3, #0
 8001778:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800177a:	2300      	movs	r3, #0
 800177c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800177e:	2300      	movs	r3, #0
 8001780:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2201      	movs	r2, #1
 800178e:	4619      	mov	r1, r3
 8001790:	480f      	ldr	r0, [pc, #60]	; (80017d0 <MX_RTC_Init+0xc0>)
 8001792:	f003 fd4d 	bl	8005230 <HAL_RTC_SetTime>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_RTC_Init+0x90>
  {
    Error_Handler();
 800179c:	f000 f978 	bl	8001a90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017a0:	2301      	movs	r3, #1
 80017a2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80017a4:	2301      	movs	r3, #1
 80017a6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	2201      	movs	r2, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <MX_RTC_Init+0xc0>)
 80017b8:	f003 fe38 	bl	800542c <HAL_RTC_SetDate>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 80017c2:	f000 f965 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000048c 	.word	0x2000048c
 80017d4:	40002800 	.word	0x40002800

080017d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_SPI2_Init+0x74>)
 80017de:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <MX_SPI2_Init+0x78>)
 80017e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_SPI2_Init+0x74>)
 80017e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_SPI2_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_SPI2_Init+0x74>)
 80017f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_SPI2_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_SPI2_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_SPI2_Init+0x74>)
 8001806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_SPI2_Init+0x74>)
 800180e:	2238      	movs	r2, #56	; 0x38
 8001810:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_SPI2_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_SPI2_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_SPI2_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_SPI2_Init+0x74>)
 8001826:	2207      	movs	r2, #7
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_SPI2_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_SPI2_Init+0x74>)
 8001832:	2208      	movs	r2, #8
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_SPI2_Init+0x74>)
 8001838:	f003 ff9e 	bl	8005778 <HAL_SPI_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001842:	f000 f925 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200004c4 	.word	0x200004c4
 8001850:	40003800 	.word	0x40003800

08001854 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_SUBGHZ_Init+0x20>)
 800185a:	2210      	movs	r2, #16
 800185c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_SUBGHZ_Init+0x20>)
 8001860:	f005 f912 	bl	8006a88 <HAL_SUBGHZ_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800186a:	f000 f911 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000528 	.word	0x20000528

08001878 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <MX_TIM1_Init+0xa0>)
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <MX_TIM1_Init+0xa4>)
 800189a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_TIM1_Init+0xa0>)
 800189e:	222f      	movs	r2, #47	; 0x2f
 80018a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_TIM1_Init+0xa0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MX_TIM1_Init+0xa0>)
 80018aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_TIM1_Init+0xa0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <MX_TIM1_Init+0xa0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_TIM1_Init+0xa0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c2:	4815      	ldr	r0, [pc, #84]	; (8001918 <MX_TIM1_Init+0xa0>)
 80018c4:	f005 fd00 	bl	80072c8 <HAL_TIM_Base_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018ce:	f000 f8df 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	480e      	ldr	r0, [pc, #56]	; (8001918 <MX_TIM1_Init+0xa0>)
 80018e0:	f005 fd8e 	bl	8007400 <HAL_TIM_ConfigClockSource>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018ea:	f000 f8d1 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <MX_TIM1_Init+0xa0>)
 8001900:	f005 ff42 	bl	8007788 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800190a:	f000 f8c1 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000534 	.word	0x20000534
 800191c:	40012c00 	.word	0x40012c00

08001920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001924:	2004      	movs	r0, #4
 8001926:	f7ff f959 	bl	8000bdc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800192a:	2001      	movs	r0, #1
 800192c:	f7ff f956 	bl	8000bdc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	200b      	movs	r0, #11
 8001936:	f001 fb9c 	bl	8003072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800193a:	200b      	movs	r0, #11
 800193c:	f001 fbb3 	bl	80030a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	200c      	movs	r0, #12
 8001946:	f001 fb94 	bl	8003072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800194a:	200c      	movs	r0, #12
 800194c:	f001 fbab 	bl	80030a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	200d      	movs	r0, #13
 8001956:	f001 fb8c 	bl	8003072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800195a:	200d      	movs	r0, #13
 800195c:	f001 fba3 	bl	80030a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	200e      	movs	r0, #14
 8001966:	f001 fb84 	bl	8003072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800196a:	200e      	movs	r0, #14
 800196c:	f001 fb9b 	bl	80030a6 <HAL_NVIC_EnableIRQ>

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff f93f 	bl	8000c0c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	2002      	movs	r0, #2
 8001990:	f7ff f93c 	bl	8000c0c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001994:	2004      	movs	r0, #4
 8001996:	f7ff f939 	bl	8000c0c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80019a0:	481f      	ldr	r0, [pc, #124]	; (8001a20 <MX_GPIO_Init+0xac>)
 80019a2:	f002 f87d 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2138      	movs	r1, #56	; 0x38
 80019aa:	481e      	ldr	r0, [pc, #120]	; (8001a24 <MX_GPIO_Init+0xb0>)
 80019ac:	f002 f878 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 80019b0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80019b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019be:	2302      	movs	r3, #2
 80019c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4816      	ldr	r0, [pc, #88]	; (8001a20 <MX_GPIO_Init+0xac>)
 80019c8:	f001 ff0a 	bl	80037e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80019cc:	2338      	movs	r3, #56	; 0x38
 80019ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4810      	ldr	r0, [pc, #64]	; (8001a24 <MX_GPIO_Init+0xb0>)
 80019e2:	f001 fefd 	bl	80037e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80019e6:	2303      	movs	r3, #3
 80019e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fc:	f001 fef0 	bl	80037e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4804      	ldr	r0, [pc, #16]	; (8001a24 <MX_GPIO_Init+0xb0>)
 8001a14:	f001 fee4 	bl	80037e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a18:	bf00      	nop
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	48000400 	.word	0x48000400
 8001a24:	48000800 	.word	0x48000800

08001a28 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_TX_DONE) {
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d11b      	bne.n	8001a70 <DioIrqHndlr+0x48>
		myDebug("\n\r LoRa Transmitted Successful to SSOC_2:  \r");
 8001a38:	480f      	ldr	r0, [pc, #60]	; (8001a78 <DioIrqHndlr+0x50>)
 8001a3a:	f7fe ff35 	bl	80008a8 <myDebug>
		for (int i = 0; i < 32; i++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e00a      	b.n	8001a5a <DioIrqHndlr+0x32>
			myDebug(" %02x", txBuffer[i]);
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <DioIrqHndlr+0x54>)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480c      	ldr	r0, [pc, #48]	; (8001a80 <DioIrqHndlr+0x58>)
 8001a50:	f7fe ff2a 	bl	80008a8 <myDebug>
		for (int i = 0; i < 32; i++) {
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3301      	adds	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b1f      	cmp	r3, #31
 8001a5e:	ddf1      	ble.n	8001a44 <DioIrqHndlr+0x1c>
		}
		myDebug("\n\n");
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <DioIrqHndlr+0x5c>)
 8001a62:	f7fe ff21 	bl	80008a8 <myDebug>

		HAL_UART_Receive_DMA(&hlpuart1, rxData, PayLoadLength);
 8001a66:	2220      	movs	r2, #32
 8001a68:	4907      	ldr	r1, [pc, #28]	; (8001a88 <DioIrqHndlr+0x60>)
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <DioIrqHndlr+0x64>)
 8001a6c:	f006 f8a6 	bl	8007bbc <HAL_UART_Receive_DMA>
	}
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	0800dad4 	.word	0x0800dad4
 8001a7c:	2000059c 	.word	0x2000059c
 8001a80:	0800db04 	.word	0x0800db04
 8001a84:	0800db0c 	.word	0x0800db0c
 8001a88:	200005bc 	.word	0x200005bc
 8001a8c:	20000150 	.word	0x20000150

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	MSN_Error();
 8001a94:	f7ff fa08 	bl	8000ea8 <MSN_Error>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
	__disable_irq();
	while (1) {
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0xc>
	...

08001aa0 <WAIT_FOR_HANDSHAKE>:
uint32_t MSN_CMD;
uint32_t MAIN_ADDR;

extern uint8_t OBC_HANDSHAKE_FLAG;

void WAIT_FOR_HANDSHAKE() {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
	uint8_t MainCMDHs[5];
	if (HAL_UART_Receive(&huart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8001aa6:	4639      	mov	r1, r7
 8001aa8:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001aac:	2205      	movs	r2, #5
 8001aae:	4848      	ldr	r0, [pc, #288]	; (8001bd0 <WAIT_FOR_HANDSHAKE+0x130>)
 8001ab0:	f005 ffbf 	bl	8007a32 <HAL_UART_Receive>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d17e      	bne.n	8001bb8 <WAIT_FOR_HANDSHAKE+0x118>
		myDebug("--> HandShake command received from OBC!");
 8001aba:	4846      	ldr	r0, [pc, #280]	; (8001bd4 <WAIT_FOR_HANDSHAKE+0x134>)
 8001abc:	f7fe fef4 	bl	80008a8 <myDebug>
		for (int i = 0; i < 5; i++) {
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e00a      	b.n	8001adc <WAIT_FOR_HANDSHAKE+0x3c>
			myDebug("%x", MainCMDHs[i]);
 8001ac6:	463a      	mov	r2, r7
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4841      	ldr	r0, [pc, #260]	; (8001bd8 <WAIT_FOR_HANDSHAKE+0x138>)
 8001ad2:	f7fe fee9 	bl	80008a8 <myDebug>
		for (int i = 0; i < 5; i++) {
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	ddf1      	ble.n	8001ac6 <WAIT_FOR_HANDSHAKE+0x26>
		}
		myDebug("\n");
 8001ae2:	483e      	ldr	r0, [pc, #248]	; (8001bdc <WAIT_FOR_HANDSHAKE+0x13c>)
 8001ae4:	f7fe fee0 	bl	80008a8 <myDebug>
		delay_us(1);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7fe ff17 	bl	800091c <delay_us>
		if (MainCMDHs[0] == 0x04 && MainCMDHs[4] == 0xFE) {
 8001aee:	783b      	ldrb	r3, [r7, #0]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d158      	bne.n	8001ba6 <WAIT_FOR_HANDSHAKE+0x106>
 8001af4:	793b      	ldrb	r3, [r7, #4]
 8001af6:	2bfe      	cmp	r3, #254	; 0xfe
 8001af8:	d155      	bne.n	8001ba6 <WAIT_FOR_HANDSHAKE+0x106>
			myDebug("--> Command Acknowledged!\n");
 8001afa:	4839      	ldr	r0, [pc, #228]	; (8001be0 <WAIT_FOR_HANDSHAKE+0x140>)
 8001afc:	f7fe fed4 	bl	80008a8 <myDebug>

			if (HAL_UART_Transmit(&hlpuart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8001b00:	4639      	mov	r1, r7
 8001b02:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001b06:	2205      	movs	r2, #5
 8001b08:	4836      	ldr	r0, [pc, #216]	; (8001be4 <WAIT_FOR_HANDSHAKE+0x144>)
 8001b0a:	f005 ff0c 	bl	8007926 <HAL_UART_Transmit>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d157      	bne.n	8001bc4 <WAIT_FOR_HANDSHAKE+0x124>

				if (HAL_UART_Receive(&hlpuart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8001b14:	4639      	mov	r1, r7
 8001b16:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	4831      	ldr	r0, [pc, #196]	; (8001be4 <WAIT_FOR_HANDSHAKE+0x144>)
 8001b1e:	f005 ff88 	bl	8007a32 <HAL_UART_Receive>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d14d      	bne.n	8001bc4 <WAIT_FOR_HANDSHAKE+0x124>
					myDebug("--> HandShake command received from ssoc2!");
 8001b28:	482f      	ldr	r0, [pc, #188]	; (8001be8 <WAIT_FOR_HANDSHAKE+0x148>)
 8001b2a:	f7fe febd 	bl	80008a8 <myDebug>
					for (int i = 0; i < 5; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	e00a      	b.n	8001b4a <WAIT_FOR_HANDSHAKE+0xaa>
						myDebug("%x", MainCMDHs[i]);
 8001b34:	463a      	mov	r2, r7
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	4413      	add	r3, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4826      	ldr	r0, [pc, #152]	; (8001bd8 <WAIT_FOR_HANDSHAKE+0x138>)
 8001b40:	f7fe feb2 	bl	80008a8 <myDebug>
					for (int i = 0; i < 5; i++) {
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	ddf1      	ble.n	8001b34 <WAIT_FOR_HANDSHAKE+0x94>
					}
					myDebug("\n");
 8001b50:	4822      	ldr	r0, [pc, #136]	; (8001bdc <WAIT_FOR_HANDSHAKE+0x13c>)
 8001b52:	f7fe fea9 	bl	80008a8 <myDebug>
					delay_us(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7fe fee0 	bl	800091c <delay_us>
					if (MainCMDHs[0] == 0x04 && MainCMDHs[4] == 0xFE) {
 8001b5c:	783b      	ldrb	r3, [r7, #0]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d119      	bne.n	8001b96 <WAIT_FOR_HANDSHAKE+0xf6>
 8001b62:	793b      	ldrb	r3, [r7, #4]
 8001b64:	2bfe      	cmp	r3, #254	; 0xfe
 8001b66:	d116      	bne.n	8001b96 <WAIT_FOR_HANDSHAKE+0xf6>
						myDebug("--> Command Acknowledged!\n");
 8001b68:	481d      	ldr	r0, [pc, #116]	; (8001be0 <WAIT_FOR_HANDSHAKE+0x140>)
 8001b6a:	f7fe fe9d 	bl	80008a8 <myDebug>

						if (HAL_UART_Transmit(&huart1, MainCMDHs, 5, 7000)
 8001b6e:	4639      	mov	r1, r7
 8001b70:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001b74:	2205      	movs	r2, #5
 8001b76:	4816      	ldr	r0, [pc, #88]	; (8001bd0 <WAIT_FOR_HANDSHAKE+0x130>)
 8001b78:	f005 fed5 	bl	8007926 <HAL_UART_Transmit>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d110      	bne.n	8001ba4 <WAIT_FOR_HANDSHAKE+0x104>
								== HAL_OK) {
							myDebug("--> HandShake ACK sent to MAIN\n");
 8001b82:	481a      	ldr	r0, [pc, #104]	; (8001bec <WAIT_FOR_HANDSHAKE+0x14c>)
 8001b84:	f7fe fe90 	bl	80008a8 <myDebug>
							OBC_HANDSHAKE_FLAG = 1;
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <WAIT_FOR_HANDSHAKE+0x150>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
							delay_us(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7fe fec4 	bl	800091c <delay_us>
						if (HAL_UART_Transmit(&huart1, MainCMDHs, 5, 7000)
 8001b94:	e006      	b.n	8001ba4 <WAIT_FOR_HANDSHAKE+0x104>
						}
					}else{
						myDebug("*** Unknown handshake command received from ssoc2!\n");
 8001b96:	4817      	ldr	r0, [pc, #92]	; (8001bf4 <WAIT_FOR_HANDSHAKE+0x154>)
 8001b98:	f7fe fe86 	bl	80008a8 <myDebug>
						delay_us(1);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7fe febd 	bl	800091c <delay_us>
			if (HAL_UART_Transmit(&hlpuart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8001ba2:	e00f      	b.n	8001bc4 <WAIT_FOR_HANDSHAKE+0x124>
 8001ba4:	e00e      	b.n	8001bc4 <WAIT_FOR_HANDSHAKE+0x124>
					}
				}
			}
		} else {
			myDebug("*** Unknown handshake command received\n");
 8001ba6:	4814      	ldr	r0, [pc, #80]	; (8001bf8 <WAIT_FOR_HANDSHAKE+0x158>)
 8001ba8:	f7fe fe7e 	bl	80008a8 <myDebug>
			delay_us(1);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7fe feb5 	bl	800091c <delay_us>
			WAIT_FOR_HANDSHAKE();
 8001bb2:	f7ff ff75 	bl	8001aa0 <WAIT_FOR_HANDSHAKE>
		}
	} else {
		delay_us(1);
		WAIT_FOR_HANDSHAKE();
	}
}
 8001bb6:	e006      	b.n	8001bc6 <WAIT_FOR_HANDSHAKE+0x126>
		delay_us(1);
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7fe feaf 	bl	800091c <delay_us>
		WAIT_FOR_HANDSHAKE();
 8001bbe:	f7ff ff6f 	bl	8001aa0 <WAIT_FOR_HANDSHAKE>
}
 8001bc2:	e000      	b.n	8001bc6 <WAIT_FOR_HANDSHAKE+0x126>
			if (HAL_UART_Transmit(&hlpuart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8001bc4:	bf00      	nop
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001e4 	.word	0x200001e4
 8001bd4:	0800db10 	.word	0x0800db10
 8001bd8:	0800db3c 	.word	0x0800db3c
 8001bdc:	0800db40 	.word	0x0800db40
 8001be0:	0800db44 	.word	0x0800db44
 8001be4:	20000150 	.word	0x20000150
 8001be8:	0800db60 	.word	0x0800db60
 8001bec:	0800db8c 	.word	0x0800db8c
 8001bf0:	20000580 	.word	0x20000580
 8001bf4:	0800dbac 	.word	0x0800dbac
 8001bf8:	0800dbe0 	.word	0x0800dbe0

08001bfc <Receive_MAIN_CMD>:

void Receive_MAIN_CMD() {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive(&huart1, MAIN_CMD, 15, 7000) == HAL_OK) {
 8001c02:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001c06:	220f      	movs	r2, #15
 8001c08:	4920      	ldr	r1, [pc, #128]	; (8001c8c <Receive_MAIN_CMD+0x90>)
 8001c0a:	4821      	ldr	r0, [pc, #132]	; (8001c90 <Receive_MAIN_CMD+0x94>)
 8001c0c:	f005 ff11 	bl	8007a32 <HAL_UART_Receive>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d12e      	bne.n	8001c74 <Receive_MAIN_CMD+0x78>
		myDebug("--> Command received from OBC: 0x");
 8001c16:	481f      	ldr	r0, [pc, #124]	; (8001c94 <Receive_MAIN_CMD+0x98>)
 8001c18:	f7fe fe46 	bl	80008a8 <myDebug>
		for (int i = 0; i < 15; i++) {
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	e00a      	b.n	8001c38 <Receive_MAIN_CMD+0x3c>
			myDebug("%x\r", MAIN_CMD[i]);
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <Receive_MAIN_CMD+0x90>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	481a      	ldr	r0, [pc, #104]	; (8001c98 <Receive_MAIN_CMD+0x9c>)
 8001c2e:	f7fe fe3b 	bl	80008a8 <myDebug>
		for (int i = 0; i < 15; i++) {
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3301      	adds	r3, #1
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b0e      	cmp	r3, #14
 8001c3c:	ddf1      	ble.n	8001c22 <Receive_MAIN_CMD+0x26>
		}
		myDebug("\n");
 8001c3e:	4817      	ldr	r0, [pc, #92]	; (8001c9c <Receive_MAIN_CMD+0xa0>)
 8001c40:	f7fe fe32 	bl	80008a8 <myDebug>
		delay_us(1);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7fe fe69 	bl	800091c <delay_us>
		if (MAIN_CMD[0] == 0x01 && MAIN_CMD[14] == 0xFE) {
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <Receive_MAIN_CMD+0x90>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <Receive_MAIN_CMD+0x66>
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <Receive_MAIN_CMD+0x90>)
 8001c54:	7b9b      	ldrb	r3, [r3, #14]
 8001c56:	2bfe      	cmp	r3, #254	; 0xfe
 8001c58:	d103      	bne.n	8001c62 <Receive_MAIN_CMD+0x66>
			myDebug("--> Correct command received from OBC\n");
 8001c5a:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <Receive_MAIN_CMD+0xa4>)
 8001c5c:	f7fe fe24 	bl	80008a8 <myDebug>
	} else {
		myDebug("*** Command receive failed\n");
		delay_us(1);
		Receive_MAIN_CMD();
	}
}
 8001c60:	e010      	b.n	8001c84 <Receive_MAIN_CMD+0x88>
			myDebug("*** Incorrect command received from OBC\n");
 8001c62:	4810      	ldr	r0, [pc, #64]	; (8001ca4 <Receive_MAIN_CMD+0xa8>)
 8001c64:	f7fe fe20 	bl	80008a8 <myDebug>
			delay_us(1);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f7fe fe57 	bl	800091c <delay_us>
			Receive_MAIN_CMD();
 8001c6e:	f7ff ffc5 	bl	8001bfc <Receive_MAIN_CMD>
}
 8001c72:	e007      	b.n	8001c84 <Receive_MAIN_CMD+0x88>
		myDebug("*** Command receive failed\n");
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <Receive_MAIN_CMD+0xac>)
 8001c76:	f7fe fe17 	bl	80008a8 <myDebug>
		delay_us(1);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f7fe fe4e 	bl	800091c <delay_us>
		Receive_MAIN_CMD();
 8001c80:	f7ff ffbc 	bl	8001bfc <Receive_MAIN_CMD>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200005f4 	.word	0x200005f4
 8001c90:	200001e4 	.word	0x200001e4
 8001c94:	0800dc08 	.word	0x0800dc08
 8001c98:	0800dc2c 	.word	0x0800dc2c
 8001c9c:	0800db40 	.word	0x0800db40
 8001ca0:	0800dc30 	.word	0x0800dc30
 8001ca4:	0800dc58 	.word	0x0800dc58
 8001ca8:	0800dc84 	.word	0x0800dc84

08001cac <Execute_MAIN_CMD>:

void Execute_MAIN_CMD() {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	myDebug("### Fetching received CMD from OBC.....\n");
 8001cb0:	4815      	ldr	r0, [pc, #84]	; (8001d08 <Execute_MAIN_CMD+0x5c>)
 8001cb2:	f7fe fdf9 	bl	80008a8 <myDebug>
	MCU_ID = MAIN_CMD[0];
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <Execute_MAIN_CMD+0x60>)
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <Execute_MAIN_CMD+0x64>)
 8001cbc:	701a      	strb	r2, [r3, #0]
	MSN_CMD = MAIN_CMD[0] << 24 | MAIN_CMD[1] << 16 | MAIN_CMD[2] << 8
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <Execute_MAIN_CMD+0x60>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	061a      	lsls	r2, r3, #24
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <Execute_MAIN_CMD+0x60>)
 8001cc6:	785b      	ldrb	r3, [r3, #1]
 8001cc8:	041b      	lsls	r3, r3, #16
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <Execute_MAIN_CMD+0x60>)
 8001cce:	789b      	ldrb	r3, [r3, #2]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	4313      	orrs	r3, r2
			| MAIN_CMD[3];
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <Execute_MAIN_CMD+0x60>)
 8001cd6:	78d2      	ldrb	r2, [r2, #3]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	461a      	mov	r2, r3
	MSN_CMD = MAIN_CMD[0] << 24 | MAIN_CMD[1] << 16 | MAIN_CMD[2] << 8
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <Execute_MAIN_CMD+0x68>)
 8001cde:	601a      	str	r2, [r3, #0]
	MAIN_ADDR = MAIN_CMD[4] << 24 | MAIN_CMD[5] << 16 | MAIN_CMD[6] << 8
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <Execute_MAIN_CMD+0x60>)
 8001ce2:	791b      	ldrb	r3, [r3, #4]
 8001ce4:	061a      	lsls	r2, r3, #24
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <Execute_MAIN_CMD+0x60>)
 8001ce8:	795b      	ldrb	r3, [r3, #5]
 8001cea:	041b      	lsls	r3, r3, #16
 8001cec:	431a      	orrs	r2, r3
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <Execute_MAIN_CMD+0x60>)
 8001cf0:	799b      	ldrb	r3, [r3, #6]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	4313      	orrs	r3, r2
			| MAIN_CMD[7];
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <Execute_MAIN_CMD+0x60>)
 8001cf8:	79d2      	ldrb	r2, [r2, #7]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	461a      	mov	r2, r3
	MAIN_ADDR = MAIN_CMD[4] << 24 | MAIN_CMD[5] << 16 | MAIN_CMD[6] << 8
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <Execute_MAIN_CMD+0x6c>)
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	0800dca0 	.word	0x0800dca0
 8001d0c:	200005f4 	.word	0x200005f4
 8001d10:	20000603 	.word	0x20000603
 8001d14:	20000604 	.word	0x20000604
 8001d18:	20000608 	.word	0x20000608

08001d1c <setTime>:

RTC_TimeTypeDef gTime;
RTC_DateTypeDef gDate;

void setTime(uint8_t year, uint8_t month, uint8_t weekDay, uint8_t hour,
		uint8_t min, uint8_t sec) {
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4604      	mov	r4, r0
 8001d24:	4608      	mov	r0, r1
 8001d26:	4611      	mov	r1, r2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	71fb      	strb	r3, [r7, #7]
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71bb      	strb	r3, [r7, #6]
 8001d32:	460b      	mov	r3, r1
 8001d34:	717b      	strb	r3, [r7, #5]
 8001d36:	4613      	mov	r3, r2
 8001d38:	713b      	strb	r3, [r7, #4]

	sTime.Hours = hour;
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <setTime+0x80>)
 8001d3c:	793b      	ldrb	r3, [r7, #4]
 8001d3e:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001d40:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <setTime+0x80>)
 8001d42:	7e3b      	ldrb	r3, [r7, #24]
 8001d44:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <setTime+0x80>)
 8001d48:	7f3b      	ldrb	r3, [r7, #28]
 8001d4a:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <setTime+0x80>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <setTime+0x80>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4910      	ldr	r1, [pc, #64]	; (8001d9c <setTime+0x80>)
 8001d5c:	4810      	ldr	r0, [pc, #64]	; (8001da0 <setTime+0x84>)
 8001d5e:	f003 fa67 	bl	8005230 <HAL_RTC_SetTime>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <setTime+0x50>
		Error_Handler();
 8001d68:	f7ff fe92 	bl	8001a90 <Error_Handler>

	sDate.Month = month;
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <setTime+0x88>)
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	7053      	strb	r3, [r2, #1]
	sDate.Year = year;
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <setTime+0x88>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	70d3      	strb	r3, [r2, #3]
	sDate.WeekDay = weekDay;
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <setTime+0x88>)
 8001d7a:	797b      	ldrb	r3, [r7, #5]
 8001d7c:	7013      	strb	r3, [r2, #0]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4908      	ldr	r1, [pc, #32]	; (8001da4 <setTime+0x88>)
 8001d82:	4807      	ldr	r0, [pc, #28]	; (8001da0 <setTime+0x84>)
 8001d84:	f003 fb52 	bl	800542c <HAL_RTC_SetDate>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <setTime+0x76>
		Error_Handler();
 8001d8e:	f7ff fe7f 	bl	8001a90 <Error_Handler>

	//HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);

}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd90      	pop	{r4, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000060c 	.word	0x2000060c
 8001da0:	2000048c 	.word	0x2000048c
 8001da4:	20000620 	.word	0x20000620

08001da8 <getTime>:

void getTime() {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001dac:	2200      	movs	r2, #0
 8001dae:	4905      	ldr	r1, [pc, #20]	; (8001dc4 <getTime+0x1c>)
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <getTime+0x20>)
 8001db2:	f003 fad9 	bl	8005368 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001db6:	2200      	movs	r2, #0
 8001db8:	4904      	ldr	r1, [pc, #16]	; (8001dcc <getTime+0x24>)
 8001dba:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <getTime+0x20>)
 8001dbc:	f003 fbbc 	bl	8005538 <HAL_RTC_GetDate>

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000624 	.word	0x20000624
 8001dc8:	2000048c 	.word	0x2000048c
 8001dcc:	20000638 	.word	0x20000638

08001dd0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <LL_AHB2_GRP1_EnableClock>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e14:	68fb      	ldr	r3, [r7, #12]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e44:	68fb      	ldr	r3, [r7, #12]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e74:	68fb      	ldr	r3, [r7, #12]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ecc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <HAL_ADC_MspInit+0x24>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d103      	bne.n	8001f06 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001efe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f02:	f7ff ffbd 	bl	8001e80 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40012400 	.word	0x40012400

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b096      	sub	sp, #88	; 0x58
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	2238      	movs	r2, #56	; 0x38
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00a ff31 	bl	800cd9c <memset>
  if(huart->Instance==LPUART1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a99      	ldr	r2, [pc, #612]	; (80021a4 <HAL_UART_MspInit+0x290>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	f040 8092 	bne.w	800206a <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f46:	2320      	movs	r3, #32
 8001f48:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 ffd0 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f5e:	f7ff fd97 	bl	8001a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f62:	2001      	movs	r0, #1
 8001f64:	f7ff ff74 	bl	8001e50 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f68:	2004      	movs	r0, #4
 8001f6a:	f7ff ff41 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f86:	4619      	mov	r1, r3
 8001f88:	4887      	ldr	r0, [pc, #540]	; (80021a8 <HAL_UART_MspInit+0x294>)
 8001f8a:	f001 fc29 	bl	80037e0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8001f8e:	4b87      	ldr	r3, [pc, #540]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001f90:	4a87      	ldr	r2, [pc, #540]	; (80021b0 <HAL_UART_MspInit+0x29c>)
 8001f92:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001f94:	4b85      	ldr	r3, [pc, #532]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001f96:	2215      	movs	r2, #21
 8001f98:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9a:	4b84      	ldr	r3, [pc, #528]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa0:	4b82      	ldr	r3, [pc, #520]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	4b81      	ldr	r3, [pc, #516]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fac:	4b7f      	ldr	r3, [pc, #508]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fb2:	4b7e      	ldr	r3, [pc, #504]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001fb8:	4b7c      	ldr	r3, [pc, #496]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fbe:	4b7b      	ldr	r3, [pc, #492]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001fc4:	4879      	ldr	r0, [pc, #484]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001fc6:	f001 f889 	bl	80030dc <HAL_DMA_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001fd0:	f7ff fd5e 	bl	8001a90 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001fd4:	2110      	movs	r1, #16
 8001fd6:	4875      	ldr	r0, [pc, #468]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001fd8:	f001 fb2a 	bl	8003630 <HAL_DMA_ConfigChannelAttributes>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001fe2:	f7ff fd55 	bl	8001a90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a70      	ldr	r2, [pc, #448]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001fee:	4a6f      	ldr	r2, [pc, #444]	; (80021ac <HAL_UART_MspInit+0x298>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8001ff4:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 8001ff6:	4a70      	ldr	r2, [pc, #448]	; (80021b8 <HAL_UART_MspInit+0x2a4>)
 8001ff8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001ffa:	4b6e      	ldr	r3, [pc, #440]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 8001ffc:	2216      	movs	r2, #22
 8001ffe:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002000:	4b6c      	ldr	r3, [pc, #432]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 8002002:	2210      	movs	r2, #16
 8002004:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002006:	4b6b      	ldr	r3, [pc, #428]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800200c:	4b69      	ldr	r3, [pc, #420]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002012:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002018:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800201e:	4b65      	ldr	r3, [pc, #404]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 8002020:	2200      	movs	r2, #0
 8002022:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002024:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800202a:	4862      	ldr	r0, [pc, #392]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 800202c:	f001 f856 	bl	80030dc <HAL_DMA_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8002036:	f7ff fd2b 	bl	8001a90 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800203a:	2110      	movs	r1, #16
 800203c:	485d      	ldr	r0, [pc, #372]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 800203e:	f001 faf7 	bl	8003630 <HAL_DMA_ConfigChannelAttributes>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002048:	f7ff fd22 	bl	8001a90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a59      	ldr	r2, [pc, #356]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 8002050:	67da      	str	r2, [r3, #124]	; 0x7c
 8002052:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <HAL_UART_MspInit+0x2a0>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	2026      	movs	r0, #38	; 0x26
 800205e:	f001 f808 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002062:	2026      	movs	r0, #38	; 0x26
 8002064:	f001 f81f 	bl	80030a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002068:	e0de      	b.n	8002228 <HAL_UART_MspInit+0x314>
  else if(huart->Instance==USART1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a53      	ldr	r2, [pc, #332]	; (80021bc <HAL_UART_MspInit+0x2a8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	f040 80ad 	bne.w	80021d0 <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002076:	2301      	movs	r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800207a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800207e:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	4618      	mov	r0, r3
 8002086:	f002 ff37 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8002090:	f7ff fcfe 	bl	8001a90 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002094:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002098:	f7ff fef2 	bl	8001e80 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	2001      	movs	r0, #1
 800209e:	f7ff fea7 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80020a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020b4:	2307      	movs	r3, #7
 80020b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020bc:	4619      	mov	r1, r3
 80020be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c2:	f001 fb8d 	bl	80037e0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 80020c8:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <HAL_UART_MspInit+0x2b0>)
 80020ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80020cc:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 80020ce:	2211      	movs	r2, #17
 80020d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020d2:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e4:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ea:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020f0:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020fc:	4830      	ldr	r0, [pc, #192]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 80020fe:	f000 ffed 	bl	80030dc <HAL_DMA_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8002108:	f7ff fcc2 	bl	8001a90 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800210c:	2110      	movs	r1, #16
 800210e:	482c      	ldr	r0, [pc, #176]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 8002110:	f001 fa8e 	bl	8003630 <HAL_DMA_ConfigChannelAttributes>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_UART_MspInit+0x20a>
      Error_Handler();
 800211a:	f7ff fcb9 	bl	8001a90 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 8002122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002126:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <HAL_UART_MspInit+0x2ac>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 800212e:	4a27      	ldr	r2, [pc, #156]	; (80021cc <HAL_UART_MspInit+0x2b8>)
 8002130:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 8002134:	2212      	movs	r2, #18
 8002136:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002138:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 800213a:	2210      	movs	r2, #16
 800213c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 8002140:	2200      	movs	r2, #0
 8002142:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 8002146:	2280      	movs	r2, #128	; 0x80
 8002148:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 800214c:	2200      	movs	r2, #0
 800214e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 8002158:	2200      	movs	r2, #0
 800215a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002162:	4819      	ldr	r0, [pc, #100]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 8002164:	f000 ffba 	bl	80030dc <HAL_DMA_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800216e:	f7ff fc8f 	bl	8001a90 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002172:	2110      	movs	r1, #16
 8002174:	4814      	ldr	r0, [pc, #80]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 8002176:	f001 fa5b 	bl	8003630 <HAL_DMA_ConfigChannelAttributes>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8002180:	f7ff fc86 	bl	8001a90 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 8002188:	67da      	str	r2, [r3, #124]	; 0x7c
 800218a:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <HAL_UART_MspInit+0x2b4>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	2024      	movs	r0, #36	; 0x24
 8002196:	f000 ff6c 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800219a:	2024      	movs	r0, #36	; 0x24
 800219c:	f000 ff83 	bl	80030a6 <HAL_NVIC_EnableIRQ>
}
 80021a0:	e042      	b.n	8002228 <HAL_UART_MspInit+0x314>
 80021a2:	bf00      	nop
 80021a4:	40008000 	.word	0x40008000
 80021a8:	48000800 	.word	0x48000800
 80021ac:	2000030c 	.word	0x2000030c
 80021b0:	40020030 	.word	0x40020030
 80021b4:	2000036c 	.word	0x2000036c
 80021b8:	40020044 	.word	0x40020044
 80021bc:	40013800 	.word	0x40013800
 80021c0:	200003cc 	.word	0x200003cc
 80021c4:	40020008 	.word	0x40020008
 80021c8:	2000042c 	.word	0x2000042c
 80021cc:	4002001c 	.word	0x4002001c
  else if(huart->Instance==USART2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a16      	ldr	r2, [pc, #88]	; (8002230 <HAL_UART_MspInit+0x31c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d126      	bne.n	8002228 <HAL_UART_MspInit+0x314>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021da:	2302      	movs	r3, #2
 80021dc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021de:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80021e2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	4618      	mov	r0, r3
 80021ea:	f002 fe85 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_UART_MspInit+0x2e4>
      Error_Handler();
 80021f4:	f7ff fc4c 	bl	8001a90 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021fc:	f7ff fe10 	bl	8001e20 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff fdf5 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8002206:	230c      	movs	r3, #12
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	2300      	movs	r3, #0
 8002214:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002216:	2307      	movs	r3, #7
 8002218:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800221e:	4619      	mov	r1, r3
 8002220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002224:	f001 fadc 	bl	80037e0 <HAL_GPIO_Init>
}
 8002228:	bf00      	nop
 800222a:	3758      	adds	r7, #88	; 0x58
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40004400 	.word	0x40004400

08002234 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b090      	sub	sp, #64	; 0x40
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	2238      	movs	r2, #56	; 0x38
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f00a fda9 	bl	800cd9c <memset>
  if(hrtc->Instance==RTC)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <HAL_RTC_MspInit+0x54>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d115      	bne.n	8002280 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002258:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800225a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	4618      	mov	r0, r3
 8002266:	f002 fe47 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002270:	f7ff fc0e 	bl	8001a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002274:	f7ff fdac 	bl	8001dd0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002278:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800227c:	f7ff fdd0 	bl	8001e20 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002280:	bf00      	nop
 8002282:	3740      	adds	r7, #64	; 0x40
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40002800 	.word	0x40002800

0800228c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b096      	sub	sp, #88	; 0x58
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	2238      	movs	r2, #56	; 0x38
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00a fd75 	bl	800cd9c <memset>
  if(hspi->Instance==SPI2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_SPI_MspInit+0x88>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d126      	bne.n	800230a <HAL_SPI_MspInit+0x7e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80022bc:	2310      	movs	r3, #16
 80022be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80022c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fe14 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80022d6:	f7ff fbdb 	bl	8001a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022de:	f7ff fd9f 	bl	8001e20 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	2002      	movs	r0, #2
 80022e4:	f7ff fd84 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 80022e8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022fa:	2305      	movs	r3, #5
 80022fc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002302:	4619      	mov	r1, r3
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <HAL_SPI_MspInit+0x8c>)
 8002306:	f001 fa6b 	bl	80037e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3758      	adds	r7, #88	; 0x58
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40003800 	.word	0x40003800
 8002318:	48000400 	.word	0x48000400

0800231c <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002324:	2001      	movs	r0, #1
 8002326:	f7ff fdc3 	bl	8001eb0 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	2032      	movs	r0, #50	; 0x32
 8002330:	f000 fe9f 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002334:	2032      	movs	r0, #50	; 0x32
 8002336:	f000 feb6 	bl	80030a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a05      	ldr	r2, [pc, #20]	; (8002368 <HAL_TIM_Base_MspInit+0x24>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d103      	bne.n	800235e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002356:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800235a:	f7ff fd91 	bl	8001e80 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40012c00 	.word	0x40012c00

0800236c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <NMI_Handler+0x4>

08002372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <HardFault_Handler+0x4>

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <MemManage_Handler+0x4>

0800237e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <BusFault_Handler+0x4>

08002384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <UsageFault_Handler+0x4>

0800238a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b2:	f000 f9a7 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <DMA1_Channel1_IRQHandler+0x10>)
 80023c2:	f001 f86f 	bl	80034a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200003cc 	.word	0x200003cc

080023d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <DMA1_Channel2_IRQHandler+0x10>)
 80023d6:	f001 f865 	bl	80034a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000042c 	.word	0x2000042c

080023e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <DMA1_Channel3_IRQHandler+0x10>)
 80023ea:	f001 f85b 	bl	80034a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000030c 	.word	0x2000030c

080023f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <DMA1_Channel4_IRQHandler+0x10>)
 80023fe:	f001 f851 	bl	80034a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000036c 	.word	0x2000036c

0800240c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <USART1_IRQHandler+0x10>)
 8002412:	f005 fc1f 	bl	8007c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200001e4 	.word	0x200001e4

08002420 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <LPUART1_IRQHandler+0x10>)
 8002426:	f005 fc15 	bl	8007c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000150 	.word	0x20000150

08002434 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <SUBGHZ_Radio_IRQHandler+0x10>)
 800243a:	f004 fda7 	bl	8006f8c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000528 	.word	0x20000528

08002448 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_GetTick+0x24>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002466:	f000 f892 	bl	800258e <TIMER_IF_GetTimerValue>
 800246a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000063c 	.word	0x2000063c

0800247c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f8af 	bl	80025ea <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <_sbrk+0x5c>)
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <_sbrk+0x60>)
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <_sbrk+0x64>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <_sbrk+0x68>)
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <_sbrk+0x64>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c4:	f00a fc72 	bl	800cdac <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	220c      	movs	r2, #12
 80024cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d2:	e009      	b.n	80024e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <_sbrk+0x64>)
 80024e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20010000 	.word	0x20010000
 80024f4:	00000400 	.word	0x00000400
 80024f8:	20000640 	.word	0x20000640
 80024fc:	20000958 	.word	0x20000958

08002500 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8002516:	79fb      	ldrb	r3, [r7, #7]
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8002544:	79fb      	ldrb	r3, [r7, #7]
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <TIMER_IF_SetTimerContext+0x10>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	20000644 	.word	0x20000644

08002564 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002568:	4b02      	ldr	r3, [pc, #8]	; (8002574 <TIMER_IF_GetTimerContext+0x10>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	20000644 	.word	0x20000644

08002578 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002582:	687b      	ldr	r3, [r7, #4]
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002598:	687b      	ldr	r3, [r7, #4]
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 80025ae:	687b      	ldr	r3, [r7, #4]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025fc:	480d      	ldr	r0, [pc, #52]	; (8002634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002600:	f7ff ff7e 	bl	8002500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002604:	480c      	ldr	r0, [pc, #48]	; (8002638 <LoopForever+0x6>)
  ldr r1, =_edata
 8002606:	490d      	ldr	r1, [pc, #52]	; (800263c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <LoopForever+0xe>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800261c:	4c0a      	ldr	r4, [pc, #40]	; (8002648 <LoopForever+0x16>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800262a:	f00a fbc5 	bl	800cdb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800262e:	f7fe fd81 	bl	8001134 <main>

08002632 <LoopForever>:

LoopForever:
    b LoopForever
 8002632:	e7fe      	b.n	8002632 <LoopForever>
  ldr   r0, =_estack
 8002634:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002640:	0800df84 	.word	0x0800df84
  ldr r2, =_sbss
 8002644:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002648:	20000954 	.word	0x20000954

0800264c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265a:	2003      	movs	r0, #3
 800265c:	f000 fcfe 	bl	800305c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002660:	f002 fa6c 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8002664:	4603      	mov	r3, r0
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_Init+0x3c>)
 8002668:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266a:	2000      	movs	r0, #0
 800266c:	f000 f810 	bl	8002690 <HAL_InitTick>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	71fb      	strb	r3, [r7, #7]
 800267a:	e001      	b.n	8002680 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800267c:	f7ff fc30 	bl	8001ee0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002680:	79fb      	ldrb	r3, [r7, #7]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	2000000c 	.word	0x2000000c

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <HAL_InitTick+0x6c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d024      	beq.n	80026ee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026a4:	f002 fa4a 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_InitTick+0x6c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	4619      	mov	r1, r3
 80026b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fd00 	bl	80030c2 <HAL_SYSTICK_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10f      	bne.n	80026e8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	d809      	bhi.n	80026e2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ce:	2200      	movs	r2, #0
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026d6:	f000 fccc 	bl	8003072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_InitTick+0x70>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e007      	b.n	80026f2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
 80026e6:	e004      	b.n	80026f2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
 80026ec:	e001      	b.n	80026f2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000014 	.word	0x20000014
 8002700:	20000010 	.word	0x20000010

08002704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_IncTick+0x1c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_IncTick+0x20>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a03      	ldr	r2, [pc, #12]	; (8002724 <HAL_IncTick+0x20>)
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	20000014 	.word	0x20000014
 8002724:	20000648 	.word	0x20000648

08002728 <LL_ADC_SetCommonPathInternalCh>:
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <LL_ADC_GetCommonPathInternalCh>:
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2107      	movs	r1, #7
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	401a      	ands	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	431a      	orrs	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	615a      	str	r2, [r3, #20]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2107      	movs	r1, #7
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <LL_ADC_REG_SetSequencerRanks>:
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	210f      	movs	r1, #15
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	401a      	ands	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 010f 	and.w	r1, r3, #15
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	431a      	orrs	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <LL_ADC_REG_SetSequencerChAdd>:
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <LL_ADC_REG_SetSequencerChRem>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <LL_ADC_SetChannelSamplingTime>:
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	43db      	mvns	r3, r3
 8002874:	401a      	ands	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	0219      	lsls	r1, r3, #8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	400b      	ands	r3, r1
 800287e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002882:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002886:	431a      	orrs	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	615a      	str	r2, [r3, #20]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <LL_ADC_EnableInternalRegulator>:
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80028a6:	f023 0317 	bic.w	r3, r3, #23
 80028aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_IsInternalRegulatorEnabled>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028d0:	d101      	bne.n	80028d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <LL_ADC_IsEnabled>:
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <LL_ADC_IsEnabled+0x18>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <LL_ADC_IsEnabled+0x1a>
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <LL_ADC_REG_IsConversionOngoing>:
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d101      	bne.n	800291e <LL_ADC_REG_IsConversionOngoing+0x18>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e17e      	b.n	8002c4c <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff fac5 	bl	8001eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffa1 	bl	80028bc <LL_ADC_IsInternalRegulatorEnabled>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d115      	bne.n	80029ac <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff86 	bl	8002896 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800298a:	4b9e      	ldr	r3, [pc, #632]	; (8002c04 <HAL_ADC_Init+0x2d8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	4a9d      	ldr	r2, [pc, #628]	; (8002c08 <HAL_ADC_Init+0x2dc>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	099b      	lsrs	r3, r3, #6
 8002998:	3301      	adds	r3, #1
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800299e:	e002      	b.n	80029a6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f9      	bne.n	80029a0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff83 	bl	80028bc <LL_ADC_IsInternalRegulatorEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10d      	bne.n	80029d8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f043 0210 	orr.w	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff92 	bl	8002906 <LL_ADC_REG_IsConversionOngoing>
 80029e2:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 8124 	bne.w	8002c3a <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 8120 	bne.w	8002c3a <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a02:	f043 0202 	orr.w	r2, r3, #2
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff67 	bl	80028e2 <LL_ADC_IsEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 80a7 	bne.w	8002b6a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7e1b      	ldrb	r3, [r3, #24]
 8002a24:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a26:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7e5b      	ldrb	r3, [r3, #25]
 8002a2c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a2e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7e9b      	ldrb	r3, [r3, #26]
 8002a34:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a36:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a3c:	2a00      	cmp	r2, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_ADC_Init+0x11a>
 8002a40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a44:	e000      	b.n	8002a48 <HAL_ADC_Init+0x11c>
 8002a46:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a48:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a4e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	da04      	bge.n	8002a62 <HAL_ADC_Init+0x136>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a60:	e001      	b.n	8002a66 <HAL_ADC_Init+0x13a>
 8002a62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002a66:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a6e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a70:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d114      	bne.n	8002aac <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7e9b      	ldrb	r3, [r3, #26]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e00b      	b.n	8002aac <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002ad2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	69b9      	ldr	r1, [r7, #24]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002aec:	4313      	orrs	r3, r2
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d111      	bne.n	8002b22 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b0a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002b10:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002b16:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <HAL_ADC_Init+0x2e0>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	6979      	ldr	r1, [r7, #20]
 8002b32:	430b      	orrs	r3, r1
 8002b34:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002b3e:	d014      	beq.n	8002b6a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d00f      	beq.n	8002b6a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b52:	d00a      	beq.n	8002b6a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002b54:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_ADC_Init+0x2e4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b64:	492a      	ldr	r1, [pc, #168]	; (8002c10 <HAL_ADC_Init+0x2e4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	461a      	mov	r2, r3
 8002b74:	2100      	movs	r1, #0
 8002b76:	f7ff fdf6 	bl	8002766 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	461a      	mov	r2, r3
 8002b84:	4923      	ldr	r1, [pc, #140]	; (8002c14 <HAL_ADC_Init+0x2e8>)
 8002b86:	f7ff fdee 	bl	8002766 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f062 020f 	orn	r2, r2, #15
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba2:	e017      	b.n	8002bd4 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bac:	d112      	bne.n	8002bd4 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	f003 031c 	and.w	r3, r3, #28
 8002bc0:	f06f 020f 	mvn.w	r2, #15
 8002bc4:	fa02 f103 	lsl.w	r1, r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fde1 	bl	80027a2 <LL_ADC_GetSamplingTimeCommonChannels>
 8002be0:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d116      	bne.n	8002c18 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f023 0303 	bic.w	r3, r3, #3
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c00:	e023      	b.n	8002c4a <HAL_ADC_Init+0x31e>
 8002c02:	bf00      	nop
 8002c04:	2000000c 	.word	0x2000000c
 8002c08:	053e2d63 	.word	0x053e2d63
 8002c0c:	1ffffc02 	.word	0x1ffffc02
 8002c10:	40012708 	.word	0x40012708
 8002c14:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f023 0312 	bic.w	r3, r3, #18
 8002c20:	f043 0210 	orr.w	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c38:	e007      	b.n	8002c4a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	f043 0210 	orr.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002c4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x28>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e110      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x24a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fe3c 	bl	8002906 <LL_ADC_REG_IsConversionOngoing>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f040 80f7 	bne.w	8002e84 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	f000 80b1 	beq.w	8002e02 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ca8:	d004      	beq.n	8002cb4 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cae:	4a7e      	ldr	r2, [pc, #504]	; (8002ea8 <HAL_ADC_ConfigChannel+0x254>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d108      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	f7ff fda8 	bl	8002814 <LL_ADC_REG_SetSequencerChAdd>
 8002cc4:	e041      	b.n	8002d4a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0xa0>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	e011      	b.n	8002d18 <HAL_ADC_ConfigChannel+0xc4>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	6839      	ldr	r1, [r7, #0]
 8002d1a:	6849      	ldr	r1, [r1, #4]
 8002d1c:	f001 011f 	and.w	r1, r1, #31
 8002d20:	408b      	lsls	r3, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d808      	bhi.n	8002d4a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f7ff fd44 	bl	80027d2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7ff fd81 	bl	800285e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f280 8097 	bge.w	8002e94 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d66:	4851      	ldr	r0, [pc, #324]	; (8002eac <HAL_ADC_ConfigChannel+0x258>)
 8002d68:	f7ff fcf0 	bl	800274c <LL_ADC_GetCommonPathInternalCh>
 8002d6c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a4f      	ldr	r2, [pc, #316]	; (8002eb0 <HAL_ADC_ConfigChannel+0x25c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d120      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11b      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4848      	ldr	r0, [pc, #288]	; (8002eac <HAL_ADC_ConfigChannel+0x258>)
 8002d8c:	f7ff fccc 	bl	8002728 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d90:	4b48      	ldr	r3, [pc, #288]	; (8002eb4 <HAL_ADC_ConfigChannel+0x260>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <HAL_ADC_ConfigChannel+0x264>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002daa:	e002      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f9      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002db8:	e06c      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3f      	ldr	r2, [pc, #252]	; (8002ebc <HAL_ADC_ConfigChannel+0x268>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10c      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4835      	ldr	r0, [pc, #212]	; (8002eac <HAL_ADC_ConfigChannel+0x258>)
 8002dd8:	f7ff fca6 	bl	8002728 <LL_ADC_SetCommonPathInternalCh>
 8002ddc:	e05a      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a37      	ldr	r2, [pc, #220]	; (8002ec0 <HAL_ADC_ConfigChannel+0x26c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d155      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d150      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002df8:	4619      	mov	r1, r3
 8002dfa:	482c      	ldr	r0, [pc, #176]	; (8002eac <HAL_ADC_ConfigChannel+0x258>)
 8002dfc:	f7ff fc94 	bl	8002728 <LL_ADC_SetCommonPathInternalCh>
 8002e00:	e048      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e0a:	d004      	beq.n	8002e16 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e10:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <HAL_ADC_ConfigChannel+0x254>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d107      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4610      	mov	r0, r2
 8002e22:	f7ff fd09 	bl	8002838 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	da32      	bge.n	8002e94 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e2e:	481f      	ldr	r0, [pc, #124]	; (8002eac <HAL_ADC_ConfigChannel+0x258>)
 8002e30:	f7ff fc8c 	bl	800274c <LL_ADC_GetCommonPathInternalCh>
 8002e34:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d107      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e46:	4619      	mov	r1, r3
 8002e48:	4818      	ldr	r0, [pc, #96]	; (8002eac <HAL_ADC_ConfigChannel+0x258>)
 8002e4a:	f7ff fc6d 	bl	8002728 <LL_ADC_SetCommonPathInternalCh>
 8002e4e:	e021      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <HAL_ADC_ConfigChannel+0x268>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d107      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e60:	4619      	mov	r1, r3
 8002e62:	4812      	ldr	r0, [pc, #72]	; (8002eac <HAL_ADC_ConfigChannel+0x258>)
 8002e64:	f7ff fc60 	bl	8002728 <LL_ADC_SetCommonPathInternalCh>
 8002e68:	e014      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <HAL_ADC_ConfigChannel+0x26c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10f      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	480b      	ldr	r0, [pc, #44]	; (8002eac <HAL_ADC_ConfigChannel+0x258>)
 8002e7e:	f7ff fc53 	bl	8002728 <LL_ADC_SetCommonPathInternalCh>
 8002e82:	e007      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	80000004 	.word	0x80000004
 8002eac:	40012708 	.word	0x40012708
 8002eb0:	b0001000 	.word	0xb0001000
 8002eb4:	2000000c 	.word	0x2000000c
 8002eb8:	053e2d63 	.word	0x053e2d63
 8002ebc:	b8004000 	.word	0xb8004000
 8002ec0:	b4002000 	.word	0xb4002000

08002ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db0b      	blt.n	8002f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4906      	ldr	r1, [pc, #24]	; (8002f5c <__NVIC_EnableIRQ+0x34>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2001      	movs	r0, #1
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	; (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	; (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
         );
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003028:	d301      	bcc.n	800302e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302a:	2301      	movs	r3, #1
 800302c:	e00f      	b.n	800304e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <SysTick_Config+0x40>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3b01      	subs	r3, #1
 8003034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003036:	210f      	movs	r1, #15
 8003038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800303c:	f7ff ff90 	bl	8002f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <SysTick_Config+0x40>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <SysTick_Config+0x40>)
 8003048:	2207      	movs	r2, #7
 800304a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	e000e010 	.word	0xe000e010

0800305c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff2d 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003080:	f7ff ff44 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 8003084:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	6978      	ldr	r0, [r7, #20]
 800308c:	f7ff ff92 	bl	8002fb4 <NVIC_EncodePriority>
 8003090:	4602      	mov	r2, r0
 8003092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff61 	bl	8002f60 <__NVIC_SetPriority>
}
 800309e:	bf00      	nop
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff37 	bl	8002f28 <__NVIC_EnableIRQ>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ffa4 	bl	8003018 <SysTick_Config>
 80030d0:	4603      	mov	r3, r0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e08e      	b.n	800320c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_DMA_Init+0x138>)
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d80f      	bhi.n	800311a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	4b45      	ldr	r3, [pc, #276]	; (8003218 <HAL_DMA_Init+0x13c>)
 8003102:	4413      	add	r3, r2
 8003104:	4a45      	ldr	r2, [pc, #276]	; (800321c <HAL_DMA_Init+0x140>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	009a      	lsls	r2, r3, #2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a42      	ldr	r2, [pc, #264]	; (8003220 <HAL_DMA_Init+0x144>)
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
 8003118:	e00e      	b.n	8003138 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	4b40      	ldr	r3, [pc, #256]	; (8003224 <HAL_DMA_Init+0x148>)
 8003122:	4413      	add	r3, r2
 8003124:	4a3d      	ldr	r2, [pc, #244]	; (800321c <HAL_DMA_Init+0x140>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	009a      	lsls	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <HAL_DMA_Init+0x14c>)
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003152:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6819      	ldr	r1, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fabc 	bl	8003708 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003198:	d102      	bne.n	80031a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <HAL_DMA_Init+0x106>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d80c      	bhi.n	80031e2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fae5 	bl	8003798 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	e008      	b.n	80031f4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40020407 	.word	0x40020407
 8003218:	bffdfff8 	.word	0xbffdfff8
 800321c:	cccccccd 	.word	0xcccccccd
 8003220:	40020000 	.word	0x40020000
 8003224:	bffdfbf8 	.word	0xbffdfbf8
 8003228:	40020400 	.word	0x40020400

0800322c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_DMA_Start_IT+0x20>
 8003248:	2302      	movs	r3, #2
 800324a:	e069      	b.n	8003320 <HAL_DMA_Start_IT+0xf4>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d155      	bne.n	800330c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fa02 	bl	800368e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 020e 	orr.w	r2, r2, #14
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e00f      	b.n	80032c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0204 	bic.w	r2, r2, #4
 80032b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 020a 	orr.w	r2, r2, #10
 80032c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e008      	b.n	800331e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e04f      	b.n	80033da <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d008      	beq.n	8003358 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2204      	movs	r2, #4
 800334a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e040      	b.n	80033da <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 020e 	bic.w	r2, r2, #14
 8003366:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003376:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	f003 021c 	and.w	r2, r3, #28
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	2101      	movs	r1, #1
 8003396:	fa01 f202 	lsl.w	r2, r1, r2
 800339a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d005      	beq.n	8003408 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2204      	movs	r2, #4
 8003400:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
 8003406:	e047      	b.n	8003498 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 020e 	bic.w	r2, r2, #14
 8003416:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003436:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	f003 021c 	and.w	r2, r3, #28
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003454:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800346c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003476:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
    }
  }
  return status;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	f003 031c 	and.w	r3, r3, #28
 80034c4:	2204      	movs	r2, #4
 80034c6:	409a      	lsls	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d027      	beq.n	8003520 <HAL_DMA_IRQHandler+0x7c>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d022      	beq.n	8003520 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d107      	bne.n	80034f8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0204 	bic.w	r2, r2, #4
 80034f6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f003 021c 	and.w	r2, r3, #28
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	2104      	movs	r1, #4
 8003506:	fa01 f202 	lsl.w	r2, r1, r2
 800350a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8081 	beq.w	8003618 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800351e:	e07b      	b.n	8003618 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f003 031c 	and.w	r3, r3, #28
 8003528:	2202      	movs	r2, #2
 800352a:	409a      	lsls	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d03d      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x10c>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d038      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 020a 	bic.w	r2, r2, #10
 800355a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <HAL_DMA_IRQHandler+0x180>)
 800356c:	429a      	cmp	r2, r3
 800356e:	d909      	bls.n	8003584 <HAL_DMA_IRQHandler+0xe0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	f003 031c 	and.w	r3, r3, #28
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <HAL_DMA_IRQHandler+0x184>)
 800357a:	2102      	movs	r1, #2
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	6053      	str	r3, [r2, #4]
 8003582:	e008      	b.n	8003596 <HAL_DMA_IRQHandler+0xf2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	f003 031c 	and.w	r3, r3, #28
 800358c:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_DMA_IRQHandler+0x188>)
 800358e:	2102      	movs	r1, #2
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d038      	beq.n	8003618 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80035ae:	e033      	b.n	8003618 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f003 031c 	and.w	r3, r3, #28
 80035b8:	2208      	movs	r2, #8
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d02a      	beq.n	800361a <HAL_DMA_IRQHandler+0x176>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d025      	beq.n	800361a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 020e 	bic.w	r2, r2, #14
 80035dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f003 021c 	and.w	r2, r3, #28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003618:	bf00      	nop
 800361a:	bf00      	nop
}
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40020080 	.word	0x40020080
 8003628:	40020400 	.word	0x40020400
 800362c:	40020000 	.word	0x40020000

08003630 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	72fb      	strb	r3, [r7, #11]
    return status;
 8003648:	7afb      	ldrb	r3, [r7, #11]
 800364a:	e01b      	b.n	8003684 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d004      	beq.n	8003672 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	e003      	b.n	800367a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003678:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

  return status;
 8003682:	7afb      	ldrb	r3, [r7, #11]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036a4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036b6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	f003 021c 	and.w	r2, r3, #28
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2101      	movs	r1, #1
 80036c6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d108      	bne.n	80036ee <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036ec:	e007      	b.n	80036fe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	60da      	str	r2, [r3, #12]
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003718:	429a      	cmp	r2, r3
 800371a:	d813      	bhi.n	8003744 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003728:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	3b08      	subs	r3, #8
 8003738:	4a14      	ldr	r2, [pc, #80]	; (800378c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e011      	b.n	8003768 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	009a      	lsls	r2, r3, #2
 800374c:	4b10      	ldr	r3, [pc, #64]	; (8003790 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800374e:	4413      	add	r3, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	3b08      	subs	r3, #8
 800375c:	4a0b      	ldr	r2, [pc, #44]	; (800378c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	3307      	adds	r3, #7
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800376c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2201      	movs	r2, #1
 8003776:	409a      	lsls	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40020407 	.word	0x40020407
 800378c:	cccccccd 	.word	0xcccccccd
 8003790:	4002081c 	.word	0x4002081c
 8003794:	40020880 	.word	0x40020880

08003798 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	461a      	mov	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2201      	movs	r2, #1
 80037c8:	409a      	lsls	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	1000823f 	.word	0x1000823f
 80037dc:	40020940 	.word	0x40020940

080037e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ee:	e140      	b.n	8003a72 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	2101      	movs	r1, #1
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	4013      	ands	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8132 	beq.w	8003a6c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d005      	beq.n	8003820 <HAL_GPIO_Init+0x40>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d130      	bne.n	8003882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003856:	2201      	movs	r2, #1
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	f003 0201 	and.w	r2, r3, #1
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b03      	cmp	r3, #3
 800388c:	d017      	beq.n	80038be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d123      	bne.n	8003912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	08da      	lsrs	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3208      	adds	r2, #8
 80038d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	220f      	movs	r2, #15
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	08da      	lsrs	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3208      	adds	r2, #8
 800390c:	6939      	ldr	r1, [r7, #16]
 800390e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	2203      	movs	r2, #3
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0203 	and.w	r2, r3, #3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 808c 	beq.w	8003a6c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003954:	4a4e      	ldr	r2, [pc, #312]	; (8003a90 <HAL_GPIO_Init+0x2b0>)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	2207      	movs	r2, #7
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800397e:	d00d      	beq.n	800399c <HAL_GPIO_Init+0x1bc>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a44      	ldr	r2, [pc, #272]	; (8003a94 <HAL_GPIO_Init+0x2b4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d007      	beq.n	8003998 <HAL_GPIO_Init+0x1b8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a43      	ldr	r2, [pc, #268]	; (8003a98 <HAL_GPIO_Init+0x2b8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_GPIO_Init+0x1b4>
 8003990:	2302      	movs	r3, #2
 8003992:	e004      	b.n	800399e <HAL_GPIO_Init+0x1be>
 8003994:	2307      	movs	r3, #7
 8003996:	e002      	b.n	800399e <HAL_GPIO_Init+0x1be>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <HAL_GPIO_Init+0x1be>
 800399c:	2300      	movs	r3, #0
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	f002 0203 	and.w	r2, r2, #3
 80039a4:	0092      	lsls	r2, r2, #2
 80039a6:	4093      	lsls	r3, r2
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039ae:	4938      	ldr	r1, [pc, #224]	; (8003a90 <HAL_GPIO_Init+0x2b0>)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	3302      	adds	r3, #2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039bc:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <HAL_GPIO_Init+0x2bc>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039e0:	4a2e      	ldr	r2, [pc, #184]	; (8003a9c <HAL_GPIO_Init+0x2bc>)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_GPIO_Init+0x2bc>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a0a:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <HAL_GPIO_Init+0x2bc>)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003a10:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_GPIO_Init+0x2bc>)
 8003a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a16:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003a36:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <HAL_GPIO_Init+0x2bc>)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003a3e:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <HAL_GPIO_Init+0x2bc>)
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a44:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003a64:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <HAL_GPIO_Init+0x2bc>)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f47f aeb7 	bne.w	80037f0 <HAL_GPIO_Init+0x10>
  }
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	48000400 	.word	0x48000400
 8003a98:	48000800 	.word	0x48000800
 8003a9c:	58000800 	.word	0x58000800

08003aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	807b      	strh	r3, [r7, #2]
 8003aac:	4613      	mov	r3, r2
 8003aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ab0:	787b      	ldrb	r3, [r7, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003abc:	e002      	b.n	8003ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a03      	ldr	r2, [pc, #12]	; (8003ae8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	58000400 	.word	0x58000400

08003aec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_PWREx_GetVoltageRange+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr
 8003b00:	58000400 	.word	0x58000400

08003b04 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b14:	d101      	bne.n	8003b1a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	58000400 	.word	0x58000400

08003b28 <LL_RCC_HSE_EnableTcxo>:
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b3a:	6013      	str	r3, [r2, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <LL_RCC_HSE_DisableTcxo>:
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b56:	6013      	str	r3, [r2, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b72:	d101      	bne.n	8003b78 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <LL_RCC_HSE_Enable>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <LL_RCC_HSE_Disable>:
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <LL_RCC_HSE_IsReady>:
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bcc:	d101      	bne.n	8003bd2 <LL_RCC_HSE_IsReady+0x18>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <LL_RCC_HSE_IsReady+0x1a>
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_HSI_Enable>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <LL_RCC_HSI_Disable>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c0a:	6013      	str	r3, [r2, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <LL_RCC_HSI_IsReady>:
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c26:	d101      	bne.n	8003c2c <LL_RCC_HSI_IsReady+0x18>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <LL_RCC_HSI_IsReady+0x1a>
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	061b      	lsls	r3, r3, #24
 8003c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <LL_RCC_LSE_IsReady>:
{
 8003c5e:	b480      	push	{r7}
 8003c60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d101      	bne.n	8003c76 <LL_RCC_LSE_IsReady+0x18>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <LL_RCC_LSE_IsReady+0x1a>
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <LL_RCC_LSI_Enable>:
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <LL_RCC_LSI_Disable>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <LL_RCC_LSI_IsReady>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d101      	bne.n	8003cd8 <LL_RCC_LSI_IsReady+0x18>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <LL_RCC_LSI_IsReady+0x1a>
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <LL_RCC_MSI_Enable>:
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6013      	str	r3, [r2, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <LL_RCC_MSI_Disable>:
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6013      	str	r3, [r2, #0]
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <LL_RCC_MSI_IsReady>:
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d101      	bne.n	8003d30 <LL_RCC_MSI_IsReady+0x16>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <LL_RCC_MSI_IsReady+0x18>
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d101      	bne.n	8003d50 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <LL_RCC_MSI_GetRange>:
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_SetSysClkSource>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f023 0203 	bic.w	r2, r3, #3
 8003dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <LL_RCC_GetSysClkSource>:
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 030c 	and.w	r3, r3, #12
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <LL_RCC_SetAHBPrescaler>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <LL_RCC_SetAHB3Prescaler>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e4c:	f023 020f 	bic.w	r2, r3, #15
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <LL_RCC_SetAPB1Prescaler>:
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <LL_RCC_SetAPB2Prescaler>:
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <LL_RCC_GetAHBPrescaler>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr

08003eca <LL_RCC_GetAHB3Prescaler>:
{
 8003eca:	b480      	push	{r7}
 8003ecc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <LL_RCC_GetAPB1Prescaler>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_GetAPB2Prescaler>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f5a:	d101      	bne.n	8003f60 <LL_RCC_PLL_IsReady+0x18>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <LL_RCC_PLL_IsReady+0x1a>
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	0a1b      	lsrs	r3, r3, #8
 8003f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003f82:	b480      	push	{r7}
 8003f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd6:	d101      	bne.n	8003fdc <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ffa:	d101      	bne.n	8004000 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401e:	d101      	bne.n	8004024 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800402e:	b480      	push	{r7}
 8004030:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004040:	d101      	bne.n	8004046 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004062:	d101      	bne.n	8004068 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
	...

08004074 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e36f      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004086:	f7ff fea6 	bl	8003dd6 <LL_RCC_GetSysClkSource>
 800408a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800408c:	f7ff ff8f 	bl	8003fae <LL_RCC_PLL_GetMainSource>
 8004090:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80c4 	beq.w	8004228 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_RCC_OscConfig+0x3e>
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	d176      	bne.n	800419a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d173      	bne.n	800419a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e353      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_OscConfig+0x68>
 80040d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040da:	e006      	b.n	80040ea <HAL_RCC_OscConfig+0x76>
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d222      	bcs.n	8004134 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fd5a 	bl	8004bac <RCC_SetFlashLatencyFromMSIRange>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e331      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800410c:	f043 0308 	orr.w	r3, r3, #8
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fe2b 	bl	8003d88 <LL_RCC_MSI_SetCalibTrimming>
 8004132:	e021      	b.n	8004178 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800413e:	f043 0308 	orr.w	r3, r3, #8
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fe12 	bl	8003d88 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fd1f 	bl	8004bac <RCC_SetFlashLatencyFromMSIRange>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e2f6      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004178:	f000 fce0 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 800417c:	4603      	mov	r3, r0
 800417e:	4aa7      	ldr	r2, [pc, #668]	; (800441c <HAL_RCC_OscConfig+0x3a8>)
 8004180:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004182:	4ba7      	ldr	r3, [pc, #668]	; (8004420 <HAL_RCC_OscConfig+0x3ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe fa82 	bl	8002690 <HAL_InitTick>
 800418c:	4603      	mov	r3, r0
 800418e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d047      	beq.n	8004226 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	e2e5      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02c      	beq.n	80041fc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041a2:	f7ff fd9e 	bl	8003ce2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041a6:	f7fe f955 	bl	8002454 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041ae:	f7fe f951 	bl	8002454 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e2d2      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80041c0:	f7ff fdab 	bl	8003d1a <LL_RCC_MSI_IsReady>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f1      	beq.n	80041ae <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d4:	f043 0308 	orr.w	r3, r3, #8
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ec:	4313      	orrs	r3, r2
 80041ee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fdc7 	bl	8003d88 <LL_RCC_MSI_SetCalibTrimming>
 80041fa:	e015      	b.n	8004228 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041fc:	f7ff fd7f 	bl	8003cfe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004200:	f7fe f928 	bl	8002454 <HAL_GetTick>
 8004204:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004208:	f7fe f924 	bl	8002454 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e2a5      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800421a:	f7ff fd7e 	bl	8003d1a <LL_RCC_MSI_IsReady>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f1      	bne.n	8004208 <HAL_RCC_OscConfig+0x194>
 8004224:	e000      	b.n	8004228 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004226:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d058      	beq.n	80042e6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b08      	cmp	r3, #8
 8004238:	d005      	beq.n	8004246 <HAL_RCC_OscConfig+0x1d2>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	2b0c      	cmp	r3, #12
 800423e:	d108      	bne.n	8004252 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d105      	bne.n	8004252 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d14b      	bne.n	80042e6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e289      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004264:	4313      	orrs	r3, r2
 8004266:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d102      	bne.n	8004278 <HAL_RCC_OscConfig+0x204>
 8004272:	f7ff fc86 	bl	8003b82 <LL_RCC_HSE_Enable>
 8004276:	e00d      	b.n	8004294 <HAL_RCC_OscConfig+0x220>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004280:	d104      	bne.n	800428c <HAL_RCC_OscConfig+0x218>
 8004282:	f7ff fc51 	bl	8003b28 <LL_RCC_HSE_EnableTcxo>
 8004286:	f7ff fc7c 	bl	8003b82 <LL_RCC_HSE_Enable>
 800428a:	e003      	b.n	8004294 <HAL_RCC_OscConfig+0x220>
 800428c:	f7ff fc87 	bl	8003b9e <LL_RCC_HSE_Disable>
 8004290:	f7ff fc58 	bl	8003b44 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d012      	beq.n	80042c2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fe f8da 	bl	8002454 <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fe f8d6 	bl	8002454 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e257      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80042b6:	f7ff fc80 	bl	8003bba <LL_RCC_HSE_IsReady>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f1      	beq.n	80042a4 <HAL_RCC_OscConfig+0x230>
 80042c0:	e011      	b.n	80042e6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c2:	f7fe f8c7 	bl	8002454 <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ca:	f7fe f8c3 	bl	8002454 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b64      	cmp	r3, #100	; 0x64
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e244      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80042dc:	f7ff fc6d 	bl	8003bba <LL_RCC_HSE_IsReady>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f1      	bne.n	80042ca <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d046      	beq.n	8004380 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_OscConfig+0x290>
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d10e      	bne.n	800431c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e22a      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fc8e 	bl	8003c36 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800431a:	e031      	b.n	8004380 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d019      	beq.n	8004358 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004324:	f7ff fc5a 	bl	8003bdc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fe f894 	bl	8002454 <HAL_GetTick>
 800432c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004330:	f7fe f890 	bl	8002454 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e211      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004342:	f7ff fc67 	bl	8003c14 <LL_RCC_HSI_IsReady>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f1      	beq.n	8004330 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fc70 	bl	8003c36 <LL_RCC_HSI_SetCalibTrimming>
 8004356:	e013      	b.n	8004380 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004358:	f7ff fc4e 	bl	8003bf8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fe f87a 	bl	8002454 <HAL_GetTick>
 8004360:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004364:	f7fe f876 	bl	8002454 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e1f7      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004376:	f7ff fc4d 	bl	8003c14 <LL_RCC_HSI_IsReady>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f1      	bne.n	8004364 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d06e      	beq.n	800446a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d056      	beq.n	8004442 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d031      	beq.n	8004410 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d006      	beq.n	80043c4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e1d0      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d013      	beq.n	80043f6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80043ce:	f7ff fc67 	bl	8003ca0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043d2:	f7fe f83f 	bl	8002454 <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043da:	f7fe f83b 	bl	8002454 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b11      	cmp	r3, #17
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e1bc      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80043ec:	f7ff fc68 	bl	8003cc0 <LL_RCC_LSI_IsReady>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f1      	bne.n	80043da <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fe:	f023 0210 	bic.w	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004410:	f7ff fc36 	bl	8003c80 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004414:	f7fe f81e 	bl	8002454 <HAL_GetTick>
 8004418:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800441a:	e00c      	b.n	8004436 <HAL_RCC_OscConfig+0x3c2>
 800441c:	2000000c 	.word	0x2000000c
 8004420:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004424:	f7fe f816 	bl	8002454 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b11      	cmp	r3, #17
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e197      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004436:	f7ff fc43 	bl	8003cc0 <LL_RCC_LSI_IsReady>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f1      	beq.n	8004424 <HAL_RCC_OscConfig+0x3b0>
 8004440:	e013      	b.n	800446a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004442:	f7ff fc2d 	bl	8003ca0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004446:	f7fe f805 	bl	8002454 <HAL_GetTick>
 800444a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800444e:	f7fe f801 	bl	8002454 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b11      	cmp	r3, #17
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e182      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004460:	f7ff fc2e 	bl	8003cc0 <LL_RCC_LSI_IsReady>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f1      	bne.n	800444e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80d8 	beq.w	8004628 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004478:	f7ff fb44 	bl	8003b04 <LL_PWR_IsEnabledBkUpAccess>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d113      	bne.n	80044aa <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004482:	f7ff fb25 	bl	8003ad0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004486:	f7fd ffe5 	bl	8002454 <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448e:	f7fd ffe1 	bl	8002454 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e162      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80044a0:	f7ff fb30 	bl	8003b04 <LL_PWR_IsEnabledBkUpAccess>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f1      	beq.n	800448e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d07b      	beq.n	80045aa <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b85      	cmp	r3, #133	; 0x85
 80044b8:	d003      	beq.n	80044c2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b05      	cmp	r3, #5
 80044c0:	d109      	bne.n	80044d6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ce:	f043 0304 	orr.w	r3, r3, #4
 80044d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d6:	f7fd ffbd 	bl	8002454 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80044f0:	e00a      	b.n	8004508 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f2:	f7fd ffaf 	bl	8002454 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004500:	4293      	cmp	r3, r2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e12e      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004508:	f7ff fba9 	bl	8003c5e <LL_RCC_LSE_IsReady>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0ef      	beq.n	80044f2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b81      	cmp	r3, #129	; 0x81
 8004518:	d003      	beq.n	8004522 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2b85      	cmp	r3, #133	; 0x85
 8004520:	d121      	bne.n	8004566 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004522:	f7fd ff97 	bl	8002454 <HAL_GetTick>
 8004526:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fd ff89 	bl	8002454 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e108      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0ec      	beq.n	800453e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004564:	e060      	b.n	8004628 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fd ff75 	bl	8002454 <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800456c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004582:	f7fd ff67 	bl	8002454 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e0e6      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ec      	bne.n	8004582 <HAL_RCC_OscConfig+0x50e>
 80045a8:	e03e      	b.n	8004628 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045aa:	f7fd ff53 	bl	8002454 <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045c4:	e00a      	b.n	80045dc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fd ff45 	bl	8002454 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e0c4      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ec      	bne.n	80045c6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ec:	f7fd ff32 	bl	8002454 <HAL_GetTick>
 80045f0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004606:	e00a      	b.n	800461e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004608:	f7fd ff24 	bl	8002454 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	; 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0a3      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800461e:	f7ff fb1e 	bl	8003c5e <LL_RCC_LSE_IsReady>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1ef      	bne.n	8004608 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8099 	beq.w	8004764 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2b0c      	cmp	r3, #12
 8004636:	d06c      	beq.n	8004712 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	2b02      	cmp	r3, #2
 800463e:	d14b      	bne.n	80046d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004640:	f7ff fc74 	bl	8003f2c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fd ff06 	bl	8002454 <HAL_GetTick>
 8004648:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fd ff02 	bl	8002454 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b0a      	cmp	r3, #10
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e083      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800465e:	f7ff fc73 	bl	8003f48 <LL_RCC_PLL_IsReady>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f1      	bne.n	800464c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	4b40      	ldr	r3, [pc, #256]	; (8004770 <HAL_RCC_OscConfig+0x6fc>)
 8004670:	4013      	ands	r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800467a:	4311      	orrs	r1, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004680:	0212      	lsls	r2, r2, #8
 8004682:	4311      	orrs	r1, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800468e:	4311      	orrs	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004694:	430a      	orrs	r2, r1
 8004696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800469a:	4313      	orrs	r3, r2
 800469c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469e:	f7ff fc37 	bl	8003f10 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fd fecf 	bl	8002454 <HAL_GetTick>
 80046b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fd fecb 	bl	8002454 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b0a      	cmp	r3, #10
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e04c      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80046cc:	f7ff fc3c 	bl	8003f48 <LL_RCC_PLL_IsReady>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f1      	beq.n	80046ba <HAL_RCC_OscConfig+0x646>
 80046d6:	e045      	b.n	8004764 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d8:	f7ff fc28 	bl	8003f2c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fd feba 	bl	8002454 <HAL_GetTick>
 80046e0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fd feb6 	bl	8002454 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b0a      	cmp	r3, #10
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e037      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80046f6:	f7ff fc27 	bl	8003f48 <LL_RCC_PLL_IsReady>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f1      	bne.n	80046e4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <HAL_RCC_OscConfig+0x700>)
 800470c:	4013      	ands	r3, r2
 800470e:	60cb      	str	r3, [r1, #12]
 8004710:	e028      	b.n	8004764 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e023      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800471e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f003 0203 	and.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	429a      	cmp	r2, r3
 8004732:	d115      	bne.n	8004760 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	429a      	cmp	r2, r3
 8004740:	d10e      	bne.n	8004760 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	429a      	cmp	r2, r3
 8004750:	d106      	bne.n	8004760 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	11c1808c 	.word	0x11c1808c
 8004774:	eefefffc 	.word	0xeefefffc

08004778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e12c      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800478c:	4b98      	ldr	r3, [pc, #608]	; (80049f0 <HAL_RCC_ClockConfig+0x278>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d91b      	bls.n	80047d2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b95      	ldr	r3, [pc, #596]	; (80049f0 <HAL_RCC_ClockConfig+0x278>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 0207 	bic.w	r2, r3, #7
 80047a2:	4993      	ldr	r1, [pc, #588]	; (80049f0 <HAL_RCC_ClockConfig+0x278>)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047aa:	f7fd fe53 	bl	8002454 <HAL_GetTick>
 80047ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047b2:	f7fd fe4f 	bl	8002454 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e110      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c4:	4b8a      	ldr	r3, [pc, #552]	; (80049f0 <HAL_RCC_ClockConfig+0x278>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d1ef      	bne.n	80047b2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d016      	beq.n	800480c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fb02 	bl	8003dec <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047e8:	f7fd fe34 	bl	8002454 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047f0:	f7fd fe30 	bl	8002454 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e0f1      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004802:	f7ff fbdf 	bl	8003fc4 <LL_RCC_IsActiveFlag_HPRE>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f1      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d016      	beq.n	8004846 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff faf8 	bl	8003e12 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004822:	f7fd fe17 	bl	8002454 <HAL_GetTick>
 8004826:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800482a:	f7fd fe13 	bl	8002454 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e0d4      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800483c:	f7ff fbd3 	bl	8003fe6 <LL_RCC_IsActiveFlag_C2HPRE>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f1      	beq.n	800482a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff faf0 	bl	8003e3c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800485c:	f7fd fdfa 	bl	8002454 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004864:	f7fd fdf6 	bl	8002454 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e0b7      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004876:	f7ff fbc8 	bl	800400a <LL_RCC_IsActiveFlag_SHDHPRE>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0f1      	beq.n	8004864 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d016      	beq.n	80048ba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fae9 	bl	8003e68 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004896:	f7fd fddd 	bl	8002454 <HAL_GetTick>
 800489a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800489e:	f7fd fdd9 	bl	8002454 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e09a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048b0:	f7ff fbbd 	bl	800402e <LL_RCC_IsActiveFlag_PPRE1>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f1      	beq.n	800489e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d017      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fade 	bl	8003e8e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048d2:	f7fd fdbf 	bl	8002454 <HAL_GetTick>
 80048d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048da:	f7fd fdbb 	bl	8002454 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e07c      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80048ec:	f7ff fbb0 	bl	8004050 <LL_RCC_IsActiveFlag_PPRE2>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f1      	beq.n	80048da <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d043      	beq.n	800498a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d106      	bne.n	8004918 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800490a:	f7ff f956 	bl	8003bba <LL_RCC_HSE_IsReady>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d11e      	bne.n	8004952 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e066      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d106      	bne.n	800492e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004920:	f7ff fb12 	bl	8003f48 <LL_RCC_PLL_IsReady>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d113      	bne.n	8004952 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e05b      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004936:	f7ff f9f0 	bl	8003d1a <LL_RCC_MSI_IsReady>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d108      	bne.n	8004952 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e050      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004944:	f7ff f966 	bl	8003c14 <LL_RCC_HSI_IsReady>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e049      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fa2a 	bl	8003db0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800495c:	f7fd fd7a 	bl	8002454 <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	e00a      	b.n	800497a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004964:	f7fd fd76 	bl	8002454 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e035      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	f7ff fa2c 	bl	8003dd6 <LL_RCC_GetSysClkSource>
 800497e:	4602      	mov	r2, r0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	429a      	cmp	r2, r3
 8004988:	d1ec      	bne.n	8004964 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800498a:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <HAL_RCC_ClockConfig+0x278>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d21b      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <HAL_RCC_ClockConfig+0x278>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f023 0207 	bic.w	r2, r3, #7
 80049a0:	4913      	ldr	r1, [pc, #76]	; (80049f0 <HAL_RCC_ClockConfig+0x278>)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049a8:	f7fd fd54 	bl	8002454 <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049b0:	f7fd fd50 	bl	8002454 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e011      	b.n	80049e6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_ClockConfig+0x278>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d1ef      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049d0:	f000 f8b4 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 80049d4:	4603      	mov	r3, r0
 80049d6:	4a07      	ldr	r2, [pc, #28]	; (80049f4 <HAL_RCC_ClockConfig+0x27c>)
 80049d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80049da:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <HAL_RCC_ClockConfig+0x280>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fd fe56 	bl	8002690 <HAL_InitTick>
 80049e4:	4603      	mov	r3, r0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	58004000 	.word	0x58004000
 80049f4:	2000000c 	.word	0x2000000c
 80049f8:	20000010 	.word	0x20000010

080049fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0a:	f7ff f9e4 	bl	8003dd6 <LL_RCC_GetSysClkSource>
 8004a0e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a10:	f7ff facd 	bl	8003fae <LL_RCC_PLL_GetMainSource>
 8004a14:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x2c>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d139      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d136      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004a28:	f7ff f987 	bl	8003d3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d115      	bne.n	8004a5e <HAL_RCC_GetSysClockFreq+0x62>
 8004a32:	f7ff f982 	bl	8003d3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d106      	bne.n	8004a4a <HAL_RCC_GetSysClockFreq+0x4e>
 8004a3c:	f7ff f98d 	bl	8003d5a <LL_RCC_MSI_GetRange>
 8004a40:	4603      	mov	r3, r0
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	e005      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x5a>
 8004a4a:	f7ff f991 	bl	8003d70 <LL_RCC_MSI_GetRangeAfterStandby>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	4a36      	ldr	r2, [pc, #216]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5c:	e014      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x8c>
 8004a5e:	f7ff f96c 	bl	8003d3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d106      	bne.n	8004a76 <HAL_RCC_GetSysClockFreq+0x7a>
 8004a68:	f7ff f977 	bl	8003d5a <LL_RCC_MSI_GetRange>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	e005      	b.n	8004a82 <HAL_RCC_GetSysClockFreq+0x86>
 8004a76:	f7ff f97b 	bl	8003d70 <LL_RCC_MSI_GetRangeAfterStandby>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	4a2b      	ldr	r2, [pc, #172]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d115      	bne.n	8004abc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a94:	e012      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a9c:	4b25      	ldr	r3, [pc, #148]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e00c      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d109      	bne.n	8004abc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004aa8:	f7ff f85a 	bl	8003b60 <LL_RCC_HSE_IsEnabledDiv2>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d102      	bne.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004ab2:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e001      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004aba:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004abc:	f7ff f98b 	bl	8003dd6 <LL_RCC_GetSysClkSource>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b0c      	cmp	r3, #12
 8004ac4:	d12f      	bne.n	8004b26 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004ac6:	f7ff fa72 	bl	8003fae <LL_RCC_PLL_GetMainSource>
 8004aca:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d003      	beq.n	8004ada <HAL_RCC_GetSysClockFreq+0xde>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xe4>
 8004ad8:	e00d      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004ada:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004adc:	60fb      	str	r3, [r7, #12]
        break;
 8004ade:	e00d      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ae0:	f7ff f83e 	bl	8003b60 <LL_RCC_HSE_IsEnabledDiv2>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d102      	bne.n	8004af0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004aea:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004aec:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004aee:	e005      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004af0:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004af2:	60fb      	str	r3, [r7, #12]
        break;
 8004af4:	e002      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	60fb      	str	r3, [r7, #12]
        break;
 8004afa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004afc:	f7ff fa35 	bl	8003f6a <LL_RCC_PLL_GetN>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	fb03 f402 	mul.w	r4, r3, r2
 8004b08:	f7ff fa46 	bl	8003f98 <LL_RCC_PLL_GetDivider>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	3301      	adds	r3, #1
 8004b12:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b16:	f7ff fa34 	bl	8003f82 <LL_RCC_PLL_GetR>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	0f5b      	lsrs	r3, r3, #29
 8004b1e:	3301      	adds	r3, #1
 8004b20:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b24:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b26:	697b      	ldr	r3, [r7, #20]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd90      	pop	{r4, r7, pc}
 8004b30:	0800dd6c 	.word	0x0800dd6c
 8004b34:	00f42400 	.word	0x00f42400
 8004b38:	01e84800 	.word	0x01e84800

08004b3c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b3c:	b598      	push	{r3, r4, r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b40:	f7ff ff5c 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8004b44:	4604      	mov	r4, r0
 8004b46:	f7ff f9b5 	bl	8003eb4 <LL_RCC_GetAHBPrescaler>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	4a03      	ldr	r2, [pc, #12]	; (8004b60 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b58:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd98      	pop	{r3, r4, r7, pc}
 8004b60:	0800dd0c 	.word	0x0800dd0c

08004b64 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b64:	b598      	push	{r3, r4, r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b68:	f7ff ffe8 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	f7ff f9b9 	bl	8003ee4 <LL_RCC_GetAPB1Prescaler>
 8004b72:	4603      	mov	r3, r0
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	4a03      	ldr	r2, [pc, #12]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd98      	pop	{r3, r4, r7, pc}
 8004b84:	0800dd4c 	.word	0x0800dd4c

08004b88 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b598      	push	{r3, r4, r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b8c:	f7ff ffd6 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b90:	4604      	mov	r4, r0
 8004b92:	f7ff f9b2 	bl	8003efa <LL_RCC_GetAPB2Prescaler>
 8004b96:	4603      	mov	r3, r0
 8004b98:	0adb      	lsrs	r3, r3, #11
 8004b9a:	4a03      	ldr	r2, [pc, #12]	; (8004ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd98      	pop	{r3, r4, r7, pc}
 8004ba8:	0800dd4c 	.word	0x0800dd4c

08004bac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004bac:	b590      	push	{r4, r7, lr}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	4a10      	ldr	r2, [pc, #64]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004bc4:	f7ff f981 	bl	8003eca <LL_RCC_GetAHB3Prescaler>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	0c9c      	lsrs	r4, r3, #18
 8004be8:	f7fe ff80 	bl	8003aec <HAL_PWREx_GetVoltageRange>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f000 f80b 	bl	8004c0c <RCC_SetFlashLatency>
 8004bf6:	4603      	mov	r3, r0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd90      	pop	{r4, r7, pc}
 8004c00:	0800dd6c 	.word	0x0800dd6c
 8004c04:	0800dd0c 	.word	0x0800dd0c
 8004c08:	431bde83 	.word	0x431bde83

08004c0c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08e      	sub	sp, #56	; 0x38
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004c16:	4a3a      	ldr	r2, [pc, #232]	; (8004d00 <RCC_SetFlashLatency+0xf4>)
 8004c18:	f107 0320 	add.w	r3, r7, #32
 8004c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c20:	6018      	str	r0, [r3, #0]
 8004c22:	3304      	adds	r3, #4
 8004c24:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004c26:	4a37      	ldr	r2, [pc, #220]	; (8004d04 <RCC_SetFlashLatency+0xf8>)
 8004c28:	f107 0318 	add.w	r3, r7, #24
 8004c2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c30:	6018      	str	r0, [r3, #0]
 8004c32:	3304      	adds	r3, #4
 8004c34:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004c36:	4a34      	ldr	r2, [pc, #208]	; (8004d08 <RCC_SetFlashLatency+0xfc>)
 8004c38:	f107 030c 	add.w	r3, r7, #12
 8004c3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4c:	d11b      	bne.n	8004c86 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	633b      	str	r3, [r7, #48]	; 0x30
 8004c52:	e014      	b.n	8004c7e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	3338      	adds	r3, #56	; 0x38
 8004c5a:	443b      	add	r3, r7
 8004c5c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004c60:	461a      	mov	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d807      	bhi.n	8004c78 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	3338      	adds	r3, #56	; 0x38
 8004c6e:	443b      	add	r3, r7
 8004c70:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c76:	e021      	b.n	8004cbc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d9e7      	bls.n	8004c54 <RCC_SetFlashLatency+0x48>
 8004c84:	e01a      	b.n	8004cbc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8a:	e014      	b.n	8004cb6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	3338      	adds	r3, #56	; 0x38
 8004c92:	443b      	add	r3, r7
 8004c94:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d807      	bhi.n	8004cb0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	3338      	adds	r3, #56	; 0x38
 8004ca6:	443b      	add	r3, r7
 8004ca8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cae:	e005      	b.n	8004cbc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d9e7      	bls.n	8004c8c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cbc:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <RCC_SetFlashLatency+0x100>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 0207 	bic.w	r2, r3, #7
 8004cc4:	4911      	ldr	r1, [pc, #68]	; (8004d0c <RCC_SetFlashLatency+0x100>)
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ccc:	f7fd fbc2 	bl	8002454 <HAL_GetTick>
 8004cd0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cd2:	e008      	b.n	8004ce6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cd4:	f7fd fbbe 	bl	8002454 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e007      	b.n	8004cf6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004ce6:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <RCC_SetFlashLatency+0x100>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1ef      	bne.n	8004cd4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3738      	adds	r7, #56	; 0x38
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	0800dccc 	.word	0x0800dccc
 8004d04:	0800dcd4 	.word	0x0800dcd4
 8004d08:	0800dcdc 	.word	0x0800dcdc
 8004d0c:	58004000 	.word	0x58004000

08004d10 <LL_RCC_LSE_IsReady>:
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d101      	bne.n	8004d28 <LL_RCC_LSE_IsReady+0x18>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <LL_RCC_LSE_IsReady+0x1a>
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr

08004d32 <LL_RCC_SetUSARTClockSource>:
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	0c1b      	lsrs	r3, r3, #16
 8004d46:	43db      	mvns	r3, r3
 8004d48:	401a      	ands	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr

08004d62 <LL_RCC_SetI2SClockSource>:
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <LL_RCC_SetLPUARTClockSource>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <LL_RCC_SetI2CClockSource>:
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <LL_RCC_SetLPTIMClockSource>:
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	041b      	lsls	r3, r3, #16
 8004e04:	43db      	mvns	r3, r3
 8004e06:	401a      	ands	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr

08004e20 <LL_RCC_SetRNGClockSource>:
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <LL_RCC_SetADCClockSource>:
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <LL_RCC_SetRTCClockSource>:
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <LL_RCC_GetRTCClockSource>:
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr

08004eb6 <LL_RCC_ForceBackupDomainReset>:
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004eee:	bf00      	nop
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
	...

08004ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004f04:	2300      	movs	r3, #0
 8004f06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004f08:	2300      	movs	r3, #0
 8004f0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d058      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004f18:	f7fe fdda 	bl	8003ad0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f1c:	f7fd fa9a 	bl	8002454 <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004f22:	e009      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f24:	f7fd fa96 	bl	8002454 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d902      	bls.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	74fb      	strb	r3, [r7, #19]
        break;
 8004f36:	e006      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004f38:	4b7b      	ldr	r3, [pc, #492]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d1ee      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004f46:	7cfb      	ldrb	r3, [r7, #19]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d13c      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004f4c:	f7ff ffa7 	bl	8004e9e <LL_RCC_GetRTCClockSource>
 8004f50:	4602      	mov	r2, r0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d00f      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f66:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f68:	f7ff ffa5 	bl	8004eb6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f6c:	f7ff ffb3 	bl	8004ed6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d014      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fd fa66 	bl	8002454 <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7fd fa62 	bl	8002454 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d902      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	74fb      	strb	r3, [r7, #19]
            break;
 8004fa2:	e004      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004fa4:	f7ff feb4 	bl	8004d10 <LL_RCC_LSE_IsReady>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d1ee      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ff5b 	bl	8004e74 <LL_RCC_SetRTCClockSource>
 8004fbe:	e004      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fc0:	7cfb      	ldrb	r3, [r7, #19]
 8004fc2:	74bb      	strb	r3, [r7, #18]
 8004fc4:	e001      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc6:	7cfb      	ldrb	r3, [r7, #19]
 8004fc8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fea9 	bl	8004d32 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff fe9e 	bl	8004d32 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fec0 	bl	8004d8c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005014:	2b00      	cmp	r3, #0
 8005016:	d004      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fee6 	bl	8004dee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502a:	2b00      	cmp	r3, #0
 800502c:	d004      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fedb 	bl	8004dee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005040:	2b00      	cmp	r3, #0
 8005042:	d004      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fed0 	bl	8004dee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fea9 	bl	8004db6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fe9e 	bl	8004db6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fe93 	bl	8004db6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	d011      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff fe5e 	bl	8004d62 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ae:	d107      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d010      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fea5 	bl	8004e20 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d011      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fea3 	bl	8004e4a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510c:	d107      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800511e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	58000400 	.word	0x58000400

0800512c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d071      	beq.n	8005222 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fd f86e 	bl	8002234 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005160:	4b32      	ldr	r3, [pc, #200]	; (800522c <HAL_RTC_Init+0x100>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b10      	cmp	r3, #16
 800516a:	d051      	beq.n	8005210 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800516c:	4b2f      	ldr	r3, [pc, #188]	; (800522c <HAL_RTC_Init+0x100>)
 800516e:	22ca      	movs	r2, #202	; 0xca
 8005170:	625a      	str	r2, [r3, #36]	; 0x24
 8005172:	4b2e      	ldr	r3, [pc, #184]	; (800522c <HAL_RTC_Init+0x100>)
 8005174:	2253      	movs	r2, #83	; 0x53
 8005176:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fa51 	bl	8005620 <RTC_EnterInitMode>
 800517e:	4603      	mov	r3, r0
 8005180:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d13f      	bne.n	8005208 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005188:	4b28      	ldr	r3, [pc, #160]	; (800522c <HAL_RTC_Init+0x100>)
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	4a27      	ldr	r2, [pc, #156]	; (800522c <HAL_RTC_Init+0x100>)
 800518e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005196:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005198:	4b24      	ldr	r3, [pc, #144]	; (800522c <HAL_RTC_Init+0x100>)
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6859      	ldr	r1, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	4319      	orrs	r1, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	430b      	orrs	r3, r1
 80051ac:	491f      	ldr	r1, [pc, #124]	; (800522c <HAL_RTC_Init+0x100>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	491b      	ldr	r1, [pc, #108]	; (800522c <HAL_RTC_Init+0x100>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80051c2:	4b1a      	ldr	r3, [pc, #104]	; (800522c <HAL_RTC_Init+0x100>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	430b      	orrs	r3, r1
 80051d4:	4915      	ldr	r1, [pc, #84]	; (800522c <HAL_RTC_Init+0x100>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fa54 	bl	8005688 <RTC_ExitInitMode>
 80051e0:	4603      	mov	r3, r0
 80051e2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10e      	bne.n	8005208 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80051ea:	4b10      	ldr	r3, [pc, #64]	; (800522c <HAL_RTC_Init+0x100>)
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a19      	ldr	r1, [r3, #32]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	4319      	orrs	r1, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	430b      	orrs	r3, r1
 8005202:	490a      	ldr	r1, [pc, #40]	; (800522c <HAL_RTC_Init+0x100>)
 8005204:	4313      	orrs	r3, r2
 8005206:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005208:	4b08      	ldr	r3, [pc, #32]	; (800522c <HAL_RTC_Init+0x100>)
 800520a:	22ff      	movs	r2, #255	; 0xff
 800520c:	625a      	str	r2, [r3, #36]	; 0x24
 800520e:	e001      	b.n	8005214 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40002800 	.word	0x40002800

08005230 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_RTC_SetTime+0x1a>
 8005246:	2302      	movs	r3, #2
 8005248:	e088      	b.n	800535c <HAL_RTC_SetTime+0x12c>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800525a:	4b42      	ldr	r3, [pc, #264]	; (8005364 <HAL_RTC_SetTime+0x134>)
 800525c:	22ca      	movs	r2, #202	; 0xca
 800525e:	625a      	str	r2, [r3, #36]	; 0x24
 8005260:	4b40      	ldr	r3, [pc, #256]	; (8005364 <HAL_RTC_SetTime+0x134>)
 8005262:	2253      	movs	r2, #83	; 0x53
 8005264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f9da 	bl	8005620 <RTC_EnterInitMode>
 800526c:	4603      	mov	r3, r0
 800526e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d15e      	bne.n	8005334 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005276:	4b3b      	ldr	r3, [pc, #236]	; (8005364 <HAL_RTC_SetTime+0x134>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005282:	d057      	beq.n	8005334 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d125      	bne.n	80052d6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800528a:	4b36      	ldr	r3, [pc, #216]	; (8005364 <HAL_RTC_SetTime+0x134>)
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d102      	bne.n	800529c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2200      	movs	r2, #0
 800529a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fa2f 	bl	8005704 <RTC_ByteToBcd2>
 80052a6:	4603      	mov	r3, r0
 80052a8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fa28 	bl	8005704 <RTC_ByteToBcd2>
 80052b4:	4603      	mov	r3, r0
 80052b6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052b8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	789b      	ldrb	r3, [r3, #2]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fa20 	bl	8005704 <RTC_ByteToBcd2>
 80052c4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052c6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	78db      	ldrb	r3, [r3, #3]
 80052ce:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	e017      	b.n	8005306 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80052d6:	4b23      	ldr	r3, [pc, #140]	; (8005364 <HAL_RTC_SetTime+0x134>)
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d102      	bne.n	80052e8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	785b      	ldrb	r3, [r3, #1]
 80052f2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052f4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052fa:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	78db      	ldrb	r3, [r3, #3]
 8005300:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005306:	4a17      	ldr	r2, [pc, #92]	; (8005364 <HAL_RTC_SetTime+0x134>)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800530e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005312:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005314:	4b13      	ldr	r3, [pc, #76]	; (8005364 <HAL_RTC_SetTime+0x134>)
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	4a12      	ldr	r2, [pc, #72]	; (8005364 <HAL_RTC_SetTime+0x134>)
 800531a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005320:	4b10      	ldr	r3, [pc, #64]	; (8005364 <HAL_RTC_SetTime+0x134>)
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	68d9      	ldr	r1, [r3, #12]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	430b      	orrs	r3, r1
 800532e:	490d      	ldr	r1, [pc, #52]	; (8005364 <HAL_RTC_SetTime+0x134>)
 8005330:	4313      	orrs	r3, r2
 8005332:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f9a7 	bl	8005688 <RTC_ExitInitMode>
 800533a:	4603      	mov	r3, r0
 800533c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RTC_SetTime+0x134>)
 8005340:	22ff      	movs	r2, #255	; 0xff
 8005342:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005344:	7cfb      	ldrb	r3, [r7, #19]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800535a:	7cfb      	ldrb	r3, [r7, #19]
}
 800535c:	4618      	mov	r0, r3
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	bd90      	pop	{r4, r7, pc}
 8005364:	40002800 	.word	0x40002800

08005368 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8005374:	4b2c      	ldr	r3, [pc, #176]	; (8005428 <HAL_RTC_GetTime+0xc0>)
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800537c:	4b2a      	ldr	r3, [pc, #168]	; (8005428 <HAL_RTC_GetTime+0xc0>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005388:	d049      	beq.n	800541e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800538a:	4b27      	ldr	r3, [pc, #156]	; (8005428 <HAL_RTC_GetTime+0xc0>)
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8005396:	4b24      	ldr	r3, [pc, #144]	; (8005428 <HAL_RTC_GetTime+0xc0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800539e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80053a2:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	0c1b      	lsrs	r3, r3, #16
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	0a1b      	lsrs	r3, r3, #8
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	0d9b      	lsrs	r3, r3, #22
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11a      	bne.n	800541e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f9a8 	bl	8005742 <RTC_Bcd2ToByte>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 f99f 	bl	8005742 <RTC_Bcd2ToByte>
 8005404:	4603      	mov	r3, r0
 8005406:	461a      	mov	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	789b      	ldrb	r3, [r3, #2]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f996 	bl	8005742 <RTC_Bcd2ToByte>
 8005416:	4603      	mov	r3, r0
 8005418:	461a      	mov	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40002800 	.word	0x40002800

0800542c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800542c:	b590      	push	{r4, r7, lr}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_RTC_SetDate+0x1a>
 8005442:	2302      	movs	r3, #2
 8005444:	e071      	b.n	800552a <HAL_RTC_SetDate+0xfe>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10e      	bne.n	800547a <HAL_RTC_SetDate+0x4e>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	f023 0310 	bic.w	r3, r3, #16
 8005470:	b2db      	uxtb	r3, r3
 8005472:	330a      	adds	r3, #10
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d11c      	bne.n	80054ba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	78db      	ldrb	r3, [r3, #3]
 8005484:	4618      	mov	r0, r3
 8005486:	f000 f93d 	bl	8005704 <RTC_ByteToBcd2>
 800548a:	4603      	mov	r3, r0
 800548c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f936 	bl	8005704 <RTC_ByteToBcd2>
 8005498:	4603      	mov	r3, r0
 800549a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800549c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	789b      	ldrb	r3, [r3, #2]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f92e 	bl	8005704 <RTC_ByteToBcd2>
 80054a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	e00e      	b.n	80054d8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80054c6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80054cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054d8:	4b16      	ldr	r3, [pc, #88]	; (8005534 <HAL_RTC_SetDate+0x108>)
 80054da:	22ca      	movs	r2, #202	; 0xca
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <HAL_RTC_SetDate+0x108>)
 80054e0:	2253      	movs	r2, #83	; 0x53
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f89b 	bl	8005620 <RTC_EnterInitMode>
 80054ea:	4603      	mov	r3, r0
 80054ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80054ee:	7cfb      	ldrb	r3, [r7, #19]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80054f4:	4a0f      	ldr	r2, [pc, #60]	; (8005534 <HAL_RTC_SetDate+0x108>)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005500:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f8c0 	bl	8005688 <RTC_ExitInitMode>
 8005508:	4603      	mov	r3, r0
 800550a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <HAL_RTC_SetDate+0x108>)
 800550e:	22ff      	movs	r2, #255	; 0xff
 8005510:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005528:	7cfb      	ldrb	r3, [r7, #19]
}
 800552a:	4618      	mov	r0, r3
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	bd90      	pop	{r4, r7, pc}
 8005532:	bf00      	nop
 8005534:	40002800 	.word	0x40002800

08005538 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8005544:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <HAL_RTC_GetDate+0x98>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800554c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005550:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	b2da      	uxtb	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	0a1b      	lsrs	r3, r3, #8
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	b2da      	uxtb	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	0b5b      	lsrs	r3, r3, #13
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d11a      	bne.n	80055c6 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	78db      	ldrb	r3, [r3, #3]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 f8d4 	bl	8005742 <RTC_Bcd2ToByte>
 800559a:	4603      	mov	r3, r0
 800559c:	461a      	mov	r2, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f8cb 	bl	8005742 <RTC_Bcd2ToByte>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461a      	mov	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	789b      	ldrb	r3, [r3, #2]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 f8c2 	bl	8005742 <RTC_Bcd2ToByte>
 80055be:	4603      	mov	r3, r0
 80055c0:	461a      	mov	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40002800 	.word	0x40002800

080055d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <HAL_RTC_WaitForSynchro+0x48>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4a0e      	ldr	r2, [pc, #56]	; (800561c <HAL_RTC_WaitForSynchro+0x48>)
 80055e2:	f023 0320 	bic.w	r3, r3, #32
 80055e6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80055e8:	f7fc ff34 	bl	8002454 <HAL_GetTick>
 80055ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80055ee:	e009      	b.n	8005604 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055f0:	f7fc ff30 	bl	8002454 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055fe:	d901      	bls.n	8005604 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e006      	b.n	8005612 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RTC_WaitForSynchro+0x48>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0ef      	beq.n	80055f0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40002800 	.word	0x40002800

08005620 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800562c:	4b15      	ldr	r3, [pc, #84]	; (8005684 <RTC_EnterInitMode+0x64>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	d120      	bne.n	800567a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005638:	4b12      	ldr	r3, [pc, #72]	; (8005684 <RTC_EnterInitMode+0x64>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a11      	ldr	r2, [pc, #68]	; (8005684 <RTC_EnterInitMode+0x64>)
 800563e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005642:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005644:	f7fc ff06 	bl	8002454 <HAL_GetTick>
 8005648:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800564a:	e00d      	b.n	8005668 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800564c:	f7fc ff02 	bl	8002454 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800565a:	d905      	bls.n	8005668 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2203      	movs	r2, #3
 8005664:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <RTC_EnterInitMode+0x64>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <RTC_EnterInitMode+0x5a>
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b03      	cmp	r3, #3
 8005678:	d1e8      	bne.n	800564c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40002800 	.word	0x40002800

08005688 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005694:	4b1a      	ldr	r3, [pc, #104]	; (8005700 <RTC_ExitInitMode+0x78>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4a19      	ldr	r2, [pc, #100]	; (8005700 <RTC_ExitInitMode+0x78>)
 800569a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800569e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80056a0:	4b17      	ldr	r3, [pc, #92]	; (8005700 <RTC_ExitInitMode+0x78>)
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10c      	bne.n	80056c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff ff91 	bl	80055d4 <HAL_RTC_WaitForSynchro>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01e      	beq.n	80056f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2203      	movs	r2, #3
 80056bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	73fb      	strb	r3, [r7, #15]
 80056c4:	e017      	b.n	80056f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80056c6:	4b0e      	ldr	r3, [pc, #56]	; (8005700 <RTC_ExitInitMode+0x78>)
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	4a0d      	ldr	r2, [pc, #52]	; (8005700 <RTC_ExitInitMode+0x78>)
 80056cc:	f023 0320 	bic.w	r3, r3, #32
 80056d0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff ff7e 	bl	80055d4 <HAL_RTC_WaitForSynchro>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2203      	movs	r2, #3
 80056e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <RTC_ExitInitMode+0x78>)
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	4a04      	ldr	r2, [pc, #16]	; (8005700 <RTC_ExitInitMode+0x78>)
 80056f0:	f043 0320 	orr.w	r3, r3, #32
 80056f4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40002800 	.word	0x40002800

08005704 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005716:	e005      	b.n	8005724 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800571e:	7afb      	ldrb	r3, [r7, #11]
 8005720:	3b0a      	subs	r3, #10
 8005722:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	2b09      	cmp	r3, #9
 8005728:	d8f6      	bhi.n	8005718 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	b2da      	uxtb	r2, r3
 8005732:	7afb      	ldrb	r3, [r7, #11]
 8005734:	4313      	orrs	r3, r2
 8005736:	b2db      	uxtb	r3, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr

08005742 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	4603      	mov	r3, r0
 800574a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	b2db      	uxtb	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	b2db      	uxtb	r3, r3
 800576a:	4413      	add	r3, r2
 800576c:	b2db      	uxtb	r3, r3
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e0c6      	b.n	8005918 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	2b00      	cmp	r3, #0
 8005790:	d108      	bne.n	80057a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579a:	d009      	beq.n	80057b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	61da      	str	r2, [r3, #28]
 80057a2:	e005      	b.n	80057b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7fc fd61 	bl	800228c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057ea:	d902      	bls.n	80057f2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e002      	b.n	80057f8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005800:	d007      	beq.n	8005812 <HAL_SPI_Init+0x9a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800580a:	d002      	beq.n	8005812 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	ea42 0103 	orr.w	r1, r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005870:	d11b      	bne.n	80058aa <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005882:	d903      	bls.n	800588c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	631a      	str	r2, [r3, #48]	; 0x30
 800588a:	e002      	b.n	8005892 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	2b02      	cmp	r3, #2
 8005898:	d107      	bne.n	80058aa <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	0c1b      	lsrs	r3, r3, #16
 80058b0:	f003 0204 	and.w	r2, r3, #4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058d0:	ea42 0103 	orr.w	r1, r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ea:	d105      	bne.n	80058f8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	b292      	uxth	r2, r2
 80058f6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005906:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_SPI_Transmit+0x22>
 800593e:	2302      	movs	r3, #2
 8005940:	e17a      	b.n	8005c38 <HAL_SPI_Transmit+0x318>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800594a:	f7fc fd83 	bl	8002454 <HAL_GetTick>
 800594e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d002      	beq.n	8005966 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005960:	2302      	movs	r3, #2
 8005962:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005964:	e15f      	b.n	8005c26 <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_SPI_Transmit+0x52>
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005976:	e156      	b.n	8005c26 <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2203      	movs	r2, #3
 800597c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c2:	d10f      	bne.n	80059e4 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059e2:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ec:	d10f      	bne.n	8005a0e <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a0c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d007      	beq.n	8005a2c <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a34:	d94b      	bls.n	8005ace <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_SPI_Transmit+0x124>
 8005a3e:	8afb      	ldrh	r3, [r7, #22]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d13e      	bne.n	8005ac2 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	1c9a      	adds	r2, r3, #2
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a68:	e02b      	b.n	8005ac2 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d112      	bne.n	8005a9e <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	881a      	ldrh	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	1c9a      	adds	r2, r3, #2
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a9c:	e011      	b.n	8005ac2 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a9e:	f7fc fcd9 	bl	8002454 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d803      	bhi.n	8005ab6 <HAL_SPI_Transmit+0x196>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab4:	d102      	bne.n	8005abc <HAL_SPI_Transmit+0x19c>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ac0:	e0b1      	b.n	8005c26 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ce      	bne.n	8005a6a <HAL_SPI_Transmit+0x14a>
 8005acc:	e07c      	b.n	8005bc8 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_Transmit+0x1bc>
 8005ad6:	8afb      	ldrh	r3, [r7, #22]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d170      	bne.n	8005bbe <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d912      	bls.n	8005b0c <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	881a      	ldrh	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	1c9a      	adds	r2, r3, #2
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b02      	subs	r3, #2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b0a:	e058      	b.n	8005bbe <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	330c      	adds	r3, #12
 8005b16:	7812      	ldrb	r2, [r2, #0]
 8005b18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b32:	e044      	b.n	8005bbe <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d12b      	bne.n	8005b9a <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d912      	bls.n	8005b72 <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	881a      	ldrh	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b02      	subs	r3, #2
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b70:	e025      	b.n	8005bbe <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	330c      	adds	r3, #12
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b98:	e011      	b.n	8005bbe <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b9a:	f7fc fc5b 	bl	8002454 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d803      	bhi.n	8005bb2 <HAL_SPI_Transmit+0x292>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb0:	d102      	bne.n	8005bb8 <HAL_SPI_Transmit+0x298>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d102      	bne.n	8005bbe <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bbc:	e033      	b.n	8005c26 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1b5      	bne.n	8005b34 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd0:	d107      	bne.n	8005be2 <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005be0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fe6e 	bl	80068c8 <SPI_EndRxTxTransaction>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	77fb      	strb	r3, [r7, #31]
 8005c22:	e000      	b.n	8005c26 <HAL_SPI_Transmit+0x306>
  }

error:
 8005c24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c36:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08c      	sub	sp, #48	; 0x30
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c66:	d112      	bne.n	8005c8e <HAL_SPI_Receive+0x4e>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10e      	bne.n	8005c8e <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2204      	movs	r2, #4
 8005c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f9c4 	bl	8006012 <HAL_SPI_TransmitReceive>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	e1bd      	b.n	800600a <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_SPI_Receive+0x5c>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e1b6      	b.n	800600a <HAL_SPI_Receive+0x3ca>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca4:	f7fc fbd6 	bl	8002454 <HAL_GetTick>
 8005ca8:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d003      	beq.n	8005cbe <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8005cbc:	e19b      	b.n	8005ff6 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_Receive+0x8a>
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d103      	bne.n	8005cd2 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8005cd0:	e191      	b.n	8005ff6 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1c:	d118      	bne.n	8005d50 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d3c:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d58:	d908      	bls.n	8005d6c <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d68:	605a      	str	r2, [r3, #4]
 8005d6a:	e007      	b.n	8005d7c <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d7a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d84:	d10f      	bne.n	8005da6 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005da4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d007      	beq.n	8005dc4 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dcc:	d869      	bhi.n	8005ea2 <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005dce:	e031      	b.n	8005e34 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d117      	bne.n	8005e0e <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f103 020c 	add.w	r2, r3, #12
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e0c:	e012      	b.n	8005e34 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e0e:	f7fc fb21 	bl	8002454 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d803      	bhi.n	8005e26 <HAL_SPI_Receive+0x1e6>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e24:	d102      	bne.n	8005e2c <HAL_SPI_Receive+0x1ec>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005e32:	e0e0      	b.n	8005ff6 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1c7      	bne.n	8005dd0 <HAL_SPI_Receive+0x190>
 8005e40:	e035      	b.n	8005eae <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d115      	bne.n	8005e7c <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	b292      	uxth	r2, r2
 8005e5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	1c9a      	adds	r2, r3, #2
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e7a:	e012      	b.n	8005ea2 <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e7c:	f7fc faea 	bl	8002454 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d803      	bhi.n	8005e94 <HAL_SPI_Receive+0x254>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e92:	d102      	bne.n	8005e9a <HAL_SPI_Receive+0x25a>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005ea0:	e0a9      	b.n	8005ff6 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1c9      	bne.n	8005e42 <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb6:	d178      	bne.n	8005faa <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ec6:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fb82 	bl	80065dc <SPI_WaitFlagStateUntilTimeout>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005ee4:	e087      	b.n	8005ff6 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eee:	d907      	bls.n	8005f00 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	b292      	uxth	r2, r2
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	e008      	b.n	8005f12 <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f103 020c 	add.w	r2, r3, #12
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	7812      	ldrb	r2, [r2, #0]
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fb5d 	bl	80065dc <SPI_WaitFlagStateUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d009      	beq.n	8005f3c <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2c:	f043 0202 	orr.w	r2, r3, #2
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005f3a:	e05c      	b.n	8005ff6 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f44:	d105      	bne.n	8005f52 <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	e02b      	b.n	8005faa <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f62:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f6c:	d11d      	bne.n	8005faa <HAL_SPI_Receive+0x36a>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d119      	bne.n	8005faa <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	2101      	movs	r1, #1
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 fb2b 	bl	80065dc <SPI_WaitFlagStateUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f90:	f043 0202 	orr.w	r2, r3, #2
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005f9e:	e02a      	b.n	8005ff6 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005faa:	6a3a      	ldr	r2, [r7, #32]
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 fc32 	bl	8006818 <SPI_EndRxTransaction>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d10a      	bne.n	8005fe4 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd2:	f043 0202 	orr.w	r2, r3, #2
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005fe2:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ff2:	e000      	b.n	8005ff6 <HAL_SPI_Receive+0x3b6>
  }

error :
 8005ff4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800600a:	4618      	mov	r0, r3
 800600c:	3728      	adds	r7, #40	; 0x28
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b092      	sub	sp, #72	; 0x48
 8006016:	af02      	add	r7, sp, #8
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006028:	2301      	movs	r3, #1
 800602a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_SPI_TransmitReceive+0x2e>
 800603c:	2302      	movs	r3, #2
 800603e:	e2c8      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x5c0>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006048:	f7fc fa04 	bl	8002454 <HAL_GetTick>
 800604c:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006054:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 800605e:	887b      	ldrh	r3, [r7, #2]
 8006060:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8006062:	887b      	ldrh	r3, [r7, #2]
 8006064:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006076:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800607a:	2b01      	cmp	r3, #1
 800607c:	d00f      	beq.n	800609e <HAL_SPI_TransmitReceive+0x8c>
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006084:	d107      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x84>
 800608e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006092:	2b04      	cmp	r3, #4
 8006094:	d003      	beq.n	800609e <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8006096:	2302      	movs	r3, #2
 8006098:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 800609c:	e28f      	b.n	80065be <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x9e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x9e>
 80060aa:	887b      	ldrh	r3, [r7, #2]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d103      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80060b6:	e282      	b.n	80065be <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d003      	beq.n	80060cc <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2205      	movs	r2, #5
 80060c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	887a      	ldrh	r2, [r7, #2]
 80060dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	887a      	ldrh	r2, [r7, #2]
 80060e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	887a      	ldrh	r2, [r7, #2]
 80060f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	887a      	ldrh	r2, [r7, #2]
 80060f8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610e:	d10f      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800612e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006138:	d802      	bhi.n	8006140 <HAL_SPI_TransmitReceive+0x12e>
 800613a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800613c:	2b01      	cmp	r3, #1
 800613e:	d908      	bls.n	8006152 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800614e:	605a      	str	r2, [r3, #4]
 8006150:	e007      	b.n	8006162 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d007      	beq.n	8006180 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800617e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006188:	f240 80a4 	bls.w	80062d4 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_SPI_TransmitReceive+0x18a>
 8006194:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006196:	2b01      	cmp	r3, #1
 8006198:	f040 808e 	bne.w	80062b8 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	881a      	ldrh	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	1c9a      	adds	r2, r3, #2
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061c0:	e07a      	b.n	80062b8 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d13f      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x23e>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d03a      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x23e>
 80061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d137      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	881a      	ldrh	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	1c9a      	adds	r2, r3, #2
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d11e      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x23e>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621a:	d119      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10c      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x22e>
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623e:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800624e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d11c      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x286>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d016      	beq.n	8006298 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	b292      	uxth	r2, r2
 8006276:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	1c9a      	adds	r2, r3, #2
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006294:	2301      	movs	r3, #1
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006298:	f7fc f8dc 	bl	8002454 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d807      	bhi.n	80062b8 <HAL_SPI_TransmitReceive+0x2a6>
 80062a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ae:	d003      	beq.n	80062b8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80062b6:	e182      	b.n	80065be <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f47f af7f 	bne.w	80061c2 <HAL_SPI_TransmitReceive+0x1b0>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f47f af78 	bne.w	80061c2 <HAL_SPI_TransmitReceive+0x1b0>
 80062d2:	e103      	b.n	80064dc <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x2d2>
 80062dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062de:	2b01      	cmp	r3, #1
 80062e0:	f040 80ef 	bne.w	80064c2 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d912      	bls.n	8006314 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	881a      	ldrh	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	1c9a      	adds	r2, r3, #2
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b02      	subs	r3, #2
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006312:	e0d6      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800633a:	e0c2      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b02      	cmp	r3, #2
 8006348:	d158      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x3ea>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d053      	beq.n	80063fc <HAL_SPI_TransmitReceive+0x3ea>
 8006354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006356:	2b01      	cmp	r3, #1
 8006358:	d150      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	d912      	bls.n	800638a <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	881a      	ldrh	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	1c9a      	adds	r2, r3, #2
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b02      	subs	r3, #2
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006388:	e012      	b.n	80063b0 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	7812      	ldrb	r2, [r2, #0]
 8006396:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d11e      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x3ea>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c6:	d119      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10c      	bne.n	80063ec <HAL_SPI_TransmitReceive+0x3da>
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ea:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063fa:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b01      	cmp	r3, #1
 8006408:	d148      	bne.n	800649c <HAL_SPI_TransmitReceive+0x48a>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d042      	beq.n	800649c <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b01      	cmp	r3, #1
 8006420:	d923      	bls.n	800646a <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	b292      	uxth	r2, r2
 800642e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	1c9a      	adds	r2, r3, #2
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b02      	subs	r3, #2
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	d81f      	bhi.n	8006498 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006466:	605a      	str	r2, [r3, #4]
 8006468:	e016      	b.n	8006498 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f103 020c 	add.w	r2, r3, #12
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006498:	2301      	movs	r3, #1
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800649c:	f7fb ffda 	bl	8002454 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d803      	bhi.n	80064b4 <HAL_SPI_TransmitReceive+0x4a2>
 80064ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064b2:	d102      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x4a8>
 80064b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d103      	bne.n	80064c2 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80064c0:	e07d      	b.n	80065be <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f47f af37 	bne.w	800633c <HAL_SPI_TransmitReceive+0x32a>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f47f af30 	bne.w	800633c <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e4:	d146      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80064e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ec:	2201      	movs	r2, #1
 80064ee:	2101      	movs	r1, #1
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 f873 	bl	80065dc <SPI_WaitFlagStateUntilTimeout>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006500:	f043 0202 	orr.w	r2, r3, #2
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 800650e:	e056      	b.n	80065be <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006518:	d105      	bne.n	8006526 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	e026      	b.n	8006574 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	330c      	adds	r3, #12
 800652c:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006536:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	2b02      	cmp	r3, #2
 800653e:	d119      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006546:	2201      	movs	r2, #1
 8006548:	2101      	movs	r1, #1
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f846 	bl	80065dc <SPI_WaitFlagStateUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655a:	f043 0202 	orr.w	r2, r3, #2
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8006568:	e029      	b.n	80065be <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006572:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b10      	cmp	r3, #16
 8006580:	d10d      	bne.n	800659e <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006586:	f043 0202 	orr.w	r2, r3, #2
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006596:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800659e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f990 	bl	80068c8 <SPI_EndRxTxTransaction>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d006      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	661a      	str	r2, [r3, #96]	; 0x60
 80065ba:	e000      	b.n	80065be <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 80065bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3740      	adds	r7, #64	; 0x40
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	4613      	mov	r3, r2
 80065ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065ec:	f7fb ff32 	bl	8002454 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	4413      	add	r3, r2
 80065fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065fc:	f7fb ff2a 	bl	8002454 <HAL_GetTick>
 8006600:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006602:	4b39      	ldr	r3, [pc, #228]	; (80066e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	015b      	lsls	r3, r3, #5
 8006608:	0d1b      	lsrs	r3, r3, #20
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	fb02 f303 	mul.w	r3, r2, r3
 8006610:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006612:	e054      	b.n	80066be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800661a:	d050      	beq.n	80066be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800661c:	f7fb ff1a 	bl	8002454 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	429a      	cmp	r2, r3
 800662a:	d902      	bls.n	8006632 <SPI_WaitFlagStateUntilTimeout+0x56>
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d13d      	bne.n	80066ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006640:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800664a:	d111      	bne.n	8006670 <SPI_WaitFlagStateUntilTimeout+0x94>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006654:	d004      	beq.n	8006660 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665e:	d107      	bne.n	8006670 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800666e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006678:	d10f      	bne.n	800669a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006698:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e017      	b.n	80066de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4013      	ands	r3, r2
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	bf0c      	ite	eq
 80066ce:	2301      	moveq	r3, #1
 80066d0:	2300      	movne	r3, #0
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d19b      	bne.n	8006614 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3720      	adds	r7, #32
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	2000000c 	.word	0x2000000c

080066ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	; 0x28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066fe:	f7fb fea9 	bl	8002454 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	1a9b      	subs	r3, r3, r2
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	4413      	add	r3, r2
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800670e:	f7fb fea1 	bl	8002454 <HAL_GetTick>
 8006712:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800671c:	4b3d      	ldr	r3, [pc, #244]	; (8006814 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	00da      	lsls	r2, r3, #3
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	0d1b      	lsrs	r3, r3, #20
 800672c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006734:	e060      	b.n	80067f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800673c:	d107      	bne.n	800674e <SPI_WaitFifoStateUntilTimeout+0x62>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	b2db      	uxtb	r3, r3
 800674a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800674c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006754:	d050      	beq.n	80067f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006756:	f7fb fe7d 	bl	8002454 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006762:	429a      	cmp	r2, r3
 8006764:	d902      	bls.n	800676c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d13d      	bne.n	80067e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800677a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006784:	d111      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678e:	d004      	beq.n	800679a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006798:	d107      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b2:	d10f      	bne.n	80067d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e010      	b.n	800680a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	4013      	ands	r3, r2
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	429a      	cmp	r2, r3
 8006806:	d196      	bne.n	8006736 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3728      	adds	r7, #40	; 0x28
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	2000000c 	.word	0x2000000c

08006818 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800682c:	d111      	bne.n	8006852 <SPI_EndRxTransaction+0x3a>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006836:	d004      	beq.n	8006842 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006840:	d107      	bne.n	8006852 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006850:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2200      	movs	r2, #0
 800685a:	2180      	movs	r1, #128	; 0x80
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff febd 	bl	80065dc <SPI_WaitFlagStateUntilTimeout>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d007      	beq.n	8006878 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686c:	f043 0220 	orr.w	r2, r3, #32
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e023      	b.n	80068c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006880:	d11d      	bne.n	80068be <SPI_EndRxTransaction+0xa6>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688a:	d004      	beq.n	8006896 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006894:	d113      	bne.n	80068be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2200      	movs	r2, #0
 800689e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff ff22 	bl	80066ec <SPI_WaitFifoStateUntilTimeout>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d007      	beq.n	80068be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b2:	f043 0220 	orr.w	r2, r3, #32
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e000      	b.n	80068c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2200      	movs	r2, #0
 80068dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f7ff ff03 	bl	80066ec <SPI_WaitFifoStateUntilTimeout>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e027      	b.n	800694c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2200      	movs	r2, #0
 8006904:	2180      	movs	r1, #128	; 0x80
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff fe68 	bl	80065dc <SPI_WaitFlagStateUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006916:	f043 0220 	orr.w	r2, r3, #32
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e014      	b.n	800694c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2200      	movs	r2, #0
 800692a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff fedc 	bl	80066ec <SPI_WaitFifoStateUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d007      	beq.n	800694a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693e:	f043 0220 	orr.w	r2, r3, #32
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e000      	b.n	800694c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006964:	4904      	ldr	r1, [pc, #16]	; (8006978 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4313      	orrs	r3, r2
 800696a:	608b      	str	r3, [r1, #8]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	58000400 	.word	0x58000400

0800697c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006986:	4a04      	ldr	r2, [pc, #16]	; (8006998 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	bc80      	pop	{r7}
 8006996:	4770      	bx	lr
 8006998:	58000400 	.word	0x58000400

0800699c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a6:	4a04      	ldr	r2, [pc, #16]	; (80069b8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80069a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	58000400 	.word	0x58000400

080069bc <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80069c0:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80069c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c6:	619a      	str	r2, [r3, #24]
}
 80069c8:	bf00      	nop
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr
 80069d0:	58000400 	.word	0x58000400

080069d4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d101      	bne.n	80069e8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80069e4:	2301      	movs	r3, #1
 80069e6:	e000      	b.n	80069ea <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	58000400 	.word	0x58000400

080069f8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80069fc:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d101      	bne.n	8006a0c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc80      	pop	{r7}
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	58000400 	.word	0x58000400

08006a1c <LL_RCC_RF_DisableReset>:
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <LL_RCC_IsRFUnderReset>:
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a50:	d101      	bne.n	8006a56 <LL_RCC_IsRFUnderReset+0x1a>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <LL_RCC_IsRFUnderReset+0x1c>
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <LL_EXTI_EnableIT_32_63+0x24>)
 8006a6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a6e:	4905      	ldr	r1, [pc, #20]	; (8006a84 <LL_EXTI_EnableIT_32_63+0x24>)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	58000800 	.word	0x58000800

08006a88 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	73fb      	strb	r3, [r7, #15]
    return status;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	e052      	b.n	8006b44 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	799b      	ldrb	r3, [r3, #6]
 8006aa6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_SUBGHZ_Init+0x2c>
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d109      	bne.n	8006ac8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fb fc2e 	bl	800231c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006ac0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006ac4:	f7ff ffcc 	bl	8006a60 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d126      	bne.n	8006b1c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8006ad4:	f7ff ffa2 	bl	8006a1c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006ad8:	4b1c      	ldr	r3, [pc, #112]	; (8006b4c <HAL_SUBGHZ_Init+0xc4>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4613      	mov	r3, r2
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	1a9b      	subs	r3, r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	0cdb      	lsrs	r3, r3, #19
 8006ae6:	2264      	movs	r2, #100	; 0x64
 8006ae8:	fb02 f303 	mul.w	r3, r2, r3
 8006aec:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	609a      	str	r2, [r3, #8]
        break;
 8006afe:	e007      	b.n	8006b10 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006b06:	f7ff ff99 	bl	8006a3c <LL_RCC_IsRFUnderReset>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1ee      	bne.n	8006aee <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006b10:	f7ff ff34 	bl	800697c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006b14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b18:	f7ff ff1c 	bl	8006954 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006b1c:	f7ff ff4e 	bl	80069bc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 faac 	bl	8007088 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	719a      	strb	r2, [r3, #6]

  return status;
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	2000000c 	.word	0x2000000c

08006b50 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	607a      	str	r2, [r7, #4]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	817b      	strh	r3, [r7, #10]
 8006b60:	4613      	mov	r3, r2
 8006b62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	799b      	ldrb	r3, [r3, #6]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d14a      	bne.n	8006c04 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	795b      	ldrb	r3, [r3, #5]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006b76:	2302      	movs	r3, #2
 8006b78:	e045      	b.n	8006c06 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2202      	movs	r2, #2
 8006b84:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fb4c 	bl	8007224 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006b8c:	f7ff ff06 	bl	800699c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006b90:	210d      	movs	r1, #13
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fa98 	bl	80070c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006b98:	897b      	ldrh	r3, [r7, #10]
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fa90 	bl	80070c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006ba8:	897b      	ldrh	r3, [r7, #10]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 fa8a 	bl	80070c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	82bb      	strh	r3, [r7, #20]
 8006bb8:	e00a      	b.n	8006bd0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006bba:	8abb      	ldrh	r3, [r7, #20]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fa7f 	bl	80070c8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006bca:	8abb      	ldrh	r3, [r7, #20]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	82bb      	strh	r3, [r7, #20]
 8006bd0:	8aba      	ldrh	r2, [r7, #20]
 8006bd2:	893b      	ldrh	r3, [r7, #8]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d3f0      	bcc.n	8006bba <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006bd8:	f7ff fed0 	bl	800697c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 fb45 	bl	800726c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
 8006bee:	e001      	b.n	8006bf4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	715a      	strb	r2, [r3, #5]

    return status;
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
 8006c02:	e000      	b.n	8006c06 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b088      	sub	sp, #32
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	817b      	strh	r3, [r7, #10]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	799b      	ldrb	r3, [r3, #6]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d14a      	bne.n	8006cc6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	795b      	ldrb	r3, [r3, #5]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e045      	b.n	8006cc8 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 faee 	bl	8007224 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006c48:	f7ff fea8 	bl	800699c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006c4c:	211d      	movs	r1, #29
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 fa3a 	bl	80070c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006c54:	897b      	ldrh	r3, [r7, #10]
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fa32 	bl	80070c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006c64:	897b      	ldrh	r3, [r7, #10]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	4619      	mov	r1, r3
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fa2c 	bl	80070c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006c70:	2100      	movs	r1, #0
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fa28 	bl	80070c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	82fb      	strh	r3, [r7, #22]
 8006c7c:	e009      	b.n	8006c92 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006c7e:	69b9      	ldr	r1, [r7, #24]
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fa77 	bl	8007174 <SUBGHZSPI_Receive>
      pData++;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006c8c:	8afb      	ldrh	r3, [r7, #22]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	82fb      	strh	r3, [r7, #22]
 8006c92:	8afa      	ldrh	r2, [r7, #22]
 8006c94:	893b      	ldrh	r3, [r7, #8]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d3f1      	bcc.n	8006c7e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006c9a:	f7ff fe6f 	bl	800697c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fae4 	bl	800726c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e001      	b.n	8006cb6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	715a      	strb	r2, [r3, #5]

    return status;
 8006cc2:	7ffb      	ldrb	r3, [r7, #31]
 8006cc4:	e000      	b.n	8006cc8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006cc6:	2302      	movs	r3, #2
  }
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	607a      	str	r2, [r7, #4]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	460b      	mov	r3, r1
 8006cde:	72fb      	strb	r3, [r7, #11]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	799b      	ldrb	r3, [r3, #6]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d14a      	bne.n	8006d84 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	795b      	ldrb	r3, [r3, #5]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e045      	b.n	8006d86 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 fa8f 	bl	8007224 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	2b84      	cmp	r3, #132	; 0x84
 8006d0a:	d002      	beq.n	8006d12 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006d0c:	7afb      	ldrb	r3, [r7, #11]
 8006d0e:	2b94      	cmp	r3, #148	; 0x94
 8006d10:	d103      	bne.n	8006d1a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	711a      	strb	r2, [r3, #4]
 8006d18:	e002      	b.n	8006d20 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006d20:	f7ff fe3c 	bl	800699c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006d24:	7afb      	ldrb	r3, [r7, #11]
 8006d26:	4619      	mov	r1, r3
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 f9cd 	bl	80070c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006d2e:	2300      	movs	r3, #0
 8006d30:	82bb      	strh	r3, [r7, #20]
 8006d32:	e00a      	b.n	8006d4a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006d34:	8abb      	ldrh	r3, [r7, #20]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f9c2 	bl	80070c8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d44:	8abb      	ldrh	r3, [r7, #20]
 8006d46:	3301      	adds	r3, #1
 8006d48:	82bb      	strh	r3, [r7, #20]
 8006d4a:	8aba      	ldrh	r2, [r7, #20]
 8006d4c:	893b      	ldrh	r3, [r7, #8]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d3f0      	bcc.n	8006d34 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d52:	f7ff fe13 	bl	800697c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006d56:	7afb      	ldrb	r3, [r7, #11]
 8006d58:	2b84      	cmp	r3, #132	; 0x84
 8006d5a:	d002      	beq.n	8006d62 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fa85 	bl	800726c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	75fb      	strb	r3, [r7, #23]
 8006d6e:	e001      	b.n	8006d74 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	715a      	strb	r2, [r3, #5]

    return status;
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	e000      	b.n	8006d86 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006d84:	2302      	movs	r3, #2
  }
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b088      	sub	sp, #32
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	72fb      	strb	r3, [r7, #11]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	799b      	ldrb	r3, [r3, #6]
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d13d      	bne.n	8006e2c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	795b      	ldrb	r3, [r3, #5]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e038      	b.n	8006e2e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 fa2e 	bl	8007224 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006dc8:	f7ff fde8 	bl	800699c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006dcc:	7afb      	ldrb	r3, [r7, #11]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f979 	bl	80070c8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 f975 	bl	80070c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006dde:	2300      	movs	r3, #0
 8006de0:	82fb      	strh	r3, [r7, #22]
 8006de2:	e009      	b.n	8006df8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006de4:	69b9      	ldr	r1, [r7, #24]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f9c4 	bl	8007174 <SUBGHZSPI_Receive>
      pData++;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	3301      	adds	r3, #1
 8006df0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006df2:	8afb      	ldrh	r3, [r7, #22]
 8006df4:	3301      	adds	r3, #1
 8006df6:	82fb      	strh	r3, [r7, #22]
 8006df8:	8afa      	ldrh	r2, [r7, #22]
 8006dfa:	893b      	ldrh	r3, [r7, #8]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d3f1      	bcc.n	8006de4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e00:	f7ff fdbc 	bl	800697c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 fa31 	bl	800726c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	77fb      	strb	r3, [r7, #31]
 8006e16:	e001      	b.n	8006e1c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	715a      	strb	r2, [r3, #5]

    return status;
 8006e28:	7ffb      	ldrb	r3, [r7, #31]
 8006e2a:	e000      	b.n	8006e2e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e2c:	2302      	movs	r3, #2
  }
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	461a      	mov	r2, r3
 8006e42:	460b      	mov	r3, r1
 8006e44:	72fb      	strb	r3, [r7, #11]
 8006e46:	4613      	mov	r3, r2
 8006e48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	799b      	ldrb	r3, [r3, #6]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d13e      	bne.n	8006ed2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	795b      	ldrb	r3, [r3, #5]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e039      	b.n	8006ed4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2201      	movs	r2, #1
 8006e64:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 f9dc 	bl	8007224 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006e6c:	f7ff fd96 	bl	800699c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006e70:	210e      	movs	r1, #14
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f928 	bl	80070c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f923 	bl	80070c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006e82:	2300      	movs	r3, #0
 8006e84:	82bb      	strh	r3, [r7, #20]
 8006e86:	e00a      	b.n	8006e9e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006e88:	8abb      	ldrh	r3, [r7, #20]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	4619      	mov	r1, r3
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f918 	bl	80070c8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e98:	8abb      	ldrh	r3, [r7, #20]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	82bb      	strh	r3, [r7, #20]
 8006e9e:	8aba      	ldrh	r2, [r7, #20]
 8006ea0:	893b      	ldrh	r3, [r7, #8]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d3f0      	bcc.n	8006e88 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ea6:	f7ff fd69 	bl	800697c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 f9de 	bl	800726c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
 8006ebc:	e001      	b.n	8006ec2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	715a      	strb	r2, [r3, #5]

    return status;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
 8006ed0:	e000      	b.n	8006ed4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006ed2:	2302      	movs	r3, #2
  }
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	607a      	str	r2, [r7, #4]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	460b      	mov	r3, r1
 8006eea:	72fb      	strb	r3, [r7, #11]
 8006eec:	4613      	mov	r3, r2
 8006eee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	799b      	ldrb	r3, [r3, #6]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d141      	bne.n	8006f82 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	795b      	ldrb	r3, [r3, #5]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d101      	bne.n	8006f0a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006f06:	2302      	movs	r3, #2
 8006f08:	e03c      	b.n	8006f84 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f987 	bl	8007224 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f16:	f7ff fd41 	bl	800699c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006f1a:	211e      	movs	r1, #30
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f8d3 	bl	80070c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006f22:	7afb      	ldrb	r3, [r7, #11]
 8006f24:	4619      	mov	r1, r3
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 f8ce 	bl	80070c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f8ca 	bl	80070c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f34:	2300      	movs	r3, #0
 8006f36:	82fb      	strh	r3, [r7, #22]
 8006f38:	e009      	b.n	8006f4e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006f3a:	69b9      	ldr	r1, [r7, #24]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f919 	bl	8007174 <SUBGHZSPI_Receive>
      pData++;
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	3301      	adds	r3, #1
 8006f46:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006f48:	8afb      	ldrh	r3, [r7, #22]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	82fb      	strh	r3, [r7, #22]
 8006f4e:	8afa      	ldrh	r2, [r7, #22]
 8006f50:	893b      	ldrh	r3, [r7, #8]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d3f1      	bcc.n	8006f3a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f56:	f7ff fd11 	bl	800697c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f986 	bl	800726c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	77fb      	strb	r3, [r7, #31]
 8006f6c:	e001      	b.n	8006f72 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	715a      	strb	r2, [r3, #5]

    return status;
 8006f7e:	7ffb      	ldrb	r3, [r7, #31]
 8006f80:	e000      	b.n	8006f84 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006f82:	2302      	movs	r3, #2
  }
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3720      	adds	r7, #32
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8006f94:	2300      	movs	r3, #0
 8006f96:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006f98:	f107 020c 	add.w	r2, r7, #12
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	2112      	movs	r1, #18
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff fef4 	bl	8006d8e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006fa6:	7b3b      	ldrb	r3, [r7, #12]
 8006fa8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006faa:	89fb      	ldrh	r3, [r7, #14]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	b21a      	sxth	r2, r3
 8006fb0:	7b7b      	ldrb	r3, [r7, #13]
 8006fb2:	b21b      	sxth	r3, r3
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	b21b      	sxth	r3, r3
 8006fb8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006fba:	f107 020c 	add.w	r2, r7, #12
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff fe84 	bl	8006cd0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006fc8:	89fb      	ldrh	r3, [r7, #14]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f005 f95c 	bl	800c290 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006fd8:	89fb      	ldrh	r3, [r7, #14]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f005 f962 	bl	800c2ac <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006fe8:	89fb      	ldrh	r3, [r7, #14]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f005 f9b2 	bl	800c35c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006ff8:	89fb      	ldrh	r3, [r7, #14]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f005 f9b8 	bl	800c378 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007008:	89fb      	ldrh	r3, [r7, #14]
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f005 f9be 	bl	800c394 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007018:	89fb      	ldrh	r3, [r7, #14]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f005 f98c 	bl	800c340 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007028:	89fb      	ldrh	r3, [r7, #14]
 800702a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f005 f948 	bl	800c2c8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007038:	89fb      	ldrh	r3, [r7, #14]
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00d      	beq.n	800705e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007042:	89fb      	ldrh	r3, [r7, #14]
 8007044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800704c:	2101      	movs	r1, #1
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f005 f948 	bl	800c2e4 <HAL_SUBGHZ_CADStatusCallback>
 8007054:	e003      	b.n	800705e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007056:	2100      	movs	r1, #0
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f005 f943 	bl	800c2e4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800705e:	89fb      	ldrh	r3, [r7, #14]
 8007060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f005 f959 	bl	800c320 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800706e:	89fb      	ldrh	r3, [r7, #14]
 8007070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f005 f999 	bl	800c3b0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007090:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <SUBGHZSPI_Init+0x3c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a0b      	ldr	r2, [pc, #44]	; (80070c4 <SUBGHZSPI_Init+0x3c>)
 8007096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800709a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800709c:	4a09      	ldr	r2, [pc, #36]	; (80070c4 <SUBGHZSPI_Init+0x3c>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80070a4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80070a6:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <SUBGHZSPI_Init+0x3c>)
 80070a8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80070ac:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <SUBGHZSPI_Init+0x3c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a04      	ldr	r2, [pc, #16]	; (80070c4 <SUBGHZSPI_Init+0x3c>)
 80070b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b8:	6013      	str	r3, [r2, #0]
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr
 80070c4:	58010000 	.word	0x58010000

080070c8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80070d8:	4b23      	ldr	r3, [pc, #140]	; (8007168 <SUBGHZSPI_Transmit+0xa0>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	0cdb      	lsrs	r3, r3, #19
 80070e6:	2264      	movs	r2, #100	; 0x64
 80070e8:	fb02 f303 	mul.w	r3, r2, r3
 80070ec:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d105      	bne.n	8007100 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	609a      	str	r2, [r3, #8]
      break;
 80070fe:	e008      	b.n	8007112 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3b01      	subs	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007106:	4b19      	ldr	r3, [pc, #100]	; (800716c <SUBGHZSPI_Transmit+0xa4>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b02      	cmp	r3, #2
 8007110:	d1ed      	bne.n	80070ee <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007112:	4b17      	ldr	r3, [pc, #92]	; (8007170 <SUBGHZSPI_Transmit+0xa8>)
 8007114:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	78fa      	ldrb	r2, [r7, #3]
 800711a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800711c:	4b12      	ldr	r3, [pc, #72]	; (8007168 <SUBGHZSPI_Transmit+0xa0>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4613      	mov	r3, r2
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	0cdb      	lsrs	r3, r3, #19
 800712a:	2264      	movs	r2, #100	; 0x64
 800712c:	fb02 f303 	mul.w	r3, r2, r3
 8007130:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d105      	bne.n	8007144 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	609a      	str	r2, [r3, #8]
      break;
 8007142:	e008      	b.n	8007156 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3b01      	subs	r3, #1
 8007148:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800714a:	4b08      	ldr	r3, [pc, #32]	; (800716c <SUBGHZSPI_Transmit+0xa4>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b01      	cmp	r3, #1
 8007154:	d1ed      	bne.n	8007132 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007156:	4b05      	ldr	r3, [pc, #20]	; (800716c <SUBGHZSPI_Transmit+0xa4>)
 8007158:	68db      	ldr	r3, [r3, #12]

  return status;
 800715a:	7dfb      	ldrb	r3, [r7, #23]
}
 800715c:	4618      	mov	r0, r3
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	2000000c 	.word	0x2000000c
 800716c:	58010000 	.word	0x58010000
 8007170:	5801000c 	.word	0x5801000c

08007174 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007182:	4b25      	ldr	r3, [pc, #148]	; (8007218 <SUBGHZSPI_Receive+0xa4>)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	4613      	mov	r3, r2
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	0cdb      	lsrs	r3, r3, #19
 8007190:	2264      	movs	r2, #100	; 0x64
 8007192:	fb02 f303 	mul.w	r3, r2, r3
 8007196:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	609a      	str	r2, [r3, #8]
      break;
 80071a8:	e008      	b.n	80071bc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80071b0:	4b1a      	ldr	r3, [pc, #104]	; (800721c <SUBGHZSPI_Receive+0xa8>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d1ed      	bne.n	8007198 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80071bc:	4b18      	ldr	r3, [pc, #96]	; (8007220 <SUBGHZSPI_Receive+0xac>)
 80071be:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	22ff      	movs	r2, #255	; 0xff
 80071c4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80071c6:	4b14      	ldr	r3, [pc, #80]	; (8007218 <SUBGHZSPI_Receive+0xa4>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4613      	mov	r3, r2
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	1a9b      	subs	r3, r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	0cdb      	lsrs	r3, r3, #19
 80071d4:	2264      	movs	r2, #100	; 0x64
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d105      	bne.n	80071ee <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	609a      	str	r2, [r3, #8]
      break;
 80071ec:	e008      	b.n	8007200 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80071f4:	4b09      	ldr	r3, [pc, #36]	; (800721c <SUBGHZSPI_Receive+0xa8>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d1ed      	bne.n	80071dc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <SUBGHZSPI_Receive+0xa8>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	701a      	strb	r2, [r3, #0]

  return status;
 800720a:	7dfb      	ldrb	r3, [r7, #23]
}
 800720c:	4618      	mov	r0, r3
 800720e:	371c      	adds	r7, #28
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	2000000c 	.word	0x2000000c
 800721c:	58010000 	.word	0x58010000
 8007220:	5801000c 	.word	0x5801000c

08007224 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	791b      	ldrb	r3, [r3, #4]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d111      	bne.n	8007258 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007234:	4b0c      	ldr	r3, [pc, #48]	; (8007268 <SUBGHZ_CheckDeviceReady+0x44>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	4413      	add	r3, r2
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	0c1b      	lsrs	r3, r3, #16
 8007242:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007244:	f7ff fbaa 	bl	800699c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3b01      	subs	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f9      	bne.n	8007248 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007254:	f7ff fb92 	bl	800697c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f807 	bl	800726c <SUBGHZ_WaitOnBusy>
 800725e:	4603      	mov	r3, r0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	2000000c 	.word	0x2000000c

0800726c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007278:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <SUBGHZ_WaitOnBusy+0x58>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	4413      	add	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	0d1b      	lsrs	r3, r3, #20
 8007286:	2264      	movs	r2, #100	; 0x64
 8007288:	fb02 f303 	mul.w	r3, r2, r3
 800728c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800728e:	f7ff fbb3 	bl	80069f8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007292:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d105      	bne.n	80072a6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	609a      	str	r2, [r3, #8]
      break;
 80072a4:	e009      	b.n	80072ba <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80072ac:	f7ff fb92 	bl	80069d4 <LL_PWR_IsActiveFlag_RFBUSYS>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d0e9      	beq.n	800728e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	2000000c 	.word	0x2000000c

080072c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e049      	b.n	800736e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d106      	bne.n	80072f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fb f828 	bl	8002344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3304      	adds	r3, #4
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f000 f944 	bl	8007594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b01      	cmp	r3, #1
 800738a:	d001      	beq.n	8007390 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e02e      	b.n	80073ee <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a16      	ldr	r2, [pc, #88]	; (80073f8 <HAL_TIM_Base_Start+0x80>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d004      	beq.n	80073ac <HAL_TIM_Base_Start+0x34>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073aa:	d115      	bne.n	80073d8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	4b12      	ldr	r3, [pc, #72]	; (80073fc <HAL_TIM_Base_Start+0x84>)
 80073b4:	4013      	ands	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b06      	cmp	r3, #6
 80073bc:	d015      	beq.n	80073ea <HAL_TIM_Base_Start+0x72>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c4:	d011      	beq.n	80073ea <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f042 0201 	orr.w	r2, r2, #1
 80073d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d6:	e008      	b.n	80073ea <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0201 	orr.w	r2, r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	e000      	b.n	80073ec <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr
 80073f8:	40012c00 	.word	0x40012c00
 80073fc:	00010007 	.word	0x00010007

08007400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007414:	2b01      	cmp	r3, #1
 8007416:	d101      	bne.n	800741c <HAL_TIM_ConfigClockSource+0x1c>
 8007418:	2302      	movs	r3, #2
 800741a:	e0b6      	b.n	800758a <HAL_TIM_ConfigClockSource+0x18a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800743a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800743e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007458:	d03e      	beq.n	80074d8 <HAL_TIM_ConfigClockSource+0xd8>
 800745a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800745e:	f200 8087 	bhi.w	8007570 <HAL_TIM_ConfigClockSource+0x170>
 8007462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007466:	f000 8086 	beq.w	8007576 <HAL_TIM_ConfigClockSource+0x176>
 800746a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746e:	d87f      	bhi.n	8007570 <HAL_TIM_ConfigClockSource+0x170>
 8007470:	2b70      	cmp	r3, #112	; 0x70
 8007472:	d01a      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0xaa>
 8007474:	2b70      	cmp	r3, #112	; 0x70
 8007476:	d87b      	bhi.n	8007570 <HAL_TIM_ConfigClockSource+0x170>
 8007478:	2b60      	cmp	r3, #96	; 0x60
 800747a:	d050      	beq.n	800751e <HAL_TIM_ConfigClockSource+0x11e>
 800747c:	2b60      	cmp	r3, #96	; 0x60
 800747e:	d877      	bhi.n	8007570 <HAL_TIM_ConfigClockSource+0x170>
 8007480:	2b50      	cmp	r3, #80	; 0x50
 8007482:	d03c      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0xfe>
 8007484:	2b50      	cmp	r3, #80	; 0x50
 8007486:	d873      	bhi.n	8007570 <HAL_TIM_ConfigClockSource+0x170>
 8007488:	2b40      	cmp	r3, #64	; 0x40
 800748a:	d058      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x13e>
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d86f      	bhi.n	8007570 <HAL_TIM_ConfigClockSource+0x170>
 8007490:	2b30      	cmp	r3, #48	; 0x30
 8007492:	d064      	beq.n	800755e <HAL_TIM_ConfigClockSource+0x15e>
 8007494:	2b30      	cmp	r3, #48	; 0x30
 8007496:	d86b      	bhi.n	8007570 <HAL_TIM_ConfigClockSource+0x170>
 8007498:	2b20      	cmp	r3, #32
 800749a:	d060      	beq.n	800755e <HAL_TIM_ConfigClockSource+0x15e>
 800749c:	2b20      	cmp	r3, #32
 800749e:	d867      	bhi.n	8007570 <HAL_TIM_ConfigClockSource+0x170>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d05c      	beq.n	800755e <HAL_TIM_ConfigClockSource+0x15e>
 80074a4:	2b10      	cmp	r3, #16
 80074a6:	d05a      	beq.n	800755e <HAL_TIM_ConfigClockSource+0x15e>
 80074a8:	e062      	b.n	8007570 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074ba:	f000 f946 	bl	800774a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	609a      	str	r2, [r3, #8]
      break;
 80074d6:	e04f      	b.n	8007578 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074e8:	f000 f92f 	bl	800774a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074fa:	609a      	str	r2, [r3, #8]
      break;
 80074fc:	e03c      	b.n	8007578 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800750a:	461a      	mov	r2, r3
 800750c:	f000 f8a4 	bl	8007658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2150      	movs	r1, #80	; 0x50
 8007516:	4618      	mov	r0, r3
 8007518:	f000 f8fb 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 800751c:	e02c      	b.n	8007578 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800752a:	461a      	mov	r2, r3
 800752c:	f000 f8c2 	bl	80076b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2160      	movs	r1, #96	; 0x60
 8007536:	4618      	mov	r0, r3
 8007538:	f000 f8eb 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 800753c:	e01c      	b.n	8007578 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800754a:	461a      	mov	r2, r3
 800754c:	f000 f884 	bl	8007658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2140      	movs	r1, #64	; 0x40
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f8db 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 800755c:	e00c      	b.n	8007578 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4619      	mov	r1, r3
 8007568:	4610      	mov	r0, r2
 800756a:	f000 f8d2 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 800756e:	e003      	b.n	8007578 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
      break;
 8007574:	e000      	b.n	8007578 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a29      	ldr	r2, [pc, #164]	; (800764c <TIM_Base_SetConfig+0xb8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_Base_SetConfig+0x20>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b2:	d108      	bne.n	80075c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a20      	ldr	r2, [pc, #128]	; (800764c <TIM_Base_SetConfig+0xb8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00b      	beq.n	80075e6 <TIM_Base_SetConfig+0x52>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d4:	d007      	beq.n	80075e6 <TIM_Base_SetConfig+0x52>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1d      	ldr	r2, [pc, #116]	; (8007650 <TIM_Base_SetConfig+0xbc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_Base_SetConfig+0x52>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1c      	ldr	r2, [pc, #112]	; (8007654 <TIM_Base_SetConfig+0xc0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d108      	bne.n	80075f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a0b      	ldr	r2, [pc, #44]	; (800764c <TIM_Base_SetConfig+0xb8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d007      	beq.n	8007634 <TIM_Base_SetConfig+0xa0>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a0a      	ldr	r2, [pc, #40]	; (8007650 <TIM_Base_SetConfig+0xbc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_Base_SetConfig+0xa0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a09      	ldr	r2, [pc, #36]	; (8007654 <TIM_Base_SetConfig+0xc0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d103      	bne.n	800763c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	615a      	str	r2, [r3, #20]
}
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr
 800764c:	40012c00 	.word	0x40012c00
 8007650:	40014400 	.word	0x40014400
 8007654:	40014800 	.word	0x40014800

08007658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f023 0201 	bic.w	r2, r3, #1
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f023 030a 	bic.w	r3, r3, #10
 8007694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	621a      	str	r2, [r3, #32]
}
 80076aa:	bf00      	nop
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	f023 0210 	bic.w	r2, r3, #16
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	031b      	lsls	r3, r3, #12
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	621a      	str	r2, [r3, #32]
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	bc80      	pop	{r7}
 8007710:	4770      	bx	lr

08007712 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	f043 0307 	orr.w	r3, r3, #7
 8007738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	609a      	str	r2, [r3, #8]
}
 8007740:	bf00      	nop
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800774a:	b480      	push	{r7}
 800774c:	b087      	sub	sp, #28
 800774e:	af00      	add	r7, sp, #0
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	607a      	str	r2, [r7, #4]
 8007756:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007764:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	021a      	lsls	r2, r3, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	431a      	orrs	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4313      	orrs	r3, r2
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	609a      	str	r2, [r3, #8]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr

08007788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007798:	2b01      	cmp	r3, #1
 800779a:	d101      	bne.n	80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800779c:	2302      	movs	r3, #2
 800779e:	e04a      	b.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1e      	ldr	r2, [pc, #120]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d108      	bne.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	4313      	orrs	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a11      	ldr	r2, [pc, #68]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d004      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007808:	d10c      	bne.n	8007824 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	4313      	orrs	r3, r2
 800781a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr
 8007840:	40012c00 	.word	0x40012c00

08007844 <LL_RCC_GetUSARTClockSource>:
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800784c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007850:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	401a      	ands	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	041b      	lsls	r3, r3, #16
 800785c:	4313      	orrs	r3, r2
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr

08007868 <LL_RCC_GetLPUARTClockSource>:
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007874:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4013      	ands	r3, r2
}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	bc80      	pop	{r7}
 8007884:	4770      	bx	lr

08007886 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e042      	b.n	800791e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fa fb32 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2224      	movs	r2, #36	; 0x24
 80078b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0201 	bic.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fd0d 	bl	80082e8 <UART_SetConfig>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e022      	b.n	800791e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 ff75 	bl	80087d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007904:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0201 	orr.w	r2, r2, #1
 8007914:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fffb 	bl	8008912 <UART_CheckIdleState>
 800791c:	4603      	mov	r3, r0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b08a      	sub	sp, #40	; 0x28
 800792a:	af02      	add	r7, sp, #8
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	603b      	str	r3, [r7, #0]
 8007932:	4613      	mov	r3, r2
 8007934:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793c:	2b20      	cmp	r3, #32
 800793e:	d173      	bne.n	8007a28 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_UART_Transmit+0x26>
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e06c      	b.n	8007a2a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2221      	movs	r2, #33	; 0x21
 800795c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007960:	f7fa fd78 	bl	8002454 <HAL_GetTick>
 8007964:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	88fa      	ldrh	r2, [r7, #6]
 800796a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	88fa      	ldrh	r2, [r7, #6]
 8007972:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800797e:	d108      	bne.n	8007992 <HAL_UART_Transmit+0x6c>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	e003      	b.n	800799a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800799a:	e02c      	b.n	80079f6 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2200      	movs	r2, #0
 80079a4:	2180      	movs	r1, #128	; 0x80
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f001 f801 	bl	80089ae <UART_WaitOnFlagUntilTimeout>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e039      	b.n	8007a2a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10b      	bne.n	80079d4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	3302      	adds	r3, #2
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	e007      	b.n	80079e4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	3301      	adds	r3, #1
 80079e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1cc      	bne.n	800799c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2140      	movs	r1, #64	; 0x40
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 ffce 	bl	80089ae <UART_WaitOnFlagUntilTimeout>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e006      	b.n	8007a2a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	e000      	b.n	8007a2a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8007a28:	2302      	movs	r3, #2
  }
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3720      	adds	r7, #32
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b08a      	sub	sp, #40	; 0x28
 8007a36:	af02      	add	r7, sp, #8
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	603b      	str	r3, [r7, #0]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	f040 80b1 	bne.w	8007bb0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <HAL_UART_Receive+0x28>
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e0a9      	b.n	8007bb2 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2222      	movs	r2, #34	; 0x22
 8007a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a74:	f7fa fcee 	bl	8002454 <HAL_GetTick>
 8007a78:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	88fa      	ldrh	r2, [r7, #6]
 8007a7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	88fa      	ldrh	r2, [r7, #6]
 8007a86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a92:	d10e      	bne.n	8007ab2 <HAL_UART_Receive+0x80>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <HAL_UART_Receive+0x76>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007aa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007aa6:	e02d      	b.n	8007b04 <HAL_UART_Receive+0xd2>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	22ff      	movs	r2, #255	; 0xff
 8007aac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ab0:	e028      	b.n	8007b04 <HAL_UART_Receive+0xd2>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10d      	bne.n	8007ad6 <HAL_UART_Receive+0xa4>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d104      	bne.n	8007acc <HAL_UART_Receive+0x9a>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	22ff      	movs	r2, #255	; 0xff
 8007ac6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007aca:	e01b      	b.n	8007b04 <HAL_UART_Receive+0xd2>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	227f      	movs	r2, #127	; 0x7f
 8007ad0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ad4:	e016      	b.n	8007b04 <HAL_UART_Receive+0xd2>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ade:	d10d      	bne.n	8007afc <HAL_UART_Receive+0xca>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <HAL_UART_Receive+0xc0>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	227f      	movs	r2, #127	; 0x7f
 8007aec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007af0:	e008      	b.n	8007b04 <HAL_UART_Receive+0xd2>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	223f      	movs	r2, #63	; 0x3f
 8007af6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007afa:	e003      	b.n	8007b04 <HAL_UART_Receive+0xd2>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b0a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b14:	d108      	bne.n	8007b28 <HAL_UART_Receive+0xf6>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d104      	bne.n	8007b28 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	e003      	b.n	8007b30 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007b30:	e032      	b.n	8007b98 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2120      	movs	r1, #32
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 ff36 	bl	80089ae <UART_WaitOnFlagUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e032      	b.n	8007bb2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10c      	bne.n	8007b6c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	8a7b      	ldrh	r3, [r7, #18]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	3302      	adds	r3, #2
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	e00c      	b.n	8007b86 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	8a7b      	ldrh	r3, [r7, #18]
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	4013      	ands	r3, r2
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	3301      	adds	r3, #1
 8007b84:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1c6      	bne.n	8007b32 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	e000      	b.n	8007bb2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007bb0:	2302      	movs	r3, #2
  }
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08a      	sub	sp, #40	; 0x28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d137      	bne.n	8007c44 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_UART_Receive_DMA+0x24>
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e030      	b.n	8007c46 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <HAL_UART_Receive_DMA+0x94>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d01f      	beq.n	8007c34 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d018      	beq.n	8007c34 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c16:	627b      	str	r3, [r7, #36]	; 0x24
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	623b      	str	r3, [r7, #32]
 8007c22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	69f9      	ldr	r1, [r7, #28]
 8007c26:	6a3a      	ldr	r2, [r7, #32]
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e6      	bne.n	8007c02 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007c34:	88fb      	ldrh	r3, [r7, #6]
 8007c36:	461a      	mov	r2, r3
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 ff80 	bl	8008b40 <UART_Start_Receive_DMA>
 8007c40:	4603      	mov	r3, r0
 8007c42:	e000      	b.n	8007c46 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c44:	2302      	movs	r3, #2
  }
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3728      	adds	r7, #40	; 0x28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	40008000 	.word	0x40008000

08007c54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b0ba      	sub	sp, #232	; 0xe8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c82:	4013      	ands	r3, r2
 8007c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d11b      	bne.n	8007cc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d015      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d105      	bne.n	8007cb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d009      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 82e3 	beq.w	8008284 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
      }
      return;
 8007cc6:	e2dd      	b.n	8008284 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 8123 	beq.w	8007f18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007cd6:	4b8d      	ldr	r3, [pc, #564]	; (8007f0c <HAL_UART_IRQHandler+0x2b8>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d106      	bne.n	8007cec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007cde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007ce2:	4b8b      	ldr	r3, [pc, #556]	; (8007f10 <HAL_UART_IRQHandler+0x2bc>)
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 8116 	beq.w	8007f18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d011      	beq.n	8007d1c <HAL_UART_IRQHandler+0xc8>
 8007cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d12:	f043 0201 	orr.w	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d011      	beq.n	8007d4c <HAL_UART_IRQHandler+0xf8>
 8007d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d42:	f043 0204 	orr.w	r2, r3, #4
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d011      	beq.n	8007d7c <HAL_UART_IRQHandler+0x128>
 8007d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d72:	f043 0202 	orr.w	r2, r3, #2
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d80:	f003 0308 	and.w	r3, r3, #8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d017      	beq.n	8007db8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d105      	bne.n	8007da0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d98:	4b5c      	ldr	r3, [pc, #368]	; (8007f0c <HAL_UART_IRQHandler+0x2b8>)
 8007d9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2208      	movs	r2, #8
 8007da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dae:	f043 0208 	orr.w	r2, r3, #8
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d012      	beq.n	8007dea <HAL_UART_IRQHandler+0x196>
 8007dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00c      	beq.n	8007dea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de0:	f043 0220 	orr.w	r2, r3, #32
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8249 	beq.w	8008288 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d013      	beq.n	8007e2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d105      	bne.n	8007e1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d007      	beq.n	8007e2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	d005      	beq.n	8007e4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d054      	beq.n	8007ef8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 ff5c 	bl	8008d0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d146      	bne.n	8007ef0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3308      	adds	r3, #8
 8007e68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3308      	adds	r3, #8
 8007e8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1d9      	bne.n	8007e62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d017      	beq.n	8007ee8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ebe:	4a15      	ldr	r2, [pc, #84]	; (8007f14 <HAL_UART_IRQHandler+0x2c0>)
 8007ec0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fb fa8b 	bl	80033e4 <HAL_DMA_Abort_IT>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d019      	beq.n	8007f08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee6:	e00f      	b.n	8007f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f9e9 	bl	80082c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eee:	e00b      	b.n	8007f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f9e5 	bl	80082c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef6:	e007      	b.n	8007f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f9e1 	bl	80082c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007f06:	e1bf      	b.n	8008288 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f08:	bf00      	nop
    return;
 8007f0a:	e1bd      	b.n	8008288 <HAL_UART_IRQHandler+0x634>
 8007f0c:	10000001 	.word	0x10000001
 8007f10:	04000120 	.word	0x04000120
 8007f14:	08008fc1 	.word	0x08008fc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	f040 8153 	bne.w	80081c8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f26:	f003 0310 	and.w	r3, r3, #16
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 814c 	beq.w	80081c8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f34:	f003 0310 	and.w	r3, r3, #16
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 8145 	beq.w	80081c8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2210      	movs	r2, #16
 8007f44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f50:	2b40      	cmp	r3, #64	; 0x40
 8007f52:	f040 80bb 	bne.w	80080cc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 818f 	beq.w	800828c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	f080 8187 	bcs.w	800828c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f040 8087 	bne.w	80080aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007fca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1da      	bne.n	8007f9c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3308      	adds	r3, #8
 8007fec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3308      	adds	r3, #8
 8008006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800800a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800800e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008012:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800801c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e1      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3308      	adds	r3, #8
 8008028:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008046:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008048:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800804c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e3      	bne.n	8008022 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008078:	f023 0310 	bic.w	r3, r3, #16
 800807c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	461a      	mov	r2, r3
 8008086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800808a:	65bb      	str	r3, [r7, #88]	; 0x58
 800808c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e4      	bne.n	8008068 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fb f93f 	bl	8003328 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2202      	movs	r2, #2
 80080ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080bc:	b29b      	uxth	r3, r3
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f904 	bl	80082d2 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080ca:	e0df      	b.n	800828c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080d8:	b29b      	uxth	r3, r3
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 80d1 	beq.w	8008290 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80080ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 80cc 	beq.w	8008290 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800810c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	461a      	mov	r2, r3
 8008116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800811a:	647b      	str	r3, [r7, #68]	; 0x44
 800811c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e4      	bne.n	80080f8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3308      	adds	r3, #8
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	623b      	str	r3, [r7, #32]
   return(result);
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008144:	f023 0301 	bic.w	r3, r3, #1
 8008148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3308      	adds	r3, #8
 8008152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008156:	633a      	str	r2, [r7, #48]	; 0x30
 8008158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800815c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e1      	bne.n	800812e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	60fb      	str	r3, [r7, #12]
   return(result);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0310 	bic.w	r3, r3, #16
 8008192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081a0:	61fb      	str	r3, [r7, #28]
 80081a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	69b9      	ldr	r1, [r7, #24]
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	617b      	str	r3, [r7, #20]
   return(result);
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e4      	bne.n	800817e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f886 	bl	80082d2 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081c6:	e063      	b.n	8008290 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00e      	beq.n	80081f2 <HAL_UART_IRQHandler+0x59e>
 80081d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d008      	beq.n	80081f2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 ff29 	bl	8009042 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081f0:	e051      	b.n	8008296 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d014      	beq.n	8008228 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800820a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800820e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d008      	beq.n	8008228 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800821a:	2b00      	cmp	r3, #0
 800821c:	d03a      	beq.n	8008294 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	4798      	blx	r3
    }
    return;
 8008226:	e035      	b.n	8008294 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d009      	beq.n	8008248 <HAL_UART_IRQHandler+0x5f4>
 8008234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fed3 	bl	8008fec <UART_EndTransmit_IT>
    return;
 8008246:	e026      	b.n	8008296 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d009      	beq.n	8008268 <HAL_UART_IRQHandler+0x614>
 8008254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008258:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 ff00 	bl	8009066 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008266:	e016      	b.n	8008296 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d010      	beq.n	8008296 <HAL_UART_IRQHandler+0x642>
 8008274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008278:	2b00      	cmp	r3, #0
 800827a:	da0c      	bge.n	8008296 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fee9 	bl	8009054 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008282:	e008      	b.n	8008296 <HAL_UART_IRQHandler+0x642>
      return;
 8008284:	bf00      	nop
 8008286:	e006      	b.n	8008296 <HAL_UART_IRQHandler+0x642>
    return;
 8008288:	bf00      	nop
 800828a:	e004      	b.n	8008296 <HAL_UART_IRQHandler+0x642>
      return;
 800828c:	bf00      	nop
 800828e:	e002      	b.n	8008296 <HAL_UART_IRQHandler+0x642>
      return;
 8008290:	bf00      	nop
 8008292:	e000      	b.n	8008296 <HAL_UART_IRQHandler+0x642>
    return;
 8008294:	bf00      	nop
  }
}
 8008296:	37e8      	adds	r7, #232	; 0xe8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bc80      	pop	{r7}
 80082ac:	4770      	bx	lr

080082ae <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr

080082c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr

080082d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr

080082e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082ec:	b08c      	sub	sp, #48	; 0x30
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	431a      	orrs	r2, r3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	431a      	orrs	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	4313      	orrs	r3, r2
 800830e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4b94      	ldr	r3, [pc, #592]	; (8008568 <UART_SetConfig+0x280>)
 8008318:	4013      	ands	r3, r2
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008320:	430b      	orrs	r3, r1
 8008322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a89      	ldr	r2, [pc, #548]	; (800856c <UART_SetConfig+0x284>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d004      	beq.n	8008354 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008350:	4313      	orrs	r3, r2
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800835e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008368:	430b      	orrs	r3, r1
 800836a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	f023 010f 	bic.w	r1, r3, #15
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a7a      	ldr	r2, [pc, #488]	; (8008570 <UART_SetConfig+0x288>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d127      	bne.n	80083dc <UART_SetConfig+0xf4>
 800838c:	2003      	movs	r0, #3
 800838e:	f7ff fa59 	bl	8007844 <LL_RCC_GetUSARTClockSource>
 8008392:	4603      	mov	r3, r0
 8008394:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008398:	2b03      	cmp	r3, #3
 800839a:	d81b      	bhi.n	80083d4 <UART_SetConfig+0xec>
 800839c:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <UART_SetConfig+0xbc>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083c5 	.word	0x080083c5
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083cd 	.word	0x080083cd
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ba:	e080      	b.n	80084be <UART_SetConfig+0x1d6>
 80083bc:	2302      	movs	r3, #2
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c2:	e07c      	b.n	80084be <UART_SetConfig+0x1d6>
 80083c4:	2304      	movs	r3, #4
 80083c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ca:	e078      	b.n	80084be <UART_SetConfig+0x1d6>
 80083cc:	2308      	movs	r3, #8
 80083ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d2:	e074      	b.n	80084be <UART_SetConfig+0x1d6>
 80083d4:	2310      	movs	r3, #16
 80083d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083da:	e070      	b.n	80084be <UART_SetConfig+0x1d6>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a64      	ldr	r2, [pc, #400]	; (8008574 <UART_SetConfig+0x28c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d138      	bne.n	8008458 <UART_SetConfig+0x170>
 80083e6:	200c      	movs	r0, #12
 80083e8:	f7ff fa2c 	bl	8007844 <LL_RCC_GetUSARTClockSource>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80083f2:	2b0c      	cmp	r3, #12
 80083f4:	d82c      	bhi.n	8008450 <UART_SetConfig+0x168>
 80083f6:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <UART_SetConfig+0x114>)
 80083f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fc:	08008431 	.word	0x08008431
 8008400:	08008451 	.word	0x08008451
 8008404:	08008451 	.word	0x08008451
 8008408:	08008451 	.word	0x08008451
 800840c:	08008441 	.word	0x08008441
 8008410:	08008451 	.word	0x08008451
 8008414:	08008451 	.word	0x08008451
 8008418:	08008451 	.word	0x08008451
 800841c:	08008439 	.word	0x08008439
 8008420:	08008451 	.word	0x08008451
 8008424:	08008451 	.word	0x08008451
 8008428:	08008451 	.word	0x08008451
 800842c:	08008449 	.word	0x08008449
 8008430:	2300      	movs	r3, #0
 8008432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008436:	e042      	b.n	80084be <UART_SetConfig+0x1d6>
 8008438:	2302      	movs	r3, #2
 800843a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800843e:	e03e      	b.n	80084be <UART_SetConfig+0x1d6>
 8008440:	2304      	movs	r3, #4
 8008442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008446:	e03a      	b.n	80084be <UART_SetConfig+0x1d6>
 8008448:	2308      	movs	r3, #8
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800844e:	e036      	b.n	80084be <UART_SetConfig+0x1d6>
 8008450:	2310      	movs	r3, #16
 8008452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008456:	e032      	b.n	80084be <UART_SetConfig+0x1d6>
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a43      	ldr	r2, [pc, #268]	; (800856c <UART_SetConfig+0x284>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d12a      	bne.n	80084b8 <UART_SetConfig+0x1d0>
 8008462:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008466:	f7ff f9ff 	bl	8007868 <LL_RCC_GetLPUARTClockSource>
 800846a:	4603      	mov	r3, r0
 800846c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008470:	d01a      	beq.n	80084a8 <UART_SetConfig+0x1c0>
 8008472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008476:	d81b      	bhi.n	80084b0 <UART_SetConfig+0x1c8>
 8008478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800847c:	d00c      	beq.n	8008498 <UART_SetConfig+0x1b0>
 800847e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008482:	d815      	bhi.n	80084b0 <UART_SetConfig+0x1c8>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <UART_SetConfig+0x1a8>
 8008488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848c:	d008      	beq.n	80084a0 <UART_SetConfig+0x1b8>
 800848e:	e00f      	b.n	80084b0 <UART_SetConfig+0x1c8>
 8008490:	2300      	movs	r3, #0
 8008492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008496:	e012      	b.n	80084be <UART_SetConfig+0x1d6>
 8008498:	2302      	movs	r3, #2
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800849e:	e00e      	b.n	80084be <UART_SetConfig+0x1d6>
 80084a0:	2304      	movs	r3, #4
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084a6:	e00a      	b.n	80084be <UART_SetConfig+0x1d6>
 80084a8:	2308      	movs	r3, #8
 80084aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ae:	e006      	b.n	80084be <UART_SetConfig+0x1d6>
 80084b0:	2310      	movs	r3, #16
 80084b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b6:	e002      	b.n	80084be <UART_SetConfig+0x1d6>
 80084b8:	2310      	movs	r3, #16
 80084ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a2a      	ldr	r2, [pc, #168]	; (800856c <UART_SetConfig+0x284>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	f040 80a4 	bne.w	8008612 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d823      	bhi.n	800851a <UART_SetConfig+0x232>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <UART_SetConfig+0x1f0>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	0800851b 	.word	0x0800851b
 80084e0:	08008505 	.word	0x08008505
 80084e4:	0800851b 	.word	0x0800851b
 80084e8:	0800850b 	.word	0x0800850b
 80084ec:	0800851b 	.word	0x0800851b
 80084f0:	0800851b 	.word	0x0800851b
 80084f4:	0800851b 	.word	0x0800851b
 80084f8:	08008513 	.word	0x08008513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084fc:	f7fc fb32 	bl	8004b64 <HAL_RCC_GetPCLK1Freq>
 8008500:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008502:	e010      	b.n	8008526 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008504:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <UART_SetConfig+0x290>)
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008508:	e00d      	b.n	8008526 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800850a:	f7fc fa77 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800850e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008510:	e009      	b.n	8008526 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008518:	e005      	b.n	8008526 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008524:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8137 	beq.w	800879c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	4a12      	ldr	r2, [pc, #72]	; (800857c <UART_SetConfig+0x294>)
 8008534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008538:	461a      	mov	r2, r3
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008540:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	4613      	mov	r3, r2
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	4413      	add	r3, r2
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	429a      	cmp	r2, r3
 8008550:	d305      	bcc.n	800855e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	429a      	cmp	r2, r3
 800855c:	d910      	bls.n	8008580 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008564:	e11a      	b.n	800879c <UART_SetConfig+0x4b4>
 8008566:	bf00      	nop
 8008568:	cfff69f3 	.word	0xcfff69f3
 800856c:	40008000 	.word	0x40008000
 8008570:	40013800 	.word	0x40013800
 8008574:	40004400 	.word	0x40004400
 8008578:	00f42400 	.word	0x00f42400
 800857c:	0800ddd8 	.word	0x0800ddd8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	2200      	movs	r2, #0
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	60fa      	str	r2, [r7, #12]
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	4a8e      	ldr	r2, [pc, #568]	; (80087c8 <UART_SetConfig+0x4e0>)
 800858e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008592:	b29b      	uxth	r3, r3
 8008594:	2200      	movs	r2, #0
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	607a      	str	r2, [r7, #4]
 800859a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800859e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085a2:	f7f7 fe3d 	bl	8000220 <__aeabi_uldivmod>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4610      	mov	r0, r2
 80085ac:	4619      	mov	r1, r3
 80085ae:	f04f 0200 	mov.w	r2, #0
 80085b2:	f04f 0300 	mov.w	r3, #0
 80085b6:	020b      	lsls	r3, r1, #8
 80085b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085bc:	0202      	lsls	r2, r0, #8
 80085be:	6979      	ldr	r1, [r7, #20]
 80085c0:	6849      	ldr	r1, [r1, #4]
 80085c2:	0849      	lsrs	r1, r1, #1
 80085c4:	2000      	movs	r0, #0
 80085c6:	460c      	mov	r4, r1
 80085c8:	4605      	mov	r5, r0
 80085ca:	eb12 0804 	adds.w	r8, r2, r4
 80085ce:	eb43 0905 	adc.w	r9, r3, r5
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	469a      	mov	sl, r3
 80085da:	4693      	mov	fp, r2
 80085dc:	4652      	mov	r2, sl
 80085de:	465b      	mov	r3, fp
 80085e0:	4640      	mov	r0, r8
 80085e2:	4649      	mov	r1, r9
 80085e4:	f7f7 fe1c 	bl	8000220 <__aeabi_uldivmod>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4613      	mov	r3, r2
 80085ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f6:	d308      	bcc.n	800860a <UART_SetConfig+0x322>
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085fe:	d204      	bcs.n	800860a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6a3a      	ldr	r2, [r7, #32]
 8008606:	60da      	str	r2, [r3, #12]
 8008608:	e0c8      	b.n	800879c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008610:	e0c4      	b.n	800879c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800861a:	d167      	bne.n	80086ec <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800861c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008620:	2b08      	cmp	r3, #8
 8008622:	d828      	bhi.n	8008676 <UART_SetConfig+0x38e>
 8008624:	a201      	add	r2, pc, #4	; (adr r2, 800862c <UART_SetConfig+0x344>)
 8008626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862a:	bf00      	nop
 800862c:	08008651 	.word	0x08008651
 8008630:	08008659 	.word	0x08008659
 8008634:	08008661 	.word	0x08008661
 8008638:	08008677 	.word	0x08008677
 800863c:	08008667 	.word	0x08008667
 8008640:	08008677 	.word	0x08008677
 8008644:	08008677 	.word	0x08008677
 8008648:	08008677 	.word	0x08008677
 800864c:	0800866f 	.word	0x0800866f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008650:	f7fc fa88 	bl	8004b64 <HAL_RCC_GetPCLK1Freq>
 8008654:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008656:	e014      	b.n	8008682 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008658:	f7fc fa96 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 800865c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800865e:	e010      	b.n	8008682 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008660:	4b5a      	ldr	r3, [pc, #360]	; (80087cc <UART_SetConfig+0x4e4>)
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008664:	e00d      	b.n	8008682 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008666:	f7fc f9c9 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800866a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800866c:	e009      	b.n	8008682 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800866e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008672:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008674:	e005      	b.n	8008682 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 8089 	beq.w	800879c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	4a4e      	ldr	r2, [pc, #312]	; (80087c8 <UART_SetConfig+0x4e0>)
 8008690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008694:	461a      	mov	r2, r3
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	fbb3 f3f2 	udiv	r3, r3, r2
 800869c:	005a      	lsls	r2, r3, #1
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	085b      	lsrs	r3, r3, #1
 80086a4:	441a      	add	r2, r3
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	2b0f      	cmp	r3, #15
 80086b4:	d916      	bls.n	80086e4 <UART_SetConfig+0x3fc>
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086bc:	d212      	bcs.n	80086e4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	f023 030f 	bic.w	r3, r3, #15
 80086c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	8bfb      	ldrh	r3, [r7, #30]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	8bfa      	ldrh	r2, [r7, #30]
 80086e0:	60da      	str	r2, [r3, #12]
 80086e2:	e05b      	b.n	800879c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086ea:	e057      	b.n	800879c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d828      	bhi.n	8008746 <UART_SetConfig+0x45e>
 80086f4:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <UART_SetConfig+0x414>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008729 	.word	0x08008729
 8008704:	08008731 	.word	0x08008731
 8008708:	08008747 	.word	0x08008747
 800870c:	08008737 	.word	0x08008737
 8008710:	08008747 	.word	0x08008747
 8008714:	08008747 	.word	0x08008747
 8008718:	08008747 	.word	0x08008747
 800871c:	0800873f 	.word	0x0800873f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008720:	f7fc fa20 	bl	8004b64 <HAL_RCC_GetPCLK1Freq>
 8008724:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008726:	e014      	b.n	8008752 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008728:	f7fc fa2e 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 800872c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800872e:	e010      	b.n	8008752 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008730:	4b26      	ldr	r3, [pc, #152]	; (80087cc <UART_SetConfig+0x4e4>)
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008734:	e00d      	b.n	8008752 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008736:	f7fc f961 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800873a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800873c:	e009      	b.n	8008752 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800873e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008744:	e005      	b.n	8008752 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008750:	bf00      	nop
    }

    if (pclk != 0U)
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d021      	beq.n	800879c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	4a1a      	ldr	r2, [pc, #104]	; (80087c8 <UART_SetConfig+0x4e0>)
 800875e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008762:	461a      	mov	r2, r3
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	fbb3 f2f2 	udiv	r2, r3, r2
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	085b      	lsrs	r3, r3, #1
 8008770:	441a      	add	r2, r3
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	fbb2 f3f3 	udiv	r3, r2, r3
 800877a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	2b0f      	cmp	r3, #15
 8008780:	d909      	bls.n	8008796 <UART_SetConfig+0x4ae>
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008788:	d205      	bcs.n	8008796 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	b29a      	uxth	r2, r3
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60da      	str	r2, [r3, #12]
 8008794:	e002      	b.n	800879c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2201      	movs	r2, #1
 80087a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2200      	movs	r2, #0
 80087b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2200      	movs	r2, #0
 80087b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80087b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3730      	adds	r7, #48	; 0x30
 80087c0:	46bd      	mov	sp, r7
 80087c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087c6:	bf00      	nop
 80087c8:	0800ddd8 	.word	0x0800ddd8
 80087cc:	00f42400 	.word	0x00f42400

080087d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	f003 0308 	and.w	r3, r3, #8
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01a      	beq.n	80088e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ce:	d10a      	bne.n	80088e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	605a      	str	r2, [r3, #4]
  }
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	bc80      	pop	{r7}
 8008910:	4770      	bx	lr

08008912 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b086      	sub	sp, #24
 8008916:	af02      	add	r7, sp, #8
 8008918:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008922:	f7f9 fd97 	bl	8002454 <HAL_GetTick>
 8008926:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0308 	and.w	r3, r3, #8
 8008932:	2b08      	cmp	r3, #8
 8008934:	d10e      	bne.n	8008954 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008936:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f832 	bl	80089ae <UART_WaitOnFlagUntilTimeout>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e028      	b.n	80089a6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0304 	and.w	r3, r3, #4
 800895e:	2b04      	cmp	r3, #4
 8008960:	d10e      	bne.n	8008980 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008962:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f81c 	bl	80089ae <UART_WaitOnFlagUntilTimeout>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e012      	b.n	80089a6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2220      	movs	r2, #32
 8008984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b09c      	sub	sp, #112	; 0x70
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	603b      	str	r3, [r7, #0]
 80089ba:	4613      	mov	r3, r2
 80089bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089be:	e0a9      	b.n	8008b14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089c6:	f000 80a5 	beq.w	8008b14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ca:	f7f9 fd43 	bl	8002454 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d302      	bcc.n	80089e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80089da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d140      	bne.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089f4:	667b      	str	r3, [r7, #100]	; 0x64
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e6      	bne.n	80089e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3308      	adds	r3, #8
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	f023 0301 	bic.w	r3, r3, #1
 8008a28:	663b      	str	r3, [r7, #96]	; 0x60
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3308      	adds	r3, #8
 8008a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a32:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e5      	bne.n	8008a12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e069      	b.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d051      	beq.n	8008b14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a7e:	d149      	bne.n	8008b14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e6      	bne.n	8008a8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	613b      	str	r3, [r7, #16]
   return(result);
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f023 0301 	bic.w	r3, r3, #1
 8008ad2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008adc:	623a      	str	r2, [r7, #32]
 8008ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	69f9      	ldr	r1, [r7, #28]
 8008ae2:	6a3a      	ldr	r2, [r7, #32]
 8008ae4:	e841 2300 	strex	r3, r2, [r1]
 8008ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e5      	bne.n	8008abc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2220      	movs	r2, #32
 8008af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2220      	movs	r2, #32
 8008afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2220      	movs	r2, #32
 8008b04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e010      	b.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	69da      	ldr	r2, [r3, #28]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	bf0c      	ite	eq
 8008b24:	2301      	moveq	r3, #1
 8008b26:	2300      	movne	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	f43f af46 	beq.w	80089c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3770      	adds	r7, #112	; 0x70
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b096      	sub	sp, #88	; 0x58
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	88fa      	ldrh	r2, [r7, #6]
 8008b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2222      	movs	r2, #34	; 0x22
 8008b68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d02d      	beq.n	8008bd2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b7c:	4a40      	ldr	r2, [pc, #256]	; (8008c80 <UART_Start_Receive_DMA+0x140>)
 8008b7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b86:	4a3f      	ldr	r2, [pc, #252]	; (8008c84 <UART_Start_Receive_DMA+0x144>)
 8008b88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b90:	4a3d      	ldr	r2, [pc, #244]	; (8008c88 <UART_Start_Receive_DMA+0x148>)
 8008b92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3324      	adds	r3, #36	; 0x24
 8008baa:	4619      	mov	r1, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
 8008bb4:	f7fa fb3a 	bl	800322c <HAL_DMA_Start_IT>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2210      	movs	r2, #16
 8008bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e051      	b.n	8008c76 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d018      	beq.n	8008c0c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bee:	657b      	str	r3, [r7, #84]	; 0x54
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bfa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e6      	bne.n	8008bda <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3308      	adds	r3, #8
 8008c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	653b      	str	r3, [r7, #80]	; 0x50
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3308      	adds	r3, #8
 8008c2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c2c:	637a      	str	r2, [r7, #52]	; 0x34
 8008c2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e5      	bne.n	8008c0c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3308      	adds	r3, #8
 8008c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	e853 3f00 	ldrex	r3, [r3]
 8008c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c60:	623a      	str	r2, [r7, #32]
 8008c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	69f9      	ldr	r1, [r7, #28]
 8008c66:	6a3a      	ldr	r2, [r7, #32]
 8008c68:	e841 2300 	strex	r3, r2, [r1]
 8008c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e5      	bne.n	8008c40 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3758      	adds	r7, #88	; 0x58
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	08008dd7 	.word	0x08008dd7
 8008c84:	08008f03 	.word	0x08008f03
 8008c88:	08008f41 	.word	0x08008f41

08008c8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b08f      	sub	sp, #60	; 0x3c
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cb4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e6      	bne.n	8008c94 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce6:	61ba      	str	r2, [r7, #24]
 8008ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6979      	ldr	r1, [r7, #20]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e5      	bne.n	8008cc6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008d02:	bf00      	nop
 8008d04:	373c      	adds	r7, #60	; 0x3c
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr

08008d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b095      	sub	sp, #84	; 0x54
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d32:	643b      	str	r3, [r7, #64]	; 0x40
 8008d34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e6      	bne.n	8008d14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d5c:	f023 0301 	bic.w	r3, r3, #1
 8008d60:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3308      	adds	r3, #8
 8008d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e3      	bne.n	8008d46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d118      	bne.n	8008db8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f023 0310 	bic.w	r3, r3, #16
 8008d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da4:	61bb      	str	r3, [r7, #24]
 8008da6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	6979      	ldr	r1, [r7, #20]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	613b      	str	r3, [r7, #16]
   return(result);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e6      	bne.n	8008d86 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008dcc:	bf00      	nop
 8008dce:	3754      	adds	r7, #84	; 0x54
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr

08008dd6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b09c      	sub	sp, #112	; 0x70
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d171      	bne.n	8008ed6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e02:	e853 3f00 	ldrex	r3, [r3]
 8008e06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	461a      	mov	r2, r3
 8008e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e18:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e20:	e841 2300 	strex	r3, r2, [r1]
 8008e24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e6      	bne.n	8008dfa <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3308      	adds	r3, #8
 8008e32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3e:	f023 0301 	bic.w	r3, r3, #1
 8008e42:	667b      	str	r3, [r7, #100]	; 0x64
 8008e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3308      	adds	r3, #8
 8008e4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e4c:	647a      	str	r2, [r7, #68]	; 0x44
 8008e4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e54:	e841 2300 	strex	r3, r2, [r1]
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e5      	bne.n	8008e2c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3308      	adds	r3, #8
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	623b      	str	r3, [r7, #32]
   return(result);
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e76:	663b      	str	r3, [r7, #96]	; 0x60
 8008e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3308      	adds	r3, #8
 8008e7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e80:	633a      	str	r2, [r7, #48]	; 0x30
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e5      	bne.n	8008e60 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e96:	2220      	movs	r2, #32
 8008e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d118      	bne.n	8008ed6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f023 0310 	bic.w	r3, r3, #16
 8008eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ec2:	61fb      	str	r3, [r7, #28]
 8008ec4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	69b9      	ldr	r1, [r7, #24]
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	617b      	str	r3, [r7, #20]
   return(result);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e6      	bne.n	8008ea4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed8:	2200      	movs	r2, #0
 8008eda:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d107      	bne.n	8008ef4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008eea:	4619      	mov	r1, r3
 8008eec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008eee:	f7ff f9f0 	bl	80082d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ef2:	e002      	b.n	8008efa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008ef4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ef6:	f7f8 f84d 	bl	8000f94 <HAL_UART_RxCpltCallback>
}
 8008efa:	bf00      	nop
 8008efc:	3770      	adds	r7, #112	; 0x70
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2201      	movs	r2, #1
 8008f14:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d109      	bne.n	8008f32 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f24:	085b      	lsrs	r3, r3, #1
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	4619      	mov	r1, r3
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f7ff f9d1 	bl	80082d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f30:	e002      	b.n	8008f38 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7ff f9bb 	bl	80082ae <HAL_UART_RxHalfCpltCallback>
}
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f54:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f5c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f68:	2b80      	cmp	r3, #128	; 0x80
 8008f6a:	d109      	bne.n	8008f80 <UART_DMAError+0x40>
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	2b21      	cmp	r3, #33	; 0x21
 8008f70:	d106      	bne.n	8008f80 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008f7a:	6978      	ldr	r0, [r7, #20]
 8008f7c:	f7ff fe86 	bl	8008c8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8a:	2b40      	cmp	r3, #64	; 0x40
 8008f8c:	d109      	bne.n	8008fa2 <UART_DMAError+0x62>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b22      	cmp	r3, #34	; 0x22
 8008f92:	d106      	bne.n	8008fa2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008f9c:	6978      	ldr	r0, [r7, #20]
 8008f9e:	f7ff feb5 	bl	8008d0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa8:	f043 0210 	orr.w	r2, r3, #16
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fb2:	6978      	ldr	r0, [r7, #20]
 8008fb4:	f7ff f984 	bl	80082c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fb8:	bf00      	nop
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff f96e 	bl	80082c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fe4:	bf00      	nop
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	60bb      	str	r3, [r7, #8]
   return(result);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009008:	61fb      	str	r3, [r7, #28]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	61bb      	str	r3, [r7, #24]
 8009014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6979      	ldr	r1, [r7, #20]
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	613b      	str	r3, [r7, #16]
   return(result);
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e6      	bne.n	8008ff4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2220      	movs	r2, #32
 800902a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff f931 	bl	800829c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800903a:	bf00      	nop
 800903c:	3720      	adds	r7, #32
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800904a:	bf00      	nop
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	bc80      	pop	{r7}
 8009052:	4770      	bx	lr

08009054 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr

08009066 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr

08009078 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_UARTEx_DisableFifoMode+0x16>
 800908a:	2302      	movs	r3, #2
 800908c:	e027      	b.n	80090de <HAL_UARTEx_DisableFifoMode+0x66>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2224      	movs	r2, #36	; 0x24
 800909a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0201 	bic.w	r2, r2, #1
 80090b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2220      	movs	r2, #32
 80090d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bc80      	pop	{r7}
 80090e6:	4770      	bx	lr

080090e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e02d      	b.n	800915c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2224      	movs	r2, #36	; 0x24
 800910c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f84f 	bl	80091e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2220      	movs	r2, #32
 800914e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009178:	2302      	movs	r3, #2
 800917a:	e02d      	b.n	80091d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2224      	movs	r2, #36	; 0x24
 8009188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0201 	bic.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f811 	bl	80091e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d108      	bne.n	8009202 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009200:	e031      	b.n	8009266 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009202:	2308      	movs	r3, #8
 8009204:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009206:	2308      	movs	r3, #8
 8009208:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	0e5b      	lsrs	r3, r3, #25
 8009212:	b2db      	uxtb	r3, r3
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	0f5b      	lsrs	r3, r3, #29
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	7b3a      	ldrb	r2, [r7, #12]
 800922e:	4910      	ldr	r1, [pc, #64]	; (8009270 <UARTEx_SetNbDataToProcess+0x90>)
 8009230:	5c8a      	ldrb	r2, [r1, r2]
 8009232:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009236:	7b3a      	ldrb	r2, [r7, #12]
 8009238:	490e      	ldr	r1, [pc, #56]	; (8009274 <UARTEx_SetNbDataToProcess+0x94>)
 800923a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800923c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009240:	b29a      	uxth	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	7b7a      	ldrb	r2, [r7, #13]
 800924c:	4908      	ldr	r1, [pc, #32]	; (8009270 <UARTEx_SetNbDataToProcess+0x90>)
 800924e:	5c8a      	ldrb	r2, [r1, r2]
 8009250:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009254:	7b7a      	ldrb	r2, [r7, #13]
 8009256:	4907      	ldr	r1, [pc, #28]	; (8009274 <UARTEx_SetNbDataToProcess+0x94>)
 8009258:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800925a:	fb93 f3f2 	sdiv	r3, r3, r2
 800925e:	b29a      	uxth	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009266:	bf00      	nop
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr
 8009270:	0800ddf0 	.word	0x0800ddf0
 8009274:	0800ddf8 	.word	0x0800ddf8

08009278 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af02      	add	r7, sp, #8
 800927e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8009280:	4a24      	ldr	r2, [pc, #144]	; (8009314 <RadioInit+0x9c>)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8009286:	4b24      	ldr	r3, [pc, #144]	; (8009318 <RadioInit+0xa0>)
 8009288:	2200      	movs	r2, #0
 800928a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800928c:	4b22      	ldr	r3, [pc, #136]	; (8009318 <RadioInit+0xa0>)
 800928e:	2200      	movs	r2, #0
 8009290:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8009292:	4b21      	ldr	r3, [pc, #132]	; (8009318 <RadioInit+0xa0>)
 8009294:	2200      	movs	r2, #0
 8009296:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009298:	4b1f      	ldr	r3, [pc, #124]	; (8009318 <RadioInit+0xa0>)
 800929a:	2200      	movs	r2, #0
 800929c:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800929e:	481f      	ldr	r0, [pc, #124]	; (800931c <RadioInit+0xa4>)
 80092a0:	f001 ff88 	bl	800b1b4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80092a4:	4b1c      	ldr	r3, [pc, #112]	; (8009318 <RadioInit+0xa0>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80092aa:	4b1b      	ldr	r3, [pc, #108]	; (8009318 <RadioInit+0xa0>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80092b0:	f002 fa1c 	bl	800b6ec <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80092b4:	2100      	movs	r1, #0
 80092b6:	2000      	movs	r0, #0
 80092b8:	f002 fde8 	bl	800be8c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80092bc:	2204      	movs	r2, #4
 80092be:	2100      	movs	r1, #0
 80092c0:	2001      	movs	r0, #1
 80092c2:	f002 fba5 	bl	800ba10 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80092c6:	2300      	movs	r3, #0
 80092c8:	2200      	movs	r2, #0
 80092ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80092ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80092d2:	f002 fad5 	bl	800b880 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80092d6:	f000 fe91 	bl	8009ffc <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80092da:	2300      	movs	r3, #0
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	4b10      	ldr	r3, [pc, #64]	; (8009320 <RadioInit+0xa8>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80092e6:	480f      	ldr	r0, [pc, #60]	; (8009324 <RadioInit+0xac>)
 80092e8:	f003 fb1e 	bl	800c928 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80092ec:	2300      	movs	r3, #0
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <RadioInit+0xb0>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80092f8:	480c      	ldr	r0, [pc, #48]	; (800932c <RadioInit+0xb4>)
 80092fa:	f003 fb15 	bl	800c928 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80092fe:	4809      	ldr	r0, [pc, #36]	; (8009324 <RadioInit+0xac>)
 8009300:	f003 fbb6 	bl	800ca70 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8009304:	4809      	ldr	r0, [pc, #36]	; (800932c <RadioInit+0xb4>)
 8009306:	f003 fbb3 	bl	800ca70 <UTIL_TIMER_Stop>
}
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	2000074c 	.word	0x2000074c
 8009318:	20000750 	.word	0x20000750
 800931c:	0800a3f5 	.word	0x0800a3f5
 8009320:	0800a37d 	.word	0x0800a37d
 8009324:	200007ac 	.word	0x200007ac
 8009328:	0800a391 	.word	0x0800a391
 800932c:	200007c4 	.word	0x200007c4

08009330 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8009334:	f001 ff86 	bl	800b244 <SUBGRF_GetOperatingMode>
 8009338:	4603      	mov	r3, r0
 800933a:	2b07      	cmp	r3, #7
 800933c:	d00a      	beq.n	8009354 <RadioGetStatus+0x24>
 800933e:	2b07      	cmp	r3, #7
 8009340:	dc0a      	bgt.n	8009358 <RadioGetStatus+0x28>
 8009342:	2b04      	cmp	r3, #4
 8009344:	d002      	beq.n	800934c <RadioGetStatus+0x1c>
 8009346:	2b05      	cmp	r3, #5
 8009348:	d002      	beq.n	8009350 <RadioGetStatus+0x20>
 800934a:	e005      	b.n	8009358 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800934c:	2302      	movs	r3, #2
 800934e:	e004      	b.n	800935a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8009350:	2301      	movs	r3, #1
 8009352:	e002      	b.n	800935a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8009354:	2303      	movs	r3, #3
 8009356:	e000      	b.n	800935a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8009358:	2300      	movs	r3, #0
    }
}
 800935a:	4618      	mov	r0, r3
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800936a:	4a2a      	ldr	r2, [pc, #168]	; (8009414 <RadioSetModem+0xb4>)
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	4618      	mov	r0, r3
 8009374:	f003 f95d 	bl	800c632 <RFW_SetRadioModem>
    switch( modem )
 8009378:	79fb      	ldrb	r3, [r7, #7]
 800937a:	2b05      	cmp	r3, #5
 800937c:	d80e      	bhi.n	800939c <RadioSetModem+0x3c>
 800937e:	a201      	add	r2, pc, #4	; (adr r2, 8009384 <RadioSetModem+0x24>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	080093ab 	.word	0x080093ab
 8009388:	080093b9 	.word	0x080093b9
 800938c:	0800939d 	.word	0x0800939d
 8009390:	080093df 	.word	0x080093df
 8009394:	080093ed 	.word	0x080093ed
 8009398:	080093fb 	.word	0x080093fb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800939c:	2003      	movs	r0, #3
 800939e:	f002 fb11 	bl	800b9c4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80093a2:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <RadioSetModem+0xb4>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	735a      	strb	r2, [r3, #13]
        break;
 80093a8:	e02f      	b.n	800940a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80093aa:	2000      	movs	r0, #0
 80093ac:	f002 fb0a 	bl	800b9c4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80093b0:	4b18      	ldr	r3, [pc, #96]	; (8009414 <RadioSetModem+0xb4>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	735a      	strb	r2, [r3, #13]
        break;
 80093b6:	e028      	b.n	800940a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80093b8:	2001      	movs	r0, #1
 80093ba:	f002 fb03 	bl	800b9c4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80093be:	4b15      	ldr	r3, [pc, #84]	; (8009414 <RadioSetModem+0xb4>)
 80093c0:	7b5a      	ldrb	r2, [r3, #13]
 80093c2:	4b14      	ldr	r3, [pc, #80]	; (8009414 <RadioSetModem+0xb4>)
 80093c4:	7b1b      	ldrb	r3, [r3, #12]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d01e      	beq.n	8009408 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80093ca:	4b12      	ldr	r3, [pc, #72]	; (8009414 <RadioSetModem+0xb4>)
 80093cc:	7b1a      	ldrb	r2, [r3, #12]
 80093ce:	4b11      	ldr	r3, [pc, #68]	; (8009414 <RadioSetModem+0xb4>)
 80093d0:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <RadioSetModem+0xb4>)
 80093d4:	7b5b      	ldrb	r3, [r3, #13]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 ff9a 	bl	800a310 <RadioSetPublicNetwork>
        }
        break;
 80093dc:	e014      	b.n	8009408 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80093de:	2002      	movs	r0, #2
 80093e0:	f002 faf0 	bl	800b9c4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80093e4:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <RadioSetModem+0xb4>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	735a      	strb	r2, [r3, #13]
        break;
 80093ea:	e00e      	b.n	800940a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80093ec:	2002      	movs	r0, #2
 80093ee:	f002 fae9 	bl	800b9c4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80093f2:	4b08      	ldr	r3, [pc, #32]	; (8009414 <RadioSetModem+0xb4>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	735a      	strb	r2, [r3, #13]
        break;
 80093f8:	e007      	b.n	800940a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80093fa:	2000      	movs	r0, #0
 80093fc:	f002 fae2 	bl	800b9c4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009400:	4b04      	ldr	r3, [pc, #16]	; (8009414 <RadioSetModem+0xb4>)
 8009402:	2200      	movs	r2, #0
 8009404:	735a      	strb	r2, [r3, #13]
        break;
 8009406:	e000      	b.n	800940a <RadioSetModem+0xaa>
        break;
 8009408:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20000750 	.word	0x20000750

08009418 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f002 fa89 	bl	800b938 <SUBGRF_SetRfFrequency>
}
 8009426:	bf00      	nop
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b090      	sub	sp, #64	; 0x40
 8009432:	af0a      	add	r7, sp, #40	; 0x28
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	60b9      	str	r1, [r7, #8]
 8009438:	603b      	str	r3, [r7, #0]
 800943a:	4613      	mov	r3, r2
 800943c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800943e:	2301      	movs	r3, #1
 8009440:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800944a:	f000 fdea 	bl	800a022 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800944e:	2000      	movs	r0, #0
 8009450:	f7ff ff86 	bl	8009360 <RadioSetModem>

    RadioSetChannel( freq );
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7ff ffdf 	bl	8009418 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800945a:	2301      	movs	r3, #1
 800945c:	9309      	str	r3, [sp, #36]	; 0x24
 800945e:	2300      	movs	r3, #0
 8009460:	9308      	str	r3, [sp, #32]
 8009462:	2300      	movs	r3, #0
 8009464:	9307      	str	r3, [sp, #28]
 8009466:	2300      	movs	r3, #0
 8009468:	9306      	str	r3, [sp, #24]
 800946a:	2300      	movs	r3, #0
 800946c:	9305      	str	r3, [sp, #20]
 800946e:	2300      	movs	r3, #0
 8009470:	9304      	str	r3, [sp, #16]
 8009472:	2300      	movs	r3, #0
 8009474:	9303      	str	r3, [sp, #12]
 8009476:	2300      	movs	r3, #0
 8009478:	9302      	str	r3, [sp, #8]
 800947a:	2303      	movs	r3, #3
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	2300      	movs	r3, #0
 8009484:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009488:	68b9      	ldr	r1, [r7, #8]
 800948a:	2000      	movs	r0, #0
 800948c:	f000 f83c 	bl	8009508 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8009490:	2000      	movs	r0, #0
 8009492:	f000 fdcd 	bl	800a030 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8009496:	f000 ff69 	bl	800a36c <RadioGetWakeupTime>
 800949a:	4603      	mov	r3, r0
 800949c:	4618      	mov	r0, r3
 800949e:	f7f8 ffed 	bl	800247c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80094a2:	f003 fb7f 	bl	800cba4 <UTIL_TIMER_GetCurrentTime>
 80094a6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80094a8:	e00d      	b.n	80094c6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80094aa:	2000      	movs	r0, #0
 80094ac:	f000 feae 	bl	800a20c <RadioRssi>
 80094b0:	4603      	mov	r3, r0
 80094b2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80094b4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80094b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094bc:	429a      	cmp	r2, r3
 80094be:	dd02      	ble.n	80094c6 <RadioIsChannelFree+0x98>
        {
            status = false;
 80094c0:	2300      	movs	r3, #0
 80094c2:	75fb      	strb	r3, [r7, #23]
            break;
 80094c4:	e006      	b.n	80094d4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80094c6:	6938      	ldr	r0, [r7, #16]
 80094c8:	f003 fb7e 	bl	800cbc8 <UTIL_TIMER_GetElapsedTime>
 80094cc:	4602      	mov	r2, r0
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d8ea      	bhi.n	80094aa <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80094d4:	f000 fda5 	bl	800a022 <RadioStandby>

    return status;
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80094ec:	2300      	movs	r3, #0
 80094ee:	2200      	movs	r2, #0
 80094f0:	2100      	movs	r1, #0
 80094f2:	2000      	movs	r0, #0
 80094f4:	f002 f9c4 	bl	800b880 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80094f8:	f001 ff75 	bl	800b3e6 <SUBGRF_GetRandom>
 80094fc:	6078      	str	r0, [r7, #4]

    return rnd;
 80094fe:	687b      	ldr	r3, [r7, #4]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	607a      	str	r2, [r7, #4]
 8009512:	461a      	mov	r2, r3
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]
 8009518:	4613      	mov	r3, r2
 800951a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800951c:	4ab9      	ldr	r2, [pc, #740]	; (8009804 <RadioSetRxConfig+0x2fc>)
 800951e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009522:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8009524:	f003 f843 	bl	800c5ae <RFW_DeInit>
    if( rxContinuous == true )
 8009528:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8009534:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009538:	2b00      	cmp	r3, #0
 800953a:	d004      	beq.n	8009546 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800953c:	4ab2      	ldr	r2, [pc, #712]	; (8009808 <RadioSetRxConfig+0x300>)
 800953e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009542:	7013      	strb	r3, [r2, #0]
 8009544:	e002      	b.n	800954c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8009546:	4bb0      	ldr	r3, [pc, #704]	; (8009808 <RadioSetRxConfig+0x300>)
 8009548:	22ff      	movs	r2, #255	; 0xff
 800954a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	2b05      	cmp	r3, #5
 8009550:	d009      	beq.n	8009566 <RadioSetRxConfig+0x5e>
 8009552:	2b05      	cmp	r3, #5
 8009554:	f300 81d7 	bgt.w	8009906 <RadioSetRxConfig+0x3fe>
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 80bf 	beq.w	80096dc <RadioSetRxConfig+0x1d4>
 800955e:	2b01      	cmp	r3, #1
 8009560:	f000 8124 	beq.w	80097ac <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8009564:	e1cf      	b.n	8009906 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8009566:	2001      	movs	r0, #1
 8009568:	f002 f882 	bl	800b670 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800956c:	4ba5      	ldr	r3, [pc, #660]	; (8009804 <RadioSetRxConfig+0x2fc>)
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009574:	4aa3      	ldr	r2, [pc, #652]	; (8009804 <RadioSetRxConfig+0x2fc>)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800957a:	4ba2      	ldr	r3, [pc, #648]	; (8009804 <RadioSetRxConfig+0x2fc>)
 800957c:	2209      	movs	r2, #9
 800957e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8009582:	4ba0      	ldr	r3, [pc, #640]	; (8009804 <RadioSetRxConfig+0x2fc>)
 8009584:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009588:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800958a:	68b8      	ldr	r0, [r7, #8]
 800958c:	f002 ff42 	bl	800c414 <SUBGRF_GetFskBandwidthRegValue>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	4b9b      	ldr	r3, [pc, #620]	; (8009804 <RadioSetRxConfig+0x2fc>)
 8009596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800959a:	4b9a      	ldr	r3, [pc, #616]	; (8009804 <RadioSetRxConfig+0x2fc>)
 800959c:	2200      	movs	r2, #0
 800959e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80095a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	4b97      	ldr	r3, [pc, #604]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80095a8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80095aa:	4b96      	ldr	r3, [pc, #600]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80095b0:	4b94      	ldr	r3, [pc, #592]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80095b2:	2210      	movs	r2, #16
 80095b4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80095b6:	4b93      	ldr	r3, [pc, #588]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80095bc:	4b91      	ldr	r3, [pc, #580]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80095be:	2200      	movs	r2, #0
 80095c0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80095c2:	4b91      	ldr	r3, [pc, #580]	; (8009808 <RadioSetRxConfig+0x300>)
 80095c4:	781a      	ldrb	r2, [r3, #0]
 80095c6:	4b8f      	ldr	r3, [pc, #572]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80095c8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80095ca:	4b8e      	ldr	r3, [pc, #568]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80095cc:	2201      	movs	r2, #1
 80095ce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80095d0:	4b8c      	ldr	r3, [pc, #560]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80095d6:	2005      	movs	r0, #5
 80095d8:	f7ff fec2 	bl	8009360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80095dc:	488b      	ldr	r0, [pc, #556]	; (800980c <RadioSetRxConfig+0x304>)
 80095de:	f002 fae5 	bl	800bbac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80095e2:	488b      	ldr	r0, [pc, #556]	; (8009810 <RadioSetRxConfig+0x308>)
 80095e4:	f002 fbb4 	bl	800bd50 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80095e8:	4a8a      	ldr	r2, [pc, #552]	; (8009814 <RadioSetRxConfig+0x30c>)
 80095ea:	f107 031c 	add.w	r3, r7, #28
 80095ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80095f6:	f107 031c 	add.w	r3, r7, #28
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 fe71 	bl	800b2e2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009600:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009604:	f001 febc 	bl	800b380 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8009608:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800960c:	f000 fe1d 	bl	800a24a <RadioRead>
 8009610:	4603      	mov	r3, r0
 8009612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8009616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800961a:	f023 0310 	bic.w	r3, r3, #16
 800961e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8009622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009626:	4619      	mov	r1, r3
 8009628:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800962c:	f000 fdfb 	bl	800a226 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8009630:	2104      	movs	r1, #4
 8009632:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8009636:	f000 fdf6 	bl	800a226 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800963a:	f640 009b 	movw	r0, #2203	; 0x89b
 800963e:	f000 fe04 	bl	800a24a <RadioRead>
 8009642:	4603      	mov	r3, r0
 8009644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800964c:	f023 031c 	bic.w	r3, r3, #28
 8009650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8009654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009658:	f043 0308 	orr.w	r3, r3, #8
 800965c:	b2db      	uxtb	r3, r3
 800965e:	4619      	mov	r1, r3
 8009660:	f640 009b 	movw	r0, #2203	; 0x89b
 8009664:	f000 fddf 	bl	800a226 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8009668:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800966c:	f000 fded 	bl	800a24a <RadioRead>
 8009670:	4603      	mov	r3, r0
 8009672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800967a:	f023 0318 	bic.w	r3, r3, #24
 800967e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8009682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009686:	f043 0318 	orr.w	r3, r3, #24
 800968a:	b2db      	uxtb	r3, r3
 800968c:	4619      	mov	r1, r3
 800968e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8009692:	f000 fdc8 	bl	800a226 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8009696:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800969a:	f000 fdd6 	bl	800a24a <RadioRead>
 800969e:	4603      	mov	r3, r0
 80096a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80096a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80096b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	4619      	mov	r1, r3
 80096bc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80096c0:	f000 fdb1 	bl	800a226 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80096c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80096c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80096ca:	fb02 f303 	mul.w	r3, r2, r3
 80096ce:	461a      	mov	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d6:	4a4b      	ldr	r2, [pc, #300]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80096d8:	6093      	str	r3, [r2, #8]
            break;
 80096da:	e115      	b.n	8009908 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80096dc:	2000      	movs	r0, #0
 80096de:	f001 ffc7 	bl	800b670 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80096e2:	4b48      	ldr	r3, [pc, #288]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80096ea:	4a46      	ldr	r2, [pc, #280]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80096f0:	4b44      	ldr	r3, [pc, #272]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80096f2:	220b      	movs	r2, #11
 80096f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80096f8:	68b8      	ldr	r0, [r7, #8]
 80096fa:	f002 fe8b 	bl	800c414 <SUBGRF_GetFskBandwidthRegValue>
 80096fe:	4603      	mov	r3, r0
 8009700:	461a      	mov	r2, r3
 8009702:	4b40      	ldr	r3, [pc, #256]	; (8009804 <RadioSetRxConfig+0x2fc>)
 8009704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009708:	4b3e      	ldr	r3, [pc, #248]	; (8009804 <RadioSetRxConfig+0x2fc>)
 800970a:	2200      	movs	r2, #0
 800970c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800970e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	b29a      	uxth	r2, r3
 8009714:	4b3b      	ldr	r3, [pc, #236]	; (8009804 <RadioSetRxConfig+0x2fc>)
 8009716:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009718:	4b3a      	ldr	r3, [pc, #232]	; (8009804 <RadioSetRxConfig+0x2fc>)
 800971a:	2204      	movs	r2, #4
 800971c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800971e:	4b39      	ldr	r3, [pc, #228]	; (8009804 <RadioSetRxConfig+0x2fc>)
 8009720:	2218      	movs	r2, #24
 8009722:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009724:	4b37      	ldr	r3, [pc, #220]	; (8009804 <RadioSetRxConfig+0x2fc>)
 8009726:	2200      	movs	r2, #0
 8009728:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800972a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800972e:	f083 0301 	eor.w	r3, r3, #1
 8009732:	b2db      	uxtb	r3, r3
 8009734:	461a      	mov	r2, r3
 8009736:	4b33      	ldr	r3, [pc, #204]	; (8009804 <RadioSetRxConfig+0x2fc>)
 8009738:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800973a:	4b33      	ldr	r3, [pc, #204]	; (8009808 <RadioSetRxConfig+0x300>)
 800973c:	781a      	ldrb	r2, [r3, #0]
 800973e:	4b31      	ldr	r3, [pc, #196]	; (8009804 <RadioSetRxConfig+0x2fc>)
 8009740:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8009742:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800974a:	4b2e      	ldr	r3, [pc, #184]	; (8009804 <RadioSetRxConfig+0x2fc>)
 800974c:	22f2      	movs	r2, #242	; 0xf2
 800974e:	75da      	strb	r2, [r3, #23]
 8009750:	e002      	b.n	8009758 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009752:	4b2c      	ldr	r3, [pc, #176]	; (8009804 <RadioSetRxConfig+0x2fc>)
 8009754:	2201      	movs	r2, #1
 8009756:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009758:	4b2a      	ldr	r3, [pc, #168]	; (8009804 <RadioSetRxConfig+0x2fc>)
 800975a:	2201      	movs	r2, #1
 800975c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800975e:	f000 fc60 	bl	800a022 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8009762:	2000      	movs	r0, #0
 8009764:	f7ff fdfc 	bl	8009360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009768:	4828      	ldr	r0, [pc, #160]	; (800980c <RadioSetRxConfig+0x304>)
 800976a:	f002 fa1f 	bl	800bbac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800976e:	4828      	ldr	r0, [pc, #160]	; (8009810 <RadioSetRxConfig+0x308>)
 8009770:	f002 faee 	bl	800bd50 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009774:	4a28      	ldr	r2, [pc, #160]	; (8009818 <RadioSetRxConfig+0x310>)
 8009776:	f107 0314 	add.w	r3, r7, #20
 800977a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800977e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009782:	f107 0314 	add.w	r3, r7, #20
 8009786:	4618      	mov	r0, r3
 8009788:	f001 fdab 	bl	800b2e2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800978c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009790:	f001 fdf6 	bl	800b380 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8009794:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009796:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800979a:	fb02 f303 	mul.w	r3, r2, r3
 800979e:	461a      	mov	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a6:	4a17      	ldr	r2, [pc, #92]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80097a8:	6093      	str	r3, [r2, #8]
            break;
 80097aa:	e0ad      	b.n	8009908 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80097ac:	2000      	movs	r0, #0
 80097ae:	f001 ff5f 	bl	800b670 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80097b2:	4b14      	ldr	r3, [pc, #80]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	4b11      	ldr	r3, [pc, #68]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80097c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80097c4:	4a15      	ldr	r2, [pc, #84]	; (800981c <RadioSetRxConfig+0x314>)
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	4413      	add	r3, r2
 80097ca:	781a      	ldrb	r2, [r3, #0]
 80097cc:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80097ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80097d2:	4a0c      	ldr	r2, [pc, #48]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
 80097d6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d105      	bne.n	80097ec <RadioSetRxConfig+0x2e4>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b0b      	cmp	r3, #11
 80097e4:	d008      	beq.n	80097f8 <RadioSetRxConfig+0x2f0>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b0c      	cmp	r3, #12
 80097ea:	d005      	beq.n	80097f8 <RadioSetRxConfig+0x2f0>
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d116      	bne.n	8009820 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b0c      	cmp	r3, #12
 80097f6:	d113      	bne.n	8009820 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80097f8:	4b02      	ldr	r3, [pc, #8]	; (8009804 <RadioSetRxConfig+0x2fc>)
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009800:	e012      	b.n	8009828 <RadioSetRxConfig+0x320>
 8009802:	bf00      	nop
 8009804:	20000750 	.word	0x20000750
 8009808:	20000015 	.word	0x20000015
 800980c:	20000788 	.word	0x20000788
 8009810:	2000075e 	.word	0x2000075e
 8009814:	0800dce8 	.word	0x0800dce8
 8009818:	0800dcf0 	.word	0x0800dcf0
 800981c:	0800de8c 	.word	0x0800de8c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009820:	4b3b      	ldr	r3, [pc, #236]	; (8009910 <RadioSetRxConfig+0x408>)
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009828:	4b39      	ldr	r3, [pc, #228]	; (8009910 <RadioSetRxConfig+0x408>)
 800982a:	2201      	movs	r2, #1
 800982c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800982e:	4b38      	ldr	r3, [pc, #224]	; (8009910 <RadioSetRxConfig+0x408>)
 8009830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009834:	2b05      	cmp	r3, #5
 8009836:	d004      	beq.n	8009842 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8009838:	4b35      	ldr	r3, [pc, #212]	; (8009910 <RadioSetRxConfig+0x408>)
 800983a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800983e:	2b06      	cmp	r3, #6
 8009840:	d10a      	bne.n	8009858 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8009842:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009844:	2b0b      	cmp	r3, #11
 8009846:	d803      	bhi.n	8009850 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009848:	4b31      	ldr	r3, [pc, #196]	; (8009910 <RadioSetRxConfig+0x408>)
 800984a:	220c      	movs	r2, #12
 800984c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800984e:	e006      	b.n	800985e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009850:	4a2f      	ldr	r2, [pc, #188]	; (8009910 <RadioSetRxConfig+0x408>)
 8009852:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009854:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8009856:	e002      	b.n	800985e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009858:	4a2d      	ldr	r2, [pc, #180]	; (8009910 <RadioSetRxConfig+0x408>)
 800985a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800985c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800985e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8009862:	4b2b      	ldr	r3, [pc, #172]	; (8009910 <RadioSetRxConfig+0x408>)
 8009864:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009866:	4b2b      	ldr	r3, [pc, #172]	; (8009914 <RadioSetRxConfig+0x40c>)
 8009868:	781a      	ldrb	r2, [r3, #0]
 800986a:	4b29      	ldr	r3, [pc, #164]	; (8009910 <RadioSetRxConfig+0x408>)
 800986c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800986e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8009872:	4b27      	ldr	r3, [pc, #156]	; (8009910 <RadioSetRxConfig+0x408>)
 8009874:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009878:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800987c:	4b24      	ldr	r3, [pc, #144]	; (8009910 <RadioSetRxConfig+0x408>)
 800987e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8009882:	f000 fbce 	bl	800a022 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8009886:	2001      	movs	r0, #1
 8009888:	f7ff fd6a 	bl	8009360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800988c:	4822      	ldr	r0, [pc, #136]	; (8009918 <RadioSetRxConfig+0x410>)
 800988e:	f002 f98d 	bl	800bbac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009892:	4822      	ldr	r0, [pc, #136]	; (800991c <RadioSetRxConfig+0x414>)
 8009894:	f002 fa5c 	bl	800bd50 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009898:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800989a:	b2db      	uxtb	r3, r3
 800989c:	4618      	mov	r0, r3
 800989e:	f001 fef6 	bl	800b68e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80098a2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80098a6:	f002 fbaf 	bl	800c008 <SUBGRF_ReadRegister>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	4619      	mov	r1, r3
 80098b4:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80098b8:	f002 fb92 	bl	800bfe0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80098bc:	4b14      	ldr	r3, [pc, #80]	; (8009910 <RadioSetRxConfig+0x408>)
 80098be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d10d      	bne.n	80098e2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80098c6:	f240 7036 	movw	r0, #1846	; 0x736
 80098ca:	f002 fb9d 	bl	800c008 <SUBGRF_ReadRegister>
 80098ce:	4603      	mov	r3, r0
 80098d0:	f023 0304 	bic.w	r3, r3, #4
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	4619      	mov	r1, r3
 80098d8:	f240 7036 	movw	r0, #1846	; 0x736
 80098dc:	f002 fb80 	bl	800bfe0 <SUBGRF_WriteRegister>
 80098e0:	e00c      	b.n	80098fc <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80098e2:	f240 7036 	movw	r0, #1846	; 0x736
 80098e6:	f002 fb8f 	bl	800c008 <SUBGRF_ReadRegister>
 80098ea:	4603      	mov	r3, r0
 80098ec:	f043 0304 	orr.w	r3, r3, #4
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	4619      	mov	r1, r3
 80098f4:	f240 7036 	movw	r0, #1846	; 0x736
 80098f8:	f002 fb72 	bl	800bfe0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80098fc:	4b04      	ldr	r3, [pc, #16]	; (8009910 <RadioSetRxConfig+0x408>)
 80098fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009902:	609a      	str	r2, [r3, #8]
            break;
 8009904:	e000      	b.n	8009908 <RadioSetRxConfig+0x400>
            break;
 8009906:	bf00      	nop
    }
}
 8009908:	bf00      	nop
 800990a:	3728      	adds	r7, #40	; 0x28
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20000750 	.word	0x20000750
 8009914:	20000015 	.word	0x20000015
 8009918:	20000788 	.word	0x20000788
 800991c:	2000075e 	.word	0x2000075e

08009920 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	60ba      	str	r2, [r7, #8]
 8009928:	607b      	str	r3, [r7, #4]
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]
 800992e:	460b      	mov	r3, r1
 8009930:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8009932:	f002 fe3c 	bl	800c5ae <RFW_DeInit>
    switch( modem )
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	2b04      	cmp	r3, #4
 800993a:	f000 80c7 	beq.w	8009acc <RadioSetTxConfig+0x1ac>
 800993e:	2b04      	cmp	r3, #4
 8009940:	f300 80d6 	bgt.w	8009af0 <RadioSetTxConfig+0x1d0>
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <RadioSetTxConfig+0x2e>
 8009948:	2b01      	cmp	r3, #1
 800994a:	d059      	beq.n	8009a00 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800994c:	e0d0      	b.n	8009af0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800994e:	4b77      	ldr	r3, [pc, #476]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009956:	4a75      	ldr	r2, [pc, #468]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800995c:	4b73      	ldr	r3, [pc, #460]	; (8009b2c <RadioSetTxConfig+0x20c>)
 800995e:	220b      	movs	r2, #11
 8009960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f002 fd55 	bl	800c414 <SUBGRF_GetFskBandwidthRegValue>
 800996a:	4603      	mov	r3, r0
 800996c:	461a      	mov	r2, r3
 800996e:	4b6f      	ldr	r3, [pc, #444]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8009974:	4a6d      	ldr	r2, [pc, #436]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800997a:	4b6c      	ldr	r3, [pc, #432]	; (8009b2c <RadioSetTxConfig+0x20c>)
 800997c:	2200      	movs	r2, #0
 800997e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009980:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009982:	00db      	lsls	r3, r3, #3
 8009984:	b29a      	uxth	r2, r3
 8009986:	4b69      	ldr	r3, [pc, #420]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009988:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800998a:	4b68      	ldr	r3, [pc, #416]	; (8009b2c <RadioSetTxConfig+0x20c>)
 800998c:	2204      	movs	r2, #4
 800998e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8009990:	4b66      	ldr	r3, [pc, #408]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009992:	2218      	movs	r2, #24
 8009994:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009996:	4b65      	ldr	r3, [pc, #404]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009998:	2200      	movs	r2, #0
 800999a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800999c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099a0:	f083 0301 	eor.w	r3, r3, #1
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	461a      	mov	r2, r3
 80099a8:	4b60      	ldr	r3, [pc, #384]	; (8009b2c <RadioSetTxConfig+0x20c>)
 80099aa:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80099ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80099b4:	4b5d      	ldr	r3, [pc, #372]	; (8009b2c <RadioSetTxConfig+0x20c>)
 80099b6:	22f2      	movs	r2, #242	; 0xf2
 80099b8:	75da      	strb	r2, [r3, #23]
 80099ba:	e002      	b.n	80099c2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80099bc:	4b5b      	ldr	r3, [pc, #364]	; (8009b2c <RadioSetTxConfig+0x20c>)
 80099be:	2201      	movs	r2, #1
 80099c0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80099c2:	4b5a      	ldr	r3, [pc, #360]	; (8009b2c <RadioSetTxConfig+0x20c>)
 80099c4:	2201      	movs	r2, #1
 80099c6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80099c8:	f000 fb2b 	bl	800a022 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80099cc:	2000      	movs	r0, #0
 80099ce:	f7ff fcc7 	bl	8009360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80099d2:	4857      	ldr	r0, [pc, #348]	; (8009b30 <RadioSetTxConfig+0x210>)
 80099d4:	f002 f8ea 	bl	800bbac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099d8:	4856      	ldr	r0, [pc, #344]	; (8009b34 <RadioSetTxConfig+0x214>)
 80099da:	f002 f9b9 	bl	800bd50 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80099de:	4a56      	ldr	r2, [pc, #344]	; (8009b38 <RadioSetTxConfig+0x218>)
 80099e0:	f107 0310 	add.w	r3, r7, #16
 80099e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80099ec:	f107 0310 	add.w	r3, r7, #16
 80099f0:	4618      	mov	r0, r3
 80099f2:	f001 fc76 	bl	800b2e2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80099f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80099fa:	f001 fcc1 	bl	800b380 <SUBGRF_SetWhiteningSeed>
            break;
 80099fe:	e078      	b.n	8009af2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009a00:	4b4a      	ldr	r3, [pc, #296]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	4b47      	ldr	r3, [pc, #284]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8009a12:	4a4a      	ldr	r2, [pc, #296]	; (8009b3c <RadioSetTxConfig+0x21c>)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4413      	add	r3, r2
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	4b44      	ldr	r3, [pc, #272]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8009a20:	4a42      	ldr	r2, [pc, #264]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a26:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d105      	bne.n	8009a3c <RadioSetTxConfig+0x11c>
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	2b0b      	cmp	r3, #11
 8009a34:	d008      	beq.n	8009a48 <RadioSetTxConfig+0x128>
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	2b0c      	cmp	r3, #12
 8009a3a:	d005      	beq.n	8009a48 <RadioSetTxConfig+0x128>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d107      	bne.n	8009a52 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	2b0c      	cmp	r3, #12
 8009a46:	d104      	bne.n	8009a52 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009a48:	4b38      	ldr	r3, [pc, #224]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009a50:	e003      	b.n	8009a5a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009a52:	4b36      	ldr	r3, [pc, #216]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009a5a:	4b34      	ldr	r3, [pc, #208]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009a60:	4b32      	ldr	r3, [pc, #200]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a66:	2b05      	cmp	r3, #5
 8009a68:	d004      	beq.n	8009a74 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8009a6a:	4b30      	ldr	r3, [pc, #192]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009a70:	2b06      	cmp	r3, #6
 8009a72:	d10a      	bne.n	8009a8a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8009a74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a76:	2b0b      	cmp	r3, #11
 8009a78:	d803      	bhi.n	8009a82 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009a7a:	4b2c      	ldr	r3, [pc, #176]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a7c:	220c      	movs	r2, #12
 8009a7e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009a80:	e006      	b.n	8009a90 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009a82:	4a2a      	ldr	r2, [pc, #168]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a86:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8009a88:	e002      	b.n	8009a90 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009a8a:	4a28      	ldr	r2, [pc, #160]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a8e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009a90:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009a94:	4b25      	ldr	r3, [pc, #148]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a96:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009a98:	4b29      	ldr	r3, [pc, #164]	; (8009b40 <RadioSetTxConfig+0x220>)
 8009a9a:	781a      	ldrb	r2, [r3, #0]
 8009a9c:	4b23      	ldr	r3, [pc, #140]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009a9e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009aa0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009aa4:	4b21      	ldr	r3, [pc, #132]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009aa6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009aaa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8009aae:	4b1f      	ldr	r3, [pc, #124]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8009ab4:	f000 fab5 	bl	800a022 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8009ab8:	2001      	movs	r0, #1
 8009aba:	f7ff fc51 	bl	8009360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009abe:	481c      	ldr	r0, [pc, #112]	; (8009b30 <RadioSetTxConfig+0x210>)
 8009ac0:	f002 f874 	bl	800bbac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009ac4:	481b      	ldr	r0, [pc, #108]	; (8009b34 <RadioSetTxConfig+0x214>)
 8009ac6:	f002 f943 	bl	800bd50 <SUBGRF_SetPacketParams>
            break;
 8009aca:	e012      	b.n	8009af2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8009acc:	2004      	movs	r0, #4
 8009ace:	f7ff fc47 	bl	8009360 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009ad2:	4b16      	ldr	r3, [pc, #88]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8009ada:	4a14      	ldr	r2, [pc, #80]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009ae0:	4b12      	ldr	r3, [pc, #72]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009ae2:	2216      	movs	r2, #22
 8009ae4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009ae8:	4811      	ldr	r0, [pc, #68]	; (8009b30 <RadioSetTxConfig+0x210>)
 8009aea:	f002 f85f 	bl	800bbac <SUBGRF_SetModulationParams>
            break;
 8009aee:	e000      	b.n	8009af2 <RadioSetTxConfig+0x1d2>
            break;
 8009af0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009af2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f002 fb8e 	bl	800c218 <SUBGRF_SetRfTxPower>
 8009afc:	4603      	mov	r3, r0
 8009afe:	461a      	mov	r2, r3
 8009b00:	4b0a      	ldr	r3, [pc, #40]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009b02:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009b06:	210e      	movs	r1, #14
 8009b08:	f640 101f 	movw	r0, #2335	; 0x91f
 8009b0c:	f002 fa68 	bl	800bfe0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009b10:	4b06      	ldr	r3, [pc, #24]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009b12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009b16:	4618      	mov	r0, r3
 8009b18:	f002 fd5d 	bl	800c5d6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009b1c:	4a03      	ldr	r2, [pc, #12]	; (8009b2c <RadioSetTxConfig+0x20c>)
 8009b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b20:	6053      	str	r3, [r2, #4]
}
 8009b22:	bf00      	nop
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000750 	.word	0x20000750
 8009b30:	20000788 	.word	0x20000788
 8009b34:	2000075e 	.word	0x2000075e
 8009b38:	0800dcf0 	.word	0x0800dcf0
 8009b3c:	0800de8c 	.word	0x0800de8c
 8009b40:	20000015 	.word	0x20000015

08009b44 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
    return true;
 8009b4c:	2301      	movs	r3, #1
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bc80      	pop	{r7}
 8009b56:	4770      	bx	lr

08009b58 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	2b0a      	cmp	r3, #10
 8009b6a:	d83e      	bhi.n	8009bea <RadioGetLoRaBandwidthInHz+0x92>
 8009b6c:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <RadioGetLoRaBandwidthInHz+0x1c>)
 8009b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b72:	bf00      	nop
 8009b74:	08009ba1 	.word	0x08009ba1
 8009b78:	08009bb1 	.word	0x08009bb1
 8009b7c:	08009bc1 	.word	0x08009bc1
 8009b80:	08009bd1 	.word	0x08009bd1
 8009b84:	08009bd9 	.word	0x08009bd9
 8009b88:	08009bdf 	.word	0x08009bdf
 8009b8c:	08009be5 	.word	0x08009be5
 8009b90:	08009beb 	.word	0x08009beb
 8009b94:	08009ba9 	.word	0x08009ba9
 8009b98:	08009bb9 	.word	0x08009bb9
 8009b9c:	08009bc9 	.word	0x08009bc9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8009ba0:	f641 6384 	movw	r3, #7812	; 0x1e84
 8009ba4:	60fb      	str	r3, [r7, #12]
        break;
 8009ba6:	e020      	b.n	8009bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8009ba8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8009bac:	60fb      	str	r3, [r7, #12]
        break;
 8009bae:	e01c      	b.n	8009bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8009bb0:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009bb4:	60fb      	str	r3, [r7, #12]
        break;
 8009bb6:	e018      	b.n	8009bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8009bb8:	f245 1361 	movw	r3, #20833	; 0x5161
 8009bbc:	60fb      	str	r3, [r7, #12]
        break;
 8009bbe:	e014      	b.n	8009bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8009bc0:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009bc4:	60fb      	str	r3, [r7, #12]
        break;
 8009bc6:	e010      	b.n	8009bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8009bc8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8009bcc:	60fb      	str	r3, [r7, #12]
        break;
 8009bce:	e00c      	b.n	8009bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8009bd0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009bd4:	60fb      	str	r3, [r7, #12]
        break;
 8009bd6:	e008      	b.n	8009bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8009bd8:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <RadioGetLoRaBandwidthInHz+0xa0>)
 8009bda:	60fb      	str	r3, [r7, #12]
        break;
 8009bdc:	e005      	b.n	8009bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8009bde:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <RadioGetLoRaBandwidthInHz+0xa4>)
 8009be0:	60fb      	str	r3, [r7, #12]
        break;
 8009be2:	e002      	b.n	8009bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8009be4:	4b06      	ldr	r3, [pc, #24]	; (8009c00 <RadioGetLoRaBandwidthInHz+0xa8>)
 8009be6:	60fb      	str	r3, [r7, #12]
        break;
 8009be8:	bf00      	nop
    }

    return bandwidthInHz;
 8009bea:	68fb      	ldr	r3, [r7, #12]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bc80      	pop	{r7}
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	0001e848 	.word	0x0001e848
 8009bfc:	0003d090 	.word	0x0003d090
 8009c00:	0007a120 	.word	0x0007a120

08009c04 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	4611      	mov	r1, r2
 8009c10:	461a      	mov	r2, r3
 8009c12:	4603      	mov	r3, r0
 8009c14:	70fb      	strb	r3, [r7, #3]
 8009c16:	460b      	mov	r3, r1
 8009c18:	803b      	strh	r3, [r7, #0]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8009c1e:	883b      	ldrh	r3, [r7, #0]
 8009c20:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009c22:	78ba      	ldrb	r2, [r7, #2]
 8009c24:	f082 0201 	eor.w	r2, r2, #1
 8009c28:	b2d2      	uxtb	r2, r2
 8009c2a:	2a00      	cmp	r2, #0
 8009c2c:	d001      	beq.n	8009c32 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8009c2e:	2208      	movs	r2, #8
 8009c30:	e000      	b.n	8009c34 <RadioGetGfskTimeOnAirNumerator+0x30>
 8009c32:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8009c34:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009c36:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8009c3a:	7c3b      	ldrb	r3, [r7, #16]
 8009c3c:	7d39      	ldrb	r1, [r7, #20]
 8009c3e:	2900      	cmp	r1, #0
 8009c40:	d001      	beq.n	8009c46 <RadioGetGfskTimeOnAirNumerator+0x42>
 8009c42:	2102      	movs	r1, #2
 8009c44:	e000      	b.n	8009c48 <RadioGetGfskTimeOnAirNumerator+0x44>
 8009c46:	2100      	movs	r1, #0
 8009c48:	440b      	add	r3, r1
 8009c4a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009c4c:	4413      	add	r3, r2
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bc80      	pop	{r7}
 8009c56:	4770      	bx	lr

08009c58 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b08b      	sub	sp, #44	; 0x2c
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	4611      	mov	r1, r2
 8009c64:	461a      	mov	r2, r3
 8009c66:	460b      	mov	r3, r1
 8009c68:	71fb      	strb	r3, [r7, #7]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	3304      	adds	r3, #4
 8009c72:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8009c74:	2300      	movs	r3, #0
 8009c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b05      	cmp	r3, #5
 8009c7e:	d002      	beq.n	8009c86 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2b06      	cmp	r3, #6
 8009c84:	d104      	bne.n	8009c90 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8009c86:	88bb      	ldrh	r3, [r7, #4]
 8009c88:	2b0b      	cmp	r3, #11
 8009c8a:	d801      	bhi.n	8009c90 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8009c8c:	230c      	movs	r3, #12
 8009c8e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d105      	bne.n	8009ca2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b0b      	cmp	r3, #11
 8009c9a:	d008      	beq.n	8009cae <RadioGetLoRaTimeOnAirNumerator+0x56>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b0c      	cmp	r3, #12
 8009ca0:	d005      	beq.n	8009cae <RadioGetLoRaTimeOnAirNumerator+0x56>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d105      	bne.n	8009cb4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2b0c      	cmp	r3, #12
 8009cac:	d102      	bne.n	8009cb4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009cb4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009cb8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8009cba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009cbe:	2a00      	cmp	r2, #0
 8009cc0:	d001      	beq.n	8009cc6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8009cc2:	2210      	movs	r2, #16
 8009cc4:	e000      	b.n	8009cc8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8009cc6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009cc8:	4413      	add	r3, r2
 8009cca:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8009cd0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8009cd2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	d001      	beq.n	8009cde <RadioGetLoRaTimeOnAirNumerator+0x86>
 8009cda:	2200      	movs	r2, #0
 8009cdc:	e000      	b.n	8009ce0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8009cde:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8009ce0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009ce2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2b06      	cmp	r3, #6
 8009ce8:	d803      	bhi.n	8009cf2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	623b      	str	r3, [r7, #32]
 8009cf0:	e00e      	b.n	8009d10 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8009cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d004      	beq.n	8009d0a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	3b02      	subs	r3, #2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	623b      	str	r3, [r7, #32]
 8009d08:	e002      	b.n	8009d10 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da01      	bge.n	8009d1a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8009d1a:	69fa      	ldr	r2, [r7, #28]
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	4413      	add	r3, r2
 8009d20:	1e5a      	subs	r2, r3, #1
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	fb03 f202 	mul.w	r2, r3, r2
 8009d2e:	88bb      	ldrh	r3, [r7, #4]
 8009d30:	4413      	add	r3, r2
    int32_t intermediate =
 8009d32:	330c      	adds	r3, #12
 8009d34:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b06      	cmp	r3, #6
 8009d3a:	d802      	bhi.n	8009d42 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	3302      	adds	r3, #2
 8009d40:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	3b02      	subs	r3, #2
 8009d4c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	372c      	adds	r7, #44	; 0x2c
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bc80      	pop	{r7}
 8009d58:	4770      	bx	lr
	...

08009d5c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b08a      	sub	sp, #40	; 0x28
 8009d60:	af04      	add	r7, sp, #16
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	607a      	str	r2, [r7, #4]
 8009d66:	461a      	mov	r2, r3
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73fb      	strb	r3, [r7, #15]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8009d74:	2301      	movs	r3, #1
 8009d76:	613b      	str	r3, [r7, #16]

    switch( modem )
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <RadioTimeOnAir+0x28>
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d017      	beq.n	8009db2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8009d82:	e035      	b.n	8009df0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8009d84:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8009d88:	8c3a      	ldrh	r2, [r7, #32]
 8009d8a:	7bb9      	ldrb	r1, [r7, #14]
 8009d8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	4603      	mov	r3, r0
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff ff32 	bl	8009c04 <RadioGetGfskTimeOnAirNumerator>
 8009da0:	4603      	mov	r3, r0
 8009da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009da6:	fb02 f303 	mul.w	r3, r2, r3
 8009daa:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	613b      	str	r3, [r7, #16]
        break;
 8009db0:	e01e      	b.n	8009df0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8009db2:	8c39      	ldrh	r1, [r7, #32]
 8009db4:	7bba      	ldrb	r2, [r7, #14]
 8009db6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009dba:	9302      	str	r3, [sp, #8]
 8009dbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	68b8      	ldr	r0, [r7, #8]
 8009dce:	f7ff ff43 	bl	8009c58 <RadioGetLoRaTimeOnAirNumerator>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dd8:	fb02 f303 	mul.w	r3, r2, r3
 8009ddc:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8009dde:	4a0a      	ldr	r2, [pc, #40]	; (8009e08 <RadioTimeOnAir+0xac>)
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	4413      	add	r3, r2
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7ff feb6 	bl	8009b58 <RadioGetLoRaBandwidthInHz>
 8009dec:	6138      	str	r0, [r7, #16]
        break;
 8009dee:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	4413      	add	r3, r2
 8009df6:	1e5a      	subs	r2, r3, #1
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	0800de8c 	.word	0x0800de8c

08009e0c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009e18:	2300      	movs	r3, #0
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f240 2101 	movw	r1, #513	; 0x201
 8009e20:	f240 2001 	movw	r0, #513	; 0x201
 8009e24:	f001 fd2c 	bl	800b880 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009e28:	4b70      	ldr	r3, [pc, #448]	; (8009fec <RadioSend+0x1e0>)
 8009e2a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009e2e:	2101      	movs	r1, #1
 8009e30:	4618      	mov	r0, r3
 8009e32:	f002 f9c9 	bl	800c1c8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8009e36:	4b6d      	ldr	r3, [pc, #436]	; (8009fec <RadioSend+0x1e0>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d112      	bne.n	8009e64 <RadioSend+0x58>
 8009e3e:	4b6b      	ldr	r3, [pc, #428]	; (8009fec <RadioSend+0x1e0>)
 8009e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e44:	2b06      	cmp	r3, #6
 8009e46:	d10d      	bne.n	8009e64 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009e48:	f640 0089 	movw	r0, #2185	; 0x889
 8009e4c:	f002 f8dc 	bl	800c008 <SUBGRF_ReadRegister>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f023 0304 	bic.w	r3, r3, #4
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	4619      	mov	r1, r3
 8009e5a:	f640 0089 	movw	r0, #2185	; 0x889
 8009e5e:	f002 f8bf 	bl	800bfe0 <SUBGRF_WriteRegister>
 8009e62:	e00c      	b.n	8009e7e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009e64:	f640 0089 	movw	r0, #2185	; 0x889
 8009e68:	f002 f8ce 	bl	800c008 <SUBGRF_ReadRegister>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f043 0304 	orr.w	r3, r3, #4
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	4619      	mov	r1, r3
 8009e76:	f640 0089 	movw	r0, #2185	; 0x889
 8009e7a:	f002 f8b1 	bl	800bfe0 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8009e7e:	4b5b      	ldr	r3, [pc, #364]	; (8009fec <RadioSend+0x1e0>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	f200 80a2 	bhi.w	8009fcc <RadioSend+0x1c0>
 8009e88:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <RadioSend+0x84>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ebf 	.word	0x08009ebf
 8009e94:	08009ea5 	.word	0x08009ea5
 8009e98:	08009ebf 	.word	0x08009ebf
 8009e9c:	08009f15 	.word	0x08009f15
 8009ea0:	08009f35 	.word	0x08009f35
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8009ea4:	4a51      	ldr	r2, [pc, #324]	; (8009fec <RadioSend+0x1e0>)
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009eaa:	4851      	ldr	r0, [pc, #324]	; (8009ff0 <RadioSend+0x1e4>)
 8009eac:	f001 ff50 	bl	800bd50 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009eb0:	78fb      	ldrb	r3, [r7, #3]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 fa00 	bl	800b2bc <SUBGRF_SendPayload>
            break;
 8009ebc:	e087      	b.n	8009fce <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8009ebe:	f002 fb7c 	bl	800c5ba <RFW_Is_Init>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d118      	bne.n	8009efa <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8009ec8:	f107 020d 	add.w	r2, r7, #13
 8009ecc:	78fb      	ldrb	r3, [r7, #3]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f002 fb8a 	bl	800c5ea <RFW_TransmitInit>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10c      	bne.n	8009ef6 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8009edc:	7b7a      	ldrb	r2, [r7, #13]
 8009ede:	4b43      	ldr	r3, [pc, #268]	; (8009fec <RadioSend+0x1e0>)
 8009ee0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009ee2:	4843      	ldr	r0, [pc, #268]	; (8009ff0 <RadioSend+0x1e4>)
 8009ee4:	f001 ff34 	bl	800bd50 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8009ee8:	7b7b      	ldrb	r3, [r7, #13]
 8009eea:	2200      	movs	r2, #0
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f001 f9e4 	bl	800b2bc <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8009ef4:	e06b      	b.n	8009fce <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e073      	b.n	8009fe2 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8009efa:	4a3c      	ldr	r2, [pc, #240]	; (8009fec <RadioSend+0x1e0>)
 8009efc:	78fb      	ldrb	r3, [r7, #3]
 8009efe:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f00:	483b      	ldr	r0, [pc, #236]	; (8009ff0 <RadioSend+0x1e4>)
 8009f02:	f001 ff25 	bl	800bd50 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 f9d5 	bl	800b2bc <SUBGRF_SendPayload>
            break;
 8009f12:	e05c      	b.n	8009fce <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009f14:	4b35      	ldr	r3, [pc, #212]	; (8009fec <RadioSend+0x1e0>)
 8009f16:	2202      	movs	r2, #2
 8009f18:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8009f1a:	4a34      	ldr	r2, [pc, #208]	; (8009fec <RadioSend+0x1e0>)
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f20:	4833      	ldr	r0, [pc, #204]	; (8009ff0 <RadioSend+0x1e4>)
 8009f22:	f001 ff15 	bl	800bd50 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009f26:	78fb      	ldrb	r3, [r7, #3]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 f9c5 	bl	800b2bc <SUBGRF_SendPayload>
            break;
 8009f32:	e04c      	b.n	8009fce <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8009f34:	78fb      	ldrb	r3, [r7, #3]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	482e      	ldr	r0, [pc, #184]	; (8009ff4 <RadioSend+0x1e8>)
 8009f3c:	f000 fc98 	bl	800a870 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009f40:	4b2a      	ldr	r3, [pc, #168]	; (8009fec <RadioSend+0x1e0>)
 8009f42:	2202      	movs	r2, #2
 8009f44:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8009f46:	78fb      	ldrb	r3, [r7, #3]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	4b27      	ldr	r3, [pc, #156]	; (8009fec <RadioSend+0x1e0>)
 8009f4e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f50:	4827      	ldr	r0, [pc, #156]	; (8009ff0 <RadioSend+0x1e4>)
 8009f52:	f001 fefd 	bl	800bd50 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8009f56:	2100      	movs	r1, #0
 8009f58:	20f1      	movs	r0, #241	; 0xf1
 8009f5a:	f000 f964 	bl	800a226 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8009f5e:	2100      	movs	r1, #0
 8009f60:	20f0      	movs	r0, #240	; 0xf0
 8009f62:	f000 f960 	bl	800a226 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8009f66:	4b21      	ldr	r3, [pc, #132]	; (8009fec <RadioSend+0x1e0>)
 8009f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f6a:	2b64      	cmp	r3, #100	; 0x64
 8009f6c:	d108      	bne.n	8009f80 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8009f6e:	2170      	movs	r1, #112	; 0x70
 8009f70:	20f3      	movs	r0, #243	; 0xf3
 8009f72:	f000 f958 	bl	800a226 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8009f76:	211d      	movs	r1, #29
 8009f78:	20f2      	movs	r0, #242	; 0xf2
 8009f7a:	f000 f954 	bl	800a226 <RadioWrite>
 8009f7e:	e007      	b.n	8009f90 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8009f80:	21e1      	movs	r1, #225	; 0xe1
 8009f82:	20f3      	movs	r0, #243	; 0xf3
 8009f84:	f000 f94f 	bl	800a226 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8009f88:	2104      	movs	r1, #4
 8009f8a:	20f2      	movs	r0, #242	; 0xf2
 8009f8c:	f000 f94b 	bl	800a226 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	3302      	adds	r3, #2
 8009f9a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8009f9c:	89fb      	ldrh	r3, [r7, #14]
 8009f9e:	0a1b      	lsrs	r3, r3, #8
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	20f4      	movs	r0, #244	; 0xf4
 8009fa8:	f000 f93d 	bl	800a226 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8009fac:	89fb      	ldrh	r3, [r7, #14]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	20f5      	movs	r0, #245	; 0xf5
 8009fb4:	f000 f937 	bl	800a226 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8009fb8:	78fb      	ldrb	r3, [r7, #3]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	480b      	ldr	r0, [pc, #44]	; (8009ff4 <RadioSend+0x1e8>)
 8009fc6:	f001 f979 	bl	800b2bc <SUBGRF_SendPayload>
            break;
 8009fca:	e000      	b.n	8009fce <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8009fcc:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8009fce:	4b07      	ldr	r3, [pc, #28]	; (8009fec <RadioSend+0x1e0>)
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4808      	ldr	r0, [pc, #32]	; (8009ff8 <RadioSend+0x1ec>)
 8009fd6:	f002 fdbb 	bl	800cb50 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8009fda:	4807      	ldr	r0, [pc, #28]	; (8009ff8 <RadioSend+0x1ec>)
 8009fdc:	f002 fcda 	bl	800c994 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	20000750 	.word	0x20000750
 8009ff0:	2000075e 	.word	0x2000075e
 8009ff4:	2000064c 	.word	0x2000064c
 8009ff8:	200007ac 	.word	0x200007ac

08009ffc <RadioSleep>:

static void RadioSleep( void )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800a002:	2300      	movs	r3, #0
 800a004:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800a006:	793b      	ldrb	r3, [r7, #4]
 800a008:	f043 0304 	orr.w	r3, r3, #4
 800a00c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800a00e:	7938      	ldrb	r0, [r7, #4]
 800a010:	f001 fa30 	bl	800b474 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800a014:	2002      	movs	r0, #2
 800a016:	f7f8 fa31 	bl	800247c <HAL_Delay>
}
 800a01a:	bf00      	nop
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <RadioStandby>:

static void RadioStandby( void )
{
 800a022:	b580      	push	{r7, lr}
 800a024:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800a026:	2000      	movs	r0, #0
 800a028:	f001 fa56 	bl	800b4d8 <SUBGRF_SetStandby>
}
 800a02c:	bf00      	nop
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800a038:	f002 fabf 	bl	800c5ba <RFW_Is_Init>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d102      	bne.n	800a048 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800a042:	f002 fae2 	bl	800c60a <RFW_ReceiveInit>
 800a046:	e007      	b.n	800a058 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a048:	2300      	movs	r3, #0
 800a04a:	2200      	movs	r2, #0
 800a04c:	f240 2162 	movw	r1, #610	; 0x262
 800a050:	f240 2062 	movw	r0, #610	; 0x262
 800a054:	f001 fc14 	bl	800b880 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d006      	beq.n	800a06c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	4811      	ldr	r0, [pc, #68]	; (800a0a8 <RadioRx+0x78>)
 800a062:	f002 fd75 	bl	800cb50 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a066:	4810      	ldr	r0, [pc, #64]	; (800a0a8 <RadioRx+0x78>)
 800a068:	f002 fc94 	bl	800c994 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a06c:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <RadioRx+0x7c>)
 800a06e:	2200      	movs	r2, #0
 800a070:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a072:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <RadioRx+0x7c>)
 800a074:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a078:	2100      	movs	r1, #0
 800a07a:	4618      	mov	r0, r3
 800a07c:	f002 f8a4 	bl	800c1c8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800a080:	4b0a      	ldr	r3, [pc, #40]	; (800a0ac <RadioRx+0x7c>)
 800a082:	785b      	ldrb	r3, [r3, #1]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d004      	beq.n	800a092 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a088:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a08c:	f001 fa60 	bl	800b550 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800a090:	e005      	b.n	800a09e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800a092:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <RadioRx+0x7c>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	019b      	lsls	r3, r3, #6
 800a098:	4618      	mov	r0, r3
 800a09a:	f001 fa59 	bl	800b550 <SUBGRF_SetRx>
}
 800a09e:	bf00      	nop
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	200007c4 	.word	0x200007c4
 800a0ac:	20000750 	.word	0x20000750

0800a0b0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800a0b8:	f002 fa7f 	bl	800c5ba <RFW_Is_Init>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d102      	bne.n	800a0c8 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800a0c2:	f002 faa2 	bl	800c60a <RFW_ReceiveInit>
 800a0c6:	e007      	b.n	800a0d8 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f240 2162 	movw	r1, #610	; 0x262
 800a0d0:	f240 2062 	movw	r0, #610	; 0x262
 800a0d4:	f001 fbd4 	bl	800b880 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d006      	beq.n	800a0ec <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	4811      	ldr	r0, [pc, #68]	; (800a128 <RadioRxBoosted+0x78>)
 800a0e2:	f002 fd35 	bl	800cb50 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a0e6:	4810      	ldr	r0, [pc, #64]	; (800a128 <RadioRxBoosted+0x78>)
 800a0e8:	f002 fc54 	bl	800c994 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <RadioRxBoosted+0x7c>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a0f2:	4b0e      	ldr	r3, [pc, #56]	; (800a12c <RadioRxBoosted+0x7c>)
 800a0f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f002 f864 	bl	800c1c8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800a100:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <RadioRxBoosted+0x7c>)
 800a102:	785b      	ldrb	r3, [r3, #1]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800a108:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a10c:	f001 fa40 	bl	800b590 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800a110:	e005      	b.n	800a11e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800a112:	4b06      	ldr	r3, [pc, #24]	; (800a12c <RadioRxBoosted+0x7c>)
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	019b      	lsls	r3, r3, #6
 800a118:	4618      	mov	r0, r3
 800a11a:	f001 fa39 	bl	800b590 <SUBGRF_SetRxBoosted>
}
 800a11e:	bf00      	nop
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	200007c4 	.word	0x200007c4
 800a12c:	20000750 	.word	0x20000750

0800a130 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	005a      	lsls	r2, r3, #1
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	4413      	add	r3, r2
 800a142:	4a0c      	ldr	r2, [pc, #48]	; (800a174 <RadioSetRxDutyCycle+0x44>)
 800a144:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800a146:	2300      	movs	r3, #0
 800a148:	2200      	movs	r2, #0
 800a14a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a14e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a152:	f001 fb95 	bl	800b880 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a156:	4b07      	ldr	r3, [pc, #28]	; (800a174 <RadioSetRxDutyCycle+0x44>)
 800a158:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a15c:	2100      	movs	r1, #0
 800a15e:	4618      	mov	r0, r3
 800a160:	f002 f832 	bl	800c1c8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f001 fa36 	bl	800b5d8 <SUBGRF_SetRxDutyCycle>
}
 800a16c:	bf00      	nop
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	20000750 	.word	0x20000750

0800a178 <RadioStartCad>:

static void RadioStartCad( void )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a17c:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <RadioStartCad+0x2c>)
 800a17e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a182:	2100      	movs	r1, #0
 800a184:	4618      	mov	r0, r3
 800a186:	f002 f81f 	bl	800c1c8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800a18a:	2300      	movs	r3, #0
 800a18c:	2200      	movs	r2, #0
 800a18e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800a192:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800a196:	f001 fb73 	bl	800b880 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800a19a:	f001 fa49 	bl	800b630 <SUBGRF_SetCad>
}
 800a19e:	bf00      	nop
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000750 	.word	0x20000750

0800a1a8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	70fb      	strb	r3, [r7, #3]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800a1b8:	883b      	ldrh	r3, [r7, #0]
 800a1ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1be:	fb02 f303 	mul.w	r3, r2, r3
 800a1c2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f001 fbb7 	bl	800b938 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800a1ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f002 f822 	bl	800c218 <SUBGRF_SetRfTxPower>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a1d8:	210e      	movs	r1, #14
 800a1da:	f640 101f 	movw	r0, #2335	; 0x91f
 800a1de:	f001 feff 	bl	800bfe0 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f001 ffee 	bl	800c1c8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800a1ec:	f001 fa2e 	bl	800b64c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800a1f0:	68f9      	ldr	r1, [r7, #12]
 800a1f2:	4805      	ldr	r0, [pc, #20]	; (800a208 <RadioSetTxContinuousWave+0x60>)
 800a1f4:	f002 fcac 	bl	800cb50 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800a1f8:	4803      	ldr	r0, [pc, #12]	; (800a208 <RadioSetTxContinuousWave+0x60>)
 800a1fa:	f002 fbcb 	bl	800c994 <UTIL_TIMER_Start>
}
 800a1fe:	bf00      	nop
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	200007ac 	.word	0x200007ac

0800a20c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	4603      	mov	r3, r0
 800a214:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800a216:	f001 fe50 	bl	800beba <SUBGRF_GetRssiInst>
 800a21a:	4603      	mov	r3, r0
 800a21c:	b21b      	sxth	r3, r3
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	4603      	mov	r3, r0
 800a22e:	460a      	mov	r2, r1
 800a230:	80fb      	strh	r3, [r7, #6]
 800a232:	4613      	mov	r3, r2
 800a234:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800a236:	797a      	ldrb	r2, [r7, #5]
 800a238:	88fb      	ldrh	r3, [r7, #6]
 800a23a:	4611      	mov	r1, r2
 800a23c:	4618      	mov	r0, r3
 800a23e:	f001 fecf 	bl	800bfe0 <SUBGRF_WriteRegister>
}
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	4603      	mov	r3, r0
 800a252:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800a254:	88fb      	ldrh	r3, [r7, #6]
 800a256:	4618      	mov	r0, r3
 800a258:	f001 fed6 	bl	800c008 <SUBGRF_ReadRegister>
 800a25c:	4603      	mov	r3, r0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	4603      	mov	r3, r0
 800a26e:	6039      	str	r1, [r7, #0]
 800a270:	80fb      	strh	r3, [r7, #6]
 800a272:	4613      	mov	r3, r2
 800a274:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800a276:	797b      	ldrb	r3, [r7, #5]
 800a278:	b29a      	uxth	r2, r3
 800a27a:	88fb      	ldrh	r3, [r7, #6]
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	4618      	mov	r0, r3
 800a280:	f001 fed6 	bl	800c030 <SUBGRF_WriteRegisters>
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	4603      	mov	r3, r0
 800a294:	6039      	str	r1, [r7, #0]
 800a296:	80fb      	strh	r3, [r7, #6]
 800a298:	4613      	mov	r3, r2
 800a29a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800a29c:	797b      	ldrb	r3, [r7, #5]
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	88fb      	ldrh	r3, [r7, #6]
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 fee5 	bl	800c074 <SUBGRF_ReadRegisters>
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	460a      	mov	r2, r1
 800a2be:	71fb      	strb	r3, [r7, #7]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d10a      	bne.n	800a2e0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800a2ca:	4a0e      	ldr	r2, [pc, #56]	; (800a304 <RadioSetMaxPayloadLength+0x50>)
 800a2cc:	79bb      	ldrb	r3, [r7, #6]
 800a2ce:	7013      	strb	r3, [r2, #0]
 800a2d0:	4b0c      	ldr	r3, [pc, #48]	; (800a304 <RadioSetMaxPayloadLength+0x50>)
 800a2d2:	781a      	ldrb	r2, [r3, #0]
 800a2d4:	4b0c      	ldr	r3, [pc, #48]	; (800a308 <RadioSetMaxPayloadLength+0x54>)
 800a2d6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a2d8:	480c      	ldr	r0, [pc, #48]	; (800a30c <RadioSetMaxPayloadLength+0x58>)
 800a2da:	f001 fd39 	bl	800bd50 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800a2de:	e00d      	b.n	800a2fc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800a2e0:	4b09      	ldr	r3, [pc, #36]	; (800a308 <RadioSetMaxPayloadLength+0x54>)
 800a2e2:	7d5b      	ldrb	r3, [r3, #21]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d109      	bne.n	800a2fc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800a2e8:	4a06      	ldr	r2, [pc, #24]	; (800a304 <RadioSetMaxPayloadLength+0x50>)
 800a2ea:	79bb      	ldrb	r3, [r7, #6]
 800a2ec:	7013      	strb	r3, [r2, #0]
 800a2ee:	4b05      	ldr	r3, [pc, #20]	; (800a304 <RadioSetMaxPayloadLength+0x50>)
 800a2f0:	781a      	ldrb	r2, [r3, #0]
 800a2f2:	4b05      	ldr	r3, [pc, #20]	; (800a308 <RadioSetMaxPayloadLength+0x54>)
 800a2f4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a2f6:	4805      	ldr	r0, [pc, #20]	; (800a30c <RadioSetMaxPayloadLength+0x58>)
 800a2f8:	f001 fd2a 	bl	800bd50 <SUBGRF_SetPacketParams>
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	20000015 	.word	0x20000015
 800a308:	20000750 	.word	0x20000750
 800a30c:	2000075e 	.word	0x2000075e

0800a310 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	4603      	mov	r3, r0
 800a318:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800a31a:	4a13      	ldr	r2, [pc, #76]	; (800a368 <RadioSetPublicNetwork+0x58>)
 800a31c:	79fb      	ldrb	r3, [r7, #7]
 800a31e:	7313      	strb	r3, [r2, #12]
 800a320:	4b11      	ldr	r3, [pc, #68]	; (800a368 <RadioSetPublicNetwork+0x58>)
 800a322:	7b1a      	ldrb	r2, [r3, #12]
 800a324:	4b10      	ldr	r3, [pc, #64]	; (800a368 <RadioSetPublicNetwork+0x58>)
 800a326:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800a328:	2001      	movs	r0, #1
 800a32a:	f7ff f819 	bl	8009360 <RadioSetModem>
    if( enable == true )
 800a32e:	79fb      	ldrb	r3, [r7, #7]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800a334:	2134      	movs	r1, #52	; 0x34
 800a336:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800a33a:	f001 fe51 	bl	800bfe0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800a33e:	2144      	movs	r1, #68	; 0x44
 800a340:	f240 7041 	movw	r0, #1857	; 0x741
 800a344:	f001 fe4c 	bl	800bfe0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800a348:	e009      	b.n	800a35e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800a34a:	2114      	movs	r1, #20
 800a34c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800a350:	f001 fe46 	bl	800bfe0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800a354:	2124      	movs	r1, #36	; 0x24
 800a356:	f240 7041 	movw	r0, #1857	; 0x741
 800a35a:	f001 fe41 	bl	800bfe0 <SUBGRF_WriteRegister>
}
 800a35e:	bf00      	nop
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20000750 	.word	0x20000750

0800a36c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800a370:	f001 ff86 	bl	800c280 <SUBGRF_GetRadioWakeUpTime>
 800a374:	4603      	mov	r3, r0
 800a376:	3303      	adds	r3, #3
}
 800a378:	4618      	mov	r0, r3
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800a384:	f000 f80e 	bl	800a3a4 <RadioOnTxTimeoutProcess>
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800a398:	f000 f818 	bl	800a3cc <RadioOnRxTimeoutProcess>
}
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a3a8:	4b07      	ldr	r3, [pc, #28]	; (800a3c8 <RadioOnTxTimeoutProcess+0x24>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d008      	beq.n	800a3c2 <RadioOnTxTimeoutProcess+0x1e>
 800a3b0:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <RadioOnTxTimeoutProcess+0x24>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800a3ba:	4b03      	ldr	r3, [pc, #12]	; (800a3c8 <RadioOnTxTimeoutProcess+0x24>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	4798      	blx	r3
    }
}
 800a3c2:	bf00      	nop
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	2000074c 	.word	0x2000074c

0800a3cc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a3d0:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <RadioOnRxTimeoutProcess+0x24>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d008      	beq.n	800a3ea <RadioOnRxTimeoutProcess+0x1e>
 800a3d8:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <RadioOnRxTimeoutProcess+0x24>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d003      	beq.n	800a3ea <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800a3e2:	4b03      	ldr	r3, [pc, #12]	; (800a3f0 <RadioOnRxTimeoutProcess+0x24>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	4798      	blx	r3
    }
}
 800a3ea:	bf00      	nop
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	2000074c 	.word	0x2000074c

0800a3f4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800a3fe:	4a05      	ldr	r2, [pc, #20]	; (800a414 <RadioOnDioIrq+0x20>)
 800a400:	88fb      	ldrh	r3, [r7, #6]
 800a402:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800a406:	f000 f807 	bl	800a418 <RadioIrqProcess>
}
 800a40a:	bf00      	nop
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20000750 	.word	0x20000750

0800a418 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800a418:	b5b0      	push	{r4, r5, r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800a426:	4ba5      	ldr	r3, [pc, #660]	; (800a6bc <RadioIrqProcess+0x2a4>)
 800a428:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a42c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a430:	f000 810d 	beq.w	800a64e <RadioIrqProcess+0x236>
 800a434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a438:	f300 81c0 	bgt.w	800a7bc <RadioIrqProcess+0x3a4>
 800a43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a440:	f000 80f1 	beq.w	800a626 <RadioIrqProcess+0x20e>
 800a444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a448:	f300 81b8 	bgt.w	800a7bc <RadioIrqProcess+0x3a4>
 800a44c:	2b80      	cmp	r3, #128	; 0x80
 800a44e:	f000 80d6 	beq.w	800a5fe <RadioIrqProcess+0x1e6>
 800a452:	2b80      	cmp	r3, #128	; 0x80
 800a454:	f300 81b2 	bgt.w	800a7bc <RadioIrqProcess+0x3a4>
 800a458:	2b20      	cmp	r3, #32
 800a45a:	dc49      	bgt.n	800a4f0 <RadioIrqProcess+0xd8>
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f340 81ad 	ble.w	800a7bc <RadioIrqProcess+0x3a4>
 800a462:	3b01      	subs	r3, #1
 800a464:	2b1f      	cmp	r3, #31
 800a466:	f200 81a9 	bhi.w	800a7bc <RadioIrqProcess+0x3a4>
 800a46a:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <RadioIrqProcess+0x58>)
 800a46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a470:	0800a4f9 	.word	0x0800a4f9
 800a474:	0800a533 	.word	0x0800a533
 800a478:	0800a7bd 	.word	0x0800a7bd
 800a47c:	0800a6d9 	.word	0x0800a6d9
 800a480:	0800a7bd 	.word	0x0800a7bd
 800a484:	0800a7bd 	.word	0x0800a7bd
 800a488:	0800a7bd 	.word	0x0800a7bd
 800a48c:	0800a747 	.word	0x0800a747
 800a490:	0800a7bd 	.word	0x0800a7bd
 800a494:	0800a7bd 	.word	0x0800a7bd
 800a498:	0800a7bd 	.word	0x0800a7bd
 800a49c:	0800a7bd 	.word	0x0800a7bd
 800a4a0:	0800a7bd 	.word	0x0800a7bd
 800a4a4:	0800a7bd 	.word	0x0800a7bd
 800a4a8:	0800a7bd 	.word	0x0800a7bd
 800a4ac:	0800a7bd 	.word	0x0800a7bd
 800a4b0:	0800a7bd 	.word	0x0800a7bd
 800a4b4:	0800a7bd 	.word	0x0800a7bd
 800a4b8:	0800a7bd 	.word	0x0800a7bd
 800a4bc:	0800a7bd 	.word	0x0800a7bd
 800a4c0:	0800a7bd 	.word	0x0800a7bd
 800a4c4:	0800a7bd 	.word	0x0800a7bd
 800a4c8:	0800a7bd 	.word	0x0800a7bd
 800a4cc:	0800a7bd 	.word	0x0800a7bd
 800a4d0:	0800a7bd 	.word	0x0800a7bd
 800a4d4:	0800a7bd 	.word	0x0800a7bd
 800a4d8:	0800a7bd 	.word	0x0800a7bd
 800a4dc:	0800a7bd 	.word	0x0800a7bd
 800a4e0:	0800a7bd 	.word	0x0800a7bd
 800a4e4:	0800a7bd 	.word	0x0800a7bd
 800a4e8:	0800a7bd 	.word	0x0800a7bd
 800a4ec:	0800a757 	.word	0x0800a757
 800a4f0:	2b40      	cmp	r3, #64	; 0x40
 800a4f2:	f000 814b 	beq.w	800a78c <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800a4f6:	e161      	b.n	800a7bc <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800a4f8:	4871      	ldr	r0, [pc, #452]	; (800a6c0 <RadioIrqProcess+0x2a8>)
 800a4fa:	f002 fab9 	bl	800ca70 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800a4fe:	2000      	movs	r0, #0
 800a500:	f000 ffea 	bl	800b4d8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800a504:	f002 f860 	bl	800c5c8 <RFW_Is_LongPacketModeEnabled>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d101      	bne.n	800a512 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800a50e:	f002 f884 	bl	800c61a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800a512:	4b6c      	ldr	r3, [pc, #432]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 8152 	beq.w	800a7c0 <RadioIrqProcess+0x3a8>
 800a51c:	4b69      	ldr	r3, [pc, #420]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 814c 	beq.w	800a7c0 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 800a528:	4b66      	ldr	r3, [pc, #408]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4798      	blx	r3
        break;
 800a530:	e146      	b.n	800a7c0 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800a532:	4865      	ldr	r0, [pc, #404]	; (800a6c8 <RadioIrqProcess+0x2b0>)
 800a534:	f002 fa9c 	bl	800ca70 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800a538:	4b60      	ldr	r3, [pc, #384]	; (800a6bc <RadioIrqProcess+0x2a4>)
 800a53a:	785b      	ldrb	r3, [r3, #1]
 800a53c:	f083 0301 	eor.w	r3, r3, #1
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d014      	beq.n	800a570 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800a546:	2000      	movs	r0, #0
 800a548:	f000 ffc6 	bl	800b4d8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800a54c:	2100      	movs	r1, #0
 800a54e:	f640 1002 	movw	r0, #2306	; 0x902
 800a552:	f001 fd45 	bl	800bfe0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800a556:	f640 1044 	movw	r0, #2372	; 0x944
 800a55a:	f001 fd55 	bl	800c008 <SUBGRF_ReadRegister>
 800a55e:	4603      	mov	r3, r0
 800a560:	f043 0302 	orr.w	r3, r3, #2
 800a564:	b2db      	uxtb	r3, r3
 800a566:	4619      	mov	r1, r3
 800a568:	f640 1044 	movw	r0, #2372	; 0x944
 800a56c:	f001 fd38 	bl	800bfe0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800a570:	1dfb      	adds	r3, r7, #7
 800a572:	22ff      	movs	r2, #255	; 0xff
 800a574:	4619      	mov	r1, r3
 800a576:	4855      	ldr	r0, [pc, #340]	; (800a6cc <RadioIrqProcess+0x2b4>)
 800a578:	f000 fe7e 	bl	800b278 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800a57c:	4854      	ldr	r0, [pc, #336]	; (800a6d0 <RadioIrqProcess+0x2b8>)
 800a57e:	f001 fcdd 	bl	800bf3c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800a582:	4b50      	ldr	r3, [pc, #320]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 811c 	beq.w	800a7c4 <RadioIrqProcess+0x3ac>
 800a58c:	4b4d      	ldr	r3, [pc, #308]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 8116 	beq.w	800a7c4 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 800a598:	4b48      	ldr	r3, [pc, #288]	; (800a6bc <RadioIrqProcess+0x2a4>)
 800a59a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d10e      	bne.n	800a5c0 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800a5a2:	4b48      	ldr	r3, [pc, #288]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	689c      	ldr	r4, [r3, #8]
 800a5a8:	79fb      	ldrb	r3, [r7, #7]
 800a5aa:	b299      	uxth	r1, r3
 800a5ac:	4b43      	ldr	r3, [pc, #268]	; (800a6bc <RadioIrqProcess+0x2a4>)
 800a5ae:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800a5b2:	b21a      	sxth	r2, r3
 800a5b4:	4b41      	ldr	r3, [pc, #260]	; (800a6bc <RadioIrqProcess+0x2a4>)
 800a5b6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800a5ba:	4844      	ldr	r0, [pc, #272]	; (800a6cc <RadioIrqProcess+0x2b4>)
 800a5bc:	47a0      	blx	r4
                break;
 800a5be:	e01d      	b.n	800a5fc <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800a5c0:	4b3e      	ldr	r3, [pc, #248]	; (800a6bc <RadioIrqProcess+0x2a4>)
 800a5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c4:	463a      	mov	r2, r7
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f001 ff4b 	bl	800c464 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800a5ce:	4b3d      	ldr	r3, [pc, #244]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689c      	ldr	r4, [r3, #8]
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	b299      	uxth	r1, r3
 800a5d8:	4b38      	ldr	r3, [pc, #224]	; (800a6bc <RadioIrqProcess+0x2a4>)
 800a5da:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800a5de:	b218      	sxth	r0, r3
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a5e6:	4a3b      	ldr	r2, [pc, #236]	; (800a6d4 <RadioIrqProcess+0x2bc>)
 800a5e8:	fb82 5203 	smull	r5, r2, r2, r3
 800a5ec:	1192      	asrs	r2, r2, #6
 800a5ee:	17db      	asrs	r3, r3, #31
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	b25b      	sxtb	r3, r3
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	4835      	ldr	r0, [pc, #212]	; (800a6cc <RadioIrqProcess+0x2b4>)
 800a5f8:	47a0      	blx	r4
                break;
 800a5fa:	bf00      	nop
        break;
 800a5fc:	e0e2      	b.n	800a7c4 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800a5fe:	2000      	movs	r0, #0
 800a600:	f000 ff6a 	bl	800b4d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a604:	4b2f      	ldr	r3, [pc, #188]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80dd 	beq.w	800a7c8 <RadioIrqProcess+0x3b0>
 800a60e:	4b2d      	ldr	r3, [pc, #180]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 80d7 	beq.w	800a7c8 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800a61a:	4b2a      	ldr	r3, [pc, #168]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	2000      	movs	r0, #0
 800a622:	4798      	blx	r3
        break;
 800a624:	e0d0      	b.n	800a7c8 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 800a626:	2000      	movs	r0, #0
 800a628:	f000 ff56 	bl	800b4d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a62c:	4b25      	ldr	r3, [pc, #148]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 80cb 	beq.w	800a7cc <RadioIrqProcess+0x3b4>
 800a636:	4b23      	ldr	r3, [pc, #140]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80c5 	beq.w	800a7cc <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800a642:	4b20      	ldr	r3, [pc, #128]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	2001      	movs	r0, #1
 800a64a:	4798      	blx	r3
        break;
 800a64c:	e0be      	b.n	800a7cc <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800a64e:	f000 fdf9 	bl	800b244 <SUBGRF_GetOperatingMode>
 800a652:	4603      	mov	r3, r0
 800a654:	2b04      	cmp	r3, #4
 800a656:	d115      	bne.n	800a684 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 800a658:	4819      	ldr	r0, [pc, #100]	; (800a6c0 <RadioIrqProcess+0x2a8>)
 800a65a:	f002 fa09 	bl	800ca70 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a65e:	2000      	movs	r0, #0
 800a660:	f000 ff3a 	bl	800b4d8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a664:	4b17      	ldr	r3, [pc, #92]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 80b1 	beq.w	800a7d0 <RadioIrqProcess+0x3b8>
 800a66e:	4b15      	ldr	r3, [pc, #84]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80ab 	beq.w	800a7d0 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 800a67a:	4b12      	ldr	r3, [pc, #72]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	4798      	blx	r3
        break;
 800a682:	e0a5      	b.n	800a7d0 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800a684:	f000 fdde 	bl	800b244 <SUBGRF_GetOperatingMode>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b05      	cmp	r3, #5
 800a68c:	f040 80a0 	bne.w	800a7d0 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 800a690:	480d      	ldr	r0, [pc, #52]	; (800a6c8 <RadioIrqProcess+0x2b0>)
 800a692:	f002 f9ed 	bl	800ca70 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a696:	2000      	movs	r0, #0
 800a698:	f000 ff1e 	bl	800b4d8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a69c:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f000 8095 	beq.w	800a7d0 <RadioIrqProcess+0x3b8>
 800a6a6:	4b07      	ldr	r3, [pc, #28]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 808f 	beq.w	800a7d0 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800a6b2:	4b04      	ldr	r3, [pc, #16]	; (800a6c4 <RadioIrqProcess+0x2ac>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	4798      	blx	r3
        break;
 800a6ba:	e089      	b.n	800a7d0 <RadioIrqProcess+0x3b8>
 800a6bc:	20000750 	.word	0x20000750
 800a6c0:	200007ac 	.word	0x200007ac
 800a6c4:	2000074c 	.word	0x2000074c
 800a6c8:	200007c4 	.word	0x200007c4
 800a6cc:	2000064c 	.word	0x2000064c
 800a6d0:	20000774 	.word	0x20000774
 800a6d4:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800a6d8:	4b44      	ldr	r3, [pc, #272]	; (800a7ec <RadioIrqProcess+0x3d4>)
 800a6da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d079      	beq.n	800a7d4 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800a6e0:	4a43      	ldr	r2, [pc, #268]	; (800a7f0 <RadioIrqProcess+0x3d8>)
 800a6e2:	4b42      	ldr	r3, [pc, #264]	; (800a7ec <RadioIrqProcess+0x3d4>)
 800a6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e6:	0c1b      	lsrs	r3, r3, #16
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	f640 1003 	movw	r0, #2307	; 0x903
 800a6f0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800a6f2:	4a3f      	ldr	r2, [pc, #252]	; (800a7f0 <RadioIrqProcess+0x3d8>)
 800a6f4:	4b3d      	ldr	r3, [pc, #244]	; (800a7ec <RadioIrqProcess+0x3d4>)
 800a6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f8:	0a1b      	lsrs	r3, r3, #8
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	f640 1004 	movw	r0, #2308	; 0x904
 800a702:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800a704:	4a3a      	ldr	r2, [pc, #232]	; (800a7f0 <RadioIrqProcess+0x3d8>)
 800a706:	4b39      	ldr	r3, [pc, #228]	; (800a7ec <RadioIrqProcess+0x3d4>)
 800a708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	4619      	mov	r1, r3
 800a70e:	f640 1005 	movw	r0, #2309	; 0x905
 800a712:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800a714:	4c36      	ldr	r4, [pc, #216]	; (800a7f0 <RadioIrqProcess+0x3d8>)
 800a716:	4b37      	ldr	r3, [pc, #220]	; (800a7f4 <RadioIrqProcess+0x3dc>)
 800a718:	f640 1002 	movw	r0, #2306	; 0x902
 800a71c:	4798      	blx	r3
 800a71e:	4603      	mov	r3, r0
 800a720:	f043 0301 	orr.w	r3, r3, #1
 800a724:	b2db      	uxtb	r3, r3
 800a726:	4619      	mov	r1, r3
 800a728:	f640 1002 	movw	r0, #2306	; 0x902
 800a72c:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800a72e:	4b2f      	ldr	r3, [pc, #188]	; (800a7ec <RadioIrqProcess+0x3d4>)
 800a730:	2200      	movs	r2, #0
 800a732:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a734:	2300      	movs	r3, #0
 800a736:	2200      	movs	r2, #0
 800a738:	f240 2162 	movw	r1, #610	; 0x262
 800a73c:	f240 2062 	movw	r0, #610	; 0x262
 800a740:	f001 f89e 	bl	800b880 <SUBGRF_SetDioIrqParams>
        break;
 800a744:	e046      	b.n	800a7d4 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800a746:	f001 ff38 	bl	800c5ba <RFW_Is_Init>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d143      	bne.n	800a7d8 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 800a750:	f001 ff69 	bl	800c626 <RFW_ReceivePayload>
        break;
 800a754:	e040      	b.n	800a7d8 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800a756:	4828      	ldr	r0, [pc, #160]	; (800a7f8 <RadioIrqProcess+0x3e0>)
 800a758:	f002 f98a 	bl	800ca70 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800a75c:	4b23      	ldr	r3, [pc, #140]	; (800a7ec <RadioIrqProcess+0x3d4>)
 800a75e:	785b      	ldrb	r3, [r3, #1]
 800a760:	f083 0301 	eor.w	r3, r3, #1
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800a76a:	2000      	movs	r0, #0
 800a76c:	f000 feb4 	bl	800b4d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a770:	4b22      	ldr	r3, [pc, #136]	; (800a7fc <RadioIrqProcess+0x3e4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d031      	beq.n	800a7dc <RadioIrqProcess+0x3c4>
 800a778:	4b20      	ldr	r3, [pc, #128]	; (800a7fc <RadioIrqProcess+0x3e4>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d02c      	beq.n	800a7dc <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800a782:	4b1e      	ldr	r3, [pc, #120]	; (800a7fc <RadioIrqProcess+0x3e4>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	4798      	blx	r3
        break;
 800a78a:	e027      	b.n	800a7dc <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 800a78c:	4b17      	ldr	r3, [pc, #92]	; (800a7ec <RadioIrqProcess+0x3d4>)
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	f083 0301 	eor.w	r3, r3, #1
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	d002      	beq.n	800a7a0 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800a79a:	2000      	movs	r0, #0
 800a79c:	f000 fe9c 	bl	800b4d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800a7a0:	4b16      	ldr	r3, [pc, #88]	; (800a7fc <RadioIrqProcess+0x3e4>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01b      	beq.n	800a7e0 <RadioIrqProcess+0x3c8>
 800a7a8:	4b14      	ldr	r3, [pc, #80]	; (800a7fc <RadioIrqProcess+0x3e4>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d016      	beq.n	800a7e0 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800a7b2:	4b12      	ldr	r3, [pc, #72]	; (800a7fc <RadioIrqProcess+0x3e4>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	4798      	blx	r3
        break;
 800a7ba:	e011      	b.n	800a7e0 <RadioIrqProcess+0x3c8>
        break;
 800a7bc:	bf00      	nop
 800a7be:	e010      	b.n	800a7e2 <RadioIrqProcess+0x3ca>
        break;
 800a7c0:	bf00      	nop
 800a7c2:	e00e      	b.n	800a7e2 <RadioIrqProcess+0x3ca>
        break;
 800a7c4:	bf00      	nop
 800a7c6:	e00c      	b.n	800a7e2 <RadioIrqProcess+0x3ca>
        break;
 800a7c8:	bf00      	nop
 800a7ca:	e00a      	b.n	800a7e2 <RadioIrqProcess+0x3ca>
        break;
 800a7cc:	bf00      	nop
 800a7ce:	e008      	b.n	800a7e2 <RadioIrqProcess+0x3ca>
        break;
 800a7d0:	bf00      	nop
 800a7d2:	e006      	b.n	800a7e2 <RadioIrqProcess+0x3ca>
        break;
 800a7d4:	bf00      	nop
 800a7d6:	e004      	b.n	800a7e2 <RadioIrqProcess+0x3ca>
        break;
 800a7d8:	bf00      	nop
 800a7da:	e002      	b.n	800a7e2 <RadioIrqProcess+0x3ca>
        break;
 800a7dc:	bf00      	nop
 800a7de:	e000      	b.n	800a7e2 <RadioIrqProcess+0x3ca>
        break;
 800a7e0:	bf00      	nop
    }
}
 800a7e2:	bf00      	nop
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20000750 	.word	0x20000750
 800a7f0:	0800a227 	.word	0x0800a227
 800a7f4:	0800a24b 	.word	0x0800a24b
 800a7f8:	200007c4 	.word	0x200007c4
 800a7fc:	2000074c 	.word	0x2000074c

0800a800 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800a804:	4b09      	ldr	r3, [pc, #36]	; (800a82c <RadioTxPrbs+0x2c>)
 800a806:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a80a:	2101      	movs	r1, #1
 800a80c:	4618      	mov	r0, r3
 800a80e:	f001 fcdb 	bl	800c1c8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800a812:	4b07      	ldr	r3, [pc, #28]	; (800a830 <RadioTxPrbs+0x30>)
 800a814:	212d      	movs	r1, #45	; 0x2d
 800a816:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a81a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800a81c:	f000 ff1f 	bl	800b65e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800a820:	4804      	ldr	r0, [pc, #16]	; (800a834 <RadioTxPrbs+0x34>)
 800a822:	f000 fe75 	bl	800b510 <SUBGRF_SetTx>
}
 800a826:	bf00      	nop
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20000750 	.word	0x20000750
 800a830:	0800a227 	.word	0x0800a227
 800a834:	000fffff 	.word	0x000fffff

0800a838 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	4603      	mov	r3, r0
 800a840:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800a842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a846:	4618      	mov	r0, r3
 800a848:	f001 fce6 	bl	800c218 <SUBGRF_SetRfTxPower>
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a850:	210e      	movs	r1, #14
 800a852:	f640 101f 	movw	r0, #2335	; 0x91f
 800a856:	f001 fbc3 	bl	800bfe0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
 800a85c:	2101      	movs	r1, #1
 800a85e:	4618      	mov	r0, r3
 800a860:	f001 fcb2 	bl	800c1c8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800a864:	f000 fef2 	bl	800b64c <SUBGRF_SetTxContinuousWave>
}
 800a868:	bf00      	nop
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800a870:	b480      	push	{r7}
 800a872:	b089      	sub	sp, #36	; 0x24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	4613      	mov	r3, r2
 800a87c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800a886:	2300      	movs	r3, #0
 800a888:	61bb      	str	r3, [r7, #24]
 800a88a:	e011      	b.n	800a8b0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	4413      	add	r3, r2
 800a892:	781a      	ldrb	r2, [r3, #0]
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	68b9      	ldr	r1, [r7, #8]
 800a898:	440b      	add	r3, r1
 800a89a:	43d2      	mvns	r2, r2
 800a89c:	b2d2      	uxtb	r2, r2
 800a89e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	61bb      	str	r3, [r7, #24]
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	dbe9      	blt.n	800a88c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	61bb      	str	r3, [r7, #24]
 800a8bc:	e049      	b.n	800a952 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	425a      	negs	r2, r3
 800a8c2:	f003 0307 	and.w	r3, r3, #7
 800a8c6:	f002 0207 	and.w	r2, r2, #7
 800a8ca:	bf58      	it	pl
 800a8cc:	4253      	negpl	r3, r2
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	f1c3 0307 	rsb	r3, r3, #7
 800a8d4:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	da00      	bge.n	800a8de <payload_integration+0x6e>
 800a8dc:	3307      	adds	r3, #7
 800a8de:	10db      	asrs	r3, r3, #3
 800a8e0:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	425a      	negs	r2, r3
 800a8e8:	f003 0307 	and.w	r3, r3, #7
 800a8ec:	f002 0207 	and.w	r2, r2, #7
 800a8f0:	bf58      	it	pl
 800a8f2:	4253      	negpl	r3, r2
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	f1c3 0307 	rsb	r3, r3, #7
 800a8fa:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	3301      	adds	r3, #1
 800a900:	2b00      	cmp	r3, #0
 800a902:	da00      	bge.n	800a906 <payload_integration+0x96>
 800a904:	3307      	adds	r3, #7
 800a906:	10db      	asrs	r3, r3, #3
 800a908:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800a90a:	7dbb      	ldrb	r3, [r7, #22]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	4413      	add	r3, r2
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	7dfb      	ldrb	r3, [r7, #23]
 800a916:	fa42 f303 	asr.w	r3, r2, r3
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f003 0301 	and.w	r3, r3, #1
 800a920:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800a922:	7ffa      	ldrb	r2, [r7, #31]
 800a924:	7cfb      	ldrb	r3, [r7, #19]
 800a926:	4053      	eors	r3, r2
 800a928:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800a92a:	7d3b      	ldrb	r3, [r7, #20]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	b25a      	sxtb	r2, r3
 800a934:	7ff9      	ldrb	r1, [r7, #31]
 800a936:	7d7b      	ldrb	r3, [r7, #21]
 800a938:	fa01 f303 	lsl.w	r3, r1, r3
 800a93c:	b25b      	sxtb	r3, r3
 800a93e:	4313      	orrs	r3, r2
 800a940:	b259      	sxtb	r1, r3
 800a942:	7d3b      	ldrb	r3, [r7, #20]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	4413      	add	r3, r2
 800a948:	b2ca      	uxtb	r2, r1
 800a94a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	3301      	adds	r3, #1
 800a950:	61bb      	str	r3, [r7, #24]
 800a952:	79fb      	ldrb	r3, [r7, #7]
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	69ba      	ldr	r2, [r7, #24]
 800a958:	429a      	cmp	r2, r3
 800a95a:	dbb0      	blt.n	800a8be <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800a95c:	7ffb      	ldrb	r3, [r7, #31]
 800a95e:	01db      	lsls	r3, r3, #7
 800a960:	b25a      	sxtb	r2, r3
 800a962:	7ffb      	ldrb	r3, [r7, #31]
 800a964:	019b      	lsls	r3, r3, #6
 800a966:	b25b      	sxtb	r3, r3
 800a968:	4313      	orrs	r3, r2
 800a96a:	b25b      	sxtb	r3, r3
 800a96c:	7ffa      	ldrb	r2, [r7, #31]
 800a96e:	2a00      	cmp	r2, #0
 800a970:	d101      	bne.n	800a976 <payload_integration+0x106>
 800a972:	2220      	movs	r2, #32
 800a974:	e000      	b.n	800a978 <payload_integration+0x108>
 800a976:	2200      	movs	r2, #0
 800a978:	4313      	orrs	r3, r2
 800a97a:	b259      	sxtb	r1, r3
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	4413      	add	r3, r2
 800a982:	b2ca      	uxtb	r2, r1
 800a984:	701a      	strb	r2, [r3, #0]
}
 800a986:	bf00      	nop
 800a988:	3724      	adds	r7, #36	; 0x24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bc80      	pop	{r7}
 800a98e:	4770      	bx	lr

0800a990 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08c      	sub	sp, #48	; 0x30
 800a994:	af00      	add	r7, sp, #0
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	607a      	str	r2, [r7, #4]
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	623b      	str	r3, [r7, #32]
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a9ac:	f001 fdff 	bl	800c5ae <RFW_DeInit>

    if( rxContinuous != 0 )
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bf14      	ite	ne
 800a9c0:	2301      	movne	r3, #1
 800a9c2:	2300      	moveq	r3, #0
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	4ba3      	ldr	r3, [pc, #652]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800a9c8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <RadioSetRxGenericConfig+0x48>
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	f000 80dc 	beq.w	800ab8e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800a9d6:	e194      	b.n	800ad02 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d003      	beq.n	800a9e8 <RadioSetRxGenericConfig+0x58>
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d102      	bne.n	800a9ee <RadioSetRxGenericConfig+0x5e>
            return -1;
 800a9e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9ec:	e18a      	b.n	800ad04 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	7f9b      	ldrb	r3, [r3, #30]
 800a9f2:	2b08      	cmp	r3, #8
 800a9f4:	d902      	bls.n	800a9fc <RadioSetRxGenericConfig+0x6c>
            return -1;
 800a9f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9fa:	e183      	b.n	800ad04 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	6919      	ldr	r1, [r3, #16]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	7f9b      	ldrb	r3, [r3, #30]
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	f107 0320 	add.w	r3, r7, #32
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 ff52 	bl	800c8b4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	bf14      	ite	ne
 800aa18:	2301      	movne	r3, #1
 800aa1a:	2300      	moveq	r3, #0
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 fe26 	bl	800b670 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800aa24:	4b8b      	ldr	r3, [pc, #556]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	4a88      	ldr	r2, [pc, #544]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aa32:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f893 2020 	ldrb.w	r2, [r3, #32]
 800aa3a:	4b86      	ldr	r3, [pc, #536]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aa3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f001 fce5 	bl	800c414 <SUBGRF_GetFskBandwidthRegValue>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	4b81      	ldr	r3, [pc, #516]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aa50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800aa54:	4b7f      	ldr	r3, [pc, #508]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	b29a      	uxth	r2, r3
 800aa64:	4b7b      	ldr	r3, [pc, #492]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aa66:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	7fda      	ldrb	r2, [r3, #31]
 800aa6c:	4b79      	ldr	r3, [pc, #484]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aa6e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	7f9b      	ldrb	r3, [r3, #30]
 800aa74:	00db      	lsls	r3, r3, #3
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	4b76      	ldr	r3, [pc, #472]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aa7a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800aa82:	4b74      	ldr	r3, [pc, #464]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aa84:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d105      	bne.n	800aa9c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	4b6f      	ldr	r3, [pc, #444]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aa98:	759a      	strb	r2, [r3, #22]
 800aa9a:	e00b      	b.n	800aab4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d103      	bne.n	800aaae <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800aaa6:	4b6b      	ldr	r3, [pc, #428]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aaa8:	22ff      	movs	r2, #255	; 0xff
 800aaaa:	759a      	strb	r2, [r3, #22]
 800aaac:	e002      	b.n	800aab4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800aaae:	4b69      	ldr	r3, [pc, #420]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800aab0:	22ff      	movs	r2, #255	; 0xff
 800aab2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d004      	beq.n	800aac8 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d12d      	bne.n	800ab24 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800aace:	2bf1      	cmp	r3, #241	; 0xf1
 800aad0:	d00c      	beq.n	800aaec <RadioSetRxGenericConfig+0x15c>
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800aad8:	2bf2      	cmp	r3, #242	; 0xf2
 800aada:	d007      	beq.n	800aaec <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d002      	beq.n	800aaec <RadioSetRxGenericConfig+0x15c>
                return -1;
 800aae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaea:	e10b      	b.n	800ad04 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800aaec:	2300      	movs	r3, #0
 800aaee:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800aaf4:	4b58      	ldr	r3, [pc, #352]	; (800ac58 <RadioSetRxGenericConfig+0x2c8>)
 800aaf6:	6819      	ldr	r1, [r3, #0]
 800aaf8:	f107 0314 	add.w	r3, r7, #20
 800aafc:	4a57      	ldr	r2, [pc, #348]	; (800ac5c <RadioSetRxGenericConfig+0x2cc>)
 800aafe:	4618      	mov	r0, r3
 800ab00:	f001 fd48 	bl	800c594 <RFW_Init>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d002      	beq.n	800ab10 <RadioSetRxGenericConfig+0x180>
                return -1;
 800ab0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab0e:	e0f9      	b.n	800ad04 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800ab10:	4b50      	ldr	r3, [pc, #320]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800ab16:	4b4f      	ldr	r3, [pc, #316]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ab18:	2201      	movs	r2, #1
 800ab1a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800ab1c:	4b4d      	ldr	r3, [pc, #308]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	755a      	strb	r2, [r3, #21]
        {
 800ab22:	e00e      	b.n	800ab42 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800ab2a:	4b4a      	ldr	r3, [pc, #296]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ab2c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800ab34:	4b47      	ldr	r3, [pc, #284]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ab36:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800ab3e:	4b45      	ldr	r3, [pc, #276]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ab40:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800ab42:	f7ff fa6e 	bl	800a022 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800ab46:	2000      	movs	r0, #0
 800ab48:	f7fe fc0a 	bl	8009360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ab4c:	4844      	ldr	r0, [pc, #272]	; (800ac60 <RadioSetRxGenericConfig+0x2d0>)
 800ab4e:	f001 f82d 	bl	800bbac <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ab52:	4844      	ldr	r0, [pc, #272]	; (800ac64 <RadioSetRxGenericConfig+0x2d4>)
 800ab54:	f001 f8fc 	bl	800bd50 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800ab58:	f107 0320 	add.w	r3, r7, #32
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 fbc0 	bl	800b2e2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	8b9b      	ldrh	r3, [r3, #28]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 fc0a 	bl	800b380 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	8b1b      	ldrh	r3, [r3, #24]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 fbe5 	bl	800b340 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ab7c:	fb03 f202 	mul.w	r2, r3, r2
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab88:	4a32      	ldr	r2, [pc, #200]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ab8a:	6093      	str	r3, [r2, #8]
        break;
 800ab8c:	e0b9      	b.n	800ad02 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d102      	bne.n	800ab9c <RadioSetRxGenericConfig+0x20c>
            return -1;
 800ab96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab9a:	e0b3      	b.n	800ad04 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d104      	bne.n	800abb0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800abae:	e002      	b.n	800abb6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800abb0:	23ff      	movs	r3, #255	; 0xff
 800abb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abba:	2b00      	cmp	r3, #0
 800abbc:	bf14      	ite	ne
 800abbe:	2301      	movne	r3, #1
 800abc0:	2300      	moveq	r3, #0
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fd53 	bl	800b670 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 fd5d 	bl	800b68e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800abd4:	4b1f      	ldr	r3, [pc, #124]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800abe2:	4b1c      	ldr	r3, [pc, #112]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800abe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800abee:	4b19      	ldr	r3, [pc, #100]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800abf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800abfa:	4b16      	ldr	r3, [pc, #88]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800abfc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d010      	beq.n	800ac2c <RadioSetRxGenericConfig+0x29c>
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	dc2c      	bgt.n	800ac68 <RadioSetRxGenericConfig+0x2d8>
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d002      	beq.n	800ac18 <RadioSetRxGenericConfig+0x288>
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d005      	beq.n	800ac22 <RadioSetRxGenericConfig+0x292>
            break;
 800ac16:	e027      	b.n	800ac68 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ac18:	4b0e      	ldr	r3, [pc, #56]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ac20:	e023      	b.n	800ac6a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ac22:	4b0c      	ldr	r3, [pc, #48]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ac2a:	e01e      	b.n	800ac6a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ac32:	2b0b      	cmp	r3, #11
 800ac34:	d004      	beq.n	800ac40 <RadioSetRxGenericConfig+0x2b0>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ac3c:	2b0c      	cmp	r3, #12
 800ac3e:	d104      	bne.n	800ac4a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ac40:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ac48:	e00f      	b.n	800ac6a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ac4a:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <RadioSetRxGenericConfig+0x2c4>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ac52:	e00a      	b.n	800ac6a <RadioSetRxGenericConfig+0x2da>
 800ac54:	20000750 	.word	0x20000750
 800ac58:	2000074c 	.word	0x2000074c
 800ac5c:	200007c4 	.word	0x200007c4
 800ac60:	20000788 	.word	0x20000788
 800ac64:	2000075e 	.word	0x2000075e
            break;
 800ac68:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ac6a:	4b28      	ldr	r3, [pc, #160]	; (800ad0c <RadioSetRxGenericConfig+0x37c>)
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800ac74:	4b25      	ldr	r3, [pc, #148]	; (800ad0c <RadioSetRxGenericConfig+0x37c>)
 800ac76:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800ac7e:	4b23      	ldr	r3, [pc, #140]	; (800ad0c <RadioSetRxGenericConfig+0x37c>)
 800ac80:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800ac82:	4a22      	ldr	r2, [pc, #136]	; (800ad0c <RadioSetRxGenericConfig+0x37c>)
 800ac84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac88:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ac90:	4b1e      	ldr	r3, [pc, #120]	; (800ad0c <RadioSetRxGenericConfig+0x37c>)
 800ac92:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800ac9c:	4b1b      	ldr	r3, [pc, #108]	; (800ad0c <RadioSetRxGenericConfig+0x37c>)
 800ac9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800aca2:	f7ff f9be 	bl	800a022 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800aca6:	2001      	movs	r0, #1
 800aca8:	f7fe fb5a 	bl	8009360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800acac:	4818      	ldr	r0, [pc, #96]	; (800ad10 <RadioSetRxGenericConfig+0x380>)
 800acae:	f000 ff7d 	bl	800bbac <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800acb2:	4818      	ldr	r0, [pc, #96]	; (800ad14 <RadioSetRxGenericConfig+0x384>)
 800acb4:	f001 f84c 	bl	800bd50 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800acb8:	4b14      	ldr	r3, [pc, #80]	; (800ad0c <RadioSetRxGenericConfig+0x37c>)
 800acba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d10d      	bne.n	800acde <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800acc2:	f240 7036 	movw	r0, #1846	; 0x736
 800acc6:	f001 f99f 	bl	800c008 <SUBGRF_ReadRegister>
 800acca:	4603      	mov	r3, r0
 800accc:	f023 0304 	bic.w	r3, r3, #4
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	4619      	mov	r1, r3
 800acd4:	f240 7036 	movw	r0, #1846	; 0x736
 800acd8:	f001 f982 	bl	800bfe0 <SUBGRF_WriteRegister>
 800acdc:	e00c      	b.n	800acf8 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800acde:	f240 7036 	movw	r0, #1846	; 0x736
 800ace2:	f001 f991 	bl	800c008 <SUBGRF_ReadRegister>
 800ace6:	4603      	mov	r3, r0
 800ace8:	f043 0304 	orr.w	r3, r3, #4
 800acec:	b2db      	uxtb	r3, r3
 800acee:	4619      	mov	r1, r3
 800acf0:	f240 7036 	movw	r0, #1846	; 0x736
 800acf4:	f001 f974 	bl	800bfe0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800acf8:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <RadioSetRxGenericConfig+0x37c>)
 800acfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acfe:	609a      	str	r2, [r3, #8]
        break;
 800ad00:	bf00      	nop
    }
    return status;
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3730      	adds	r7, #48	; 0x30
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	20000750 	.word	0x20000750
 800ad10:	20000788 	.word	0x20000788
 800ad14:	2000075e 	.word	0x2000075e

0800ad18 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08e      	sub	sp, #56	; 0x38
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	607b      	str	r3, [r7, #4]
 800ad22:	4603      	mov	r3, r0
 800ad24:	73fb      	strb	r3, [r7, #15]
 800ad26:	4613      	mov	r3, r2
 800ad28:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad2e:	2300      	movs	r3, #0
 800ad30:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ad32:	f001 fc3c 	bl	800c5ae <RFW_DeInit>
    switch( modem )
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	f200 8204 	bhi.w	800b146 <RadioSetTxGenericConfig+0x42e>
 800ad3e:	a201      	add	r2, pc, #4	; (adr r2, 800ad44 <RadioSetTxGenericConfig+0x2c>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800aec9 	.word	0x0800aec9
 800ad48:	0800b011 	.word	0x0800b011
 800ad4c:	0800b109 	.word	0x0800b109
 800ad50:	0800ad55 	.word	0x0800ad55
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	7c9b      	ldrb	r3, [r3, #18]
 800ad58:	2b08      	cmp	r3, #8
 800ad5a:	d902      	bls.n	800ad62 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800ad5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad60:	e206      	b.n	800b170 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	6899      	ldr	r1, [r3, #8]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	7c9b      	ldrb	r3, [r3, #18]
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad70:	4618      	mov	r0, r3
 800ad72:	f001 fd9f 	bl	800c8b4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d102      	bne.n	800ad84 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800ad7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad82:	e1f5      	b.n	800b170 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f242 7210 	movw	r2, #10000	; 0x2710
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d813      	bhi.n	800adb8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800ad90:	2302      	movs	r3, #2
 800ad92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800ad96:	4b99      	ldr	r3, [pc, #612]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ad98:	2203      	movs	r2, #3
 800ad9a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800ad9c:	4b97      	ldr	r3, [pc, #604]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ad9e:	2203      	movs	r2, #3
 800ada0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a94      	ldr	r2, [pc, #592]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800adaa:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	7cda      	ldrb	r2, [r3, #19]
 800adb0:	4b92      	ldr	r3, [pc, #584]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800adb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adb6:	e017      	b.n	800ade8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800adb8:	2300      	movs	r3, #0
 800adba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800adbe:	4b8f      	ldr	r3, [pc, #572]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800adc4:	4b8d      	ldr	r3, [pc, #564]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a8a      	ldr	r2, [pc, #552]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800add2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	7cda      	ldrb	r2, [r3, #19]
 800add8:	4b88      	ldr	r3, [pc, #544]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800adda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	089b      	lsrs	r3, r3, #2
 800ade4:	4a85      	ldr	r2, [pc, #532]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ade6:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	b29b      	uxth	r3, r3
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	4b82      	ldr	r3, [pc, #520]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800adf4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800adf6:	4b81      	ldr	r3, [pc, #516]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800adf8:	2204      	movs	r2, #4
 800adfa:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	7c9b      	ldrb	r3, [r3, #18]
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	4b7d      	ldr	r3, [pc, #500]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ae06:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800ae08:	4b7c      	ldr	r3, [pc, #496]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	7d9b      	ldrb	r3, [r3, #22]
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d003      	beq.n	800ae1e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	7d1b      	ldrb	r3, [r3, #20]
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d12b      	bne.n	800ae76 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	7d5b      	ldrb	r3, [r3, #21]
 800ae22:	2bf1      	cmp	r3, #241	; 0xf1
 800ae24:	d00a      	beq.n	800ae3c <RadioSetTxGenericConfig+0x124>
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	7d5b      	ldrb	r3, [r3, #21]
 800ae2a:	2bf2      	cmp	r3, #242	; 0xf2
 800ae2c:	d006      	beq.n	800ae3c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	7d5b      	ldrb	r3, [r3, #21]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d002      	beq.n	800ae3c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800ae36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae3a:	e199      	b.n	800b170 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800ae40:	2301      	movs	r3, #1
 800ae42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800ae46:	4b6e      	ldr	r3, [pc, #440]	; (800b000 <RadioSetTxGenericConfig+0x2e8>)
 800ae48:	6819      	ldr	r1, [r3, #0]
 800ae4a:	f107 0320 	add.w	r3, r7, #32
 800ae4e:	4a6d      	ldr	r2, [pc, #436]	; (800b004 <RadioSetTxGenericConfig+0x2ec>)
 800ae50:	4618      	mov	r0, r3
 800ae52:	f001 fb9f 	bl	800c594 <RFW_Init>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800ae5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae60:	e186      	b.n	800b170 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800ae62:	4b66      	ldr	r3, [pc, #408]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800ae68:	4b64      	ldr	r3, [pc, #400]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800ae6e:	4b63      	ldr	r3, [pc, #396]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	755a      	strb	r2, [r3, #21]
        {
 800ae74:	e00b      	b.n	800ae8e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	7d5a      	ldrb	r2, [r3, #21]
 800ae7a:	4b60      	ldr	r3, [pc, #384]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ae7c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	7d9a      	ldrb	r2, [r3, #22]
 800ae82:	4b5e      	ldr	r3, [pc, #376]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ae84:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	7d1a      	ldrb	r2, [r3, #20]
 800ae8a:	4b5c      	ldr	r3, [pc, #368]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800ae8c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800ae8e:	f7ff f8c8 	bl	800a022 <RadioStandby>
        RadioSetModem( radio_modem );
 800ae92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fe fa62 	bl	8009360 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ae9c:	485a      	ldr	r0, [pc, #360]	; (800b008 <RadioSetTxGenericConfig+0x2f0>)
 800ae9e:	f000 fe85 	bl	800bbac <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800aea2:	485a      	ldr	r0, [pc, #360]	; (800b00c <RadioSetTxGenericConfig+0x2f4>)
 800aea4:	f000 ff54 	bl	800bd50 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800aea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 fa18 	bl	800b2e2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	8a1b      	ldrh	r3, [r3, #16]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 fa62 	bl	800b380 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	899b      	ldrh	r3, [r3, #12]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 fa3d 	bl	800b340 <SUBGRF_SetCrcPolynomial>
        break;
 800aec6:	e13f      	b.n	800b148 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d102      	bne.n	800aed6 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800aed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aed4:	e14c      	b.n	800b170 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	7c9b      	ldrb	r3, [r3, #18]
 800aeda:	2b08      	cmp	r3, #8
 800aedc:	d902      	bls.n	800aee4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800aede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aee2:	e145      	b.n	800b170 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	6899      	ldr	r1, [r3, #8]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	7c9b      	ldrb	r3, [r3, #18]
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aef2:	4618      	mov	r0, r3
 800aef4:	f001 fcde 	bl	800c8b4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800aef8:	4b40      	ldr	r3, [pc, #256]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a3d      	ldr	r2, [pc, #244]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800af06:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	7cda      	ldrb	r2, [r3, #19]
 800af0c:	4b3b      	ldr	r3, [pc, #236]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800af0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	4a39      	ldr	r2, [pc, #228]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800af18:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800af1a:	4b38      	ldr	r3, [pc, #224]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	b29b      	uxth	r3, r3
 800af26:	00db      	lsls	r3, r3, #3
 800af28:	b29a      	uxth	r2, r3
 800af2a:	4b34      	ldr	r3, [pc, #208]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800af2c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800af2e:	4b33      	ldr	r3, [pc, #204]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800af30:	2204      	movs	r2, #4
 800af32:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	7c9b      	ldrb	r3, [r3, #18]
 800af38:	00db      	lsls	r3, r3, #3
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	4b2f      	ldr	r3, [pc, #188]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800af3e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800af40:	4b2e      	ldr	r3, [pc, #184]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800af42:	2200      	movs	r2, #0
 800af44:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	7d9b      	ldrb	r3, [r3, #22]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d003      	beq.n	800af56 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	7d1b      	ldrb	r3, [r3, #20]
 800af52:	2b02      	cmp	r3, #2
 800af54:	d12a      	bne.n	800afac <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	7d5b      	ldrb	r3, [r3, #21]
 800af5a:	2bf1      	cmp	r3, #241	; 0xf1
 800af5c:	d00a      	beq.n	800af74 <RadioSetTxGenericConfig+0x25c>
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	7d5b      	ldrb	r3, [r3, #21]
 800af62:	2bf2      	cmp	r3, #242	; 0xf2
 800af64:	d006      	beq.n	800af74 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	7d5b      	ldrb	r3, [r3, #21]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d002      	beq.n	800af74 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800af6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af72:	e0fd      	b.n	800b170 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800af74:	2301      	movs	r3, #1
 800af76:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800af7c:	4b20      	ldr	r3, [pc, #128]	; (800b000 <RadioSetTxGenericConfig+0x2e8>)
 800af7e:	6819      	ldr	r1, [r3, #0]
 800af80:	f107 0314 	add.w	r3, r7, #20
 800af84:	4a1f      	ldr	r2, [pc, #124]	; (800b004 <RadioSetTxGenericConfig+0x2ec>)
 800af86:	4618      	mov	r0, r3
 800af88:	f001 fb04 	bl	800c594 <RFW_Init>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800af92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af96:	e0eb      	b.n	800b170 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800af98:	4b18      	ldr	r3, [pc, #96]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800af9e:	4b17      	ldr	r3, [pc, #92]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800afa0:	2201      	movs	r2, #1
 800afa2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800afa4:	4b15      	ldr	r3, [pc, #84]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	755a      	strb	r2, [r3, #21]
        {
 800afaa:	e00b      	b.n	800afc4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	7d5a      	ldrb	r2, [r3, #21]
 800afb0:	4b12      	ldr	r3, [pc, #72]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800afb2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	7d9a      	ldrb	r2, [r3, #22]
 800afb8:	4b10      	ldr	r3, [pc, #64]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800afba:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	7d1a      	ldrb	r2, [r3, #20]
 800afc0:	4b0e      	ldr	r3, [pc, #56]	; (800affc <RadioSetTxGenericConfig+0x2e4>)
 800afc2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800afc4:	f7ff f82d 	bl	800a022 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800afc8:	2000      	movs	r0, #0
 800afca:	f7fe f9c9 	bl	8009360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800afce:	480e      	ldr	r0, [pc, #56]	; (800b008 <RadioSetTxGenericConfig+0x2f0>)
 800afd0:	f000 fdec 	bl	800bbac <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800afd4:	480d      	ldr	r0, [pc, #52]	; (800b00c <RadioSetTxGenericConfig+0x2f4>)
 800afd6:	f000 febb 	bl	800bd50 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800afda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 f97f 	bl	800b2e2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	8a1b      	ldrh	r3, [r3, #16]
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 f9c9 	bl	800b380 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	899b      	ldrh	r3, [r3, #12]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 f9a4 	bl	800b340 <SUBGRF_SetCrcPolynomial>
        break;
 800aff8:	e0a6      	b.n	800b148 <RadioSetTxGenericConfig+0x430>
 800affa:	bf00      	nop
 800affc:	20000750 	.word	0x20000750
 800b000:	2000074c 	.word	0x2000074c
 800b004:	200007ac 	.word	0x200007ac
 800b008:	20000788 	.word	0x20000788
 800b00c:	2000075e 	.word	0x2000075e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b010:	4b59      	ldr	r3, [pc, #356]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	781a      	ldrb	r2, [r3, #0]
 800b01c:	4b56      	ldr	r3, [pc, #344]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b01e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	785a      	ldrb	r2, [r3, #1]
 800b026:	4b54      	ldr	r3, [pc, #336]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	789a      	ldrb	r2, [r3, #2]
 800b030:	4b51      	ldr	r3, [pc, #324]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b032:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	78db      	ldrb	r3, [r3, #3]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d010      	beq.n	800b060 <RadioSetTxGenericConfig+0x348>
 800b03e:	2b02      	cmp	r3, #2
 800b040:	dc20      	bgt.n	800b084 <RadioSetTxGenericConfig+0x36c>
 800b042:	2b00      	cmp	r3, #0
 800b044:	d002      	beq.n	800b04c <RadioSetTxGenericConfig+0x334>
 800b046:	2b01      	cmp	r3, #1
 800b048:	d005      	beq.n	800b056 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800b04a:	e01b      	b.n	800b084 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b04c:	4b4a      	ldr	r3, [pc, #296]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b054:	e017      	b.n	800b086 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b056:	4b48      	ldr	r3, [pc, #288]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b058:	2201      	movs	r2, #1
 800b05a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b05e:	e012      	b.n	800b086 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	2b0b      	cmp	r3, #11
 800b066:	d003      	beq.n	800b070 <RadioSetTxGenericConfig+0x358>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	2b0c      	cmp	r3, #12
 800b06e:	d104      	bne.n	800b07a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b070:	4b41      	ldr	r3, [pc, #260]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b078:	e005      	b.n	800b086 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b07a:	4b3f      	ldr	r3, [pc, #252]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b082:	e000      	b.n	800b086 <RadioSetTxGenericConfig+0x36e>
            break;
 800b084:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b086:	4b3c      	ldr	r3, [pc, #240]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b088:	2201      	movs	r2, #1
 800b08a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	889a      	ldrh	r2, [r3, #4]
 800b090:	4b39      	ldr	r3, [pc, #228]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b092:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	799a      	ldrb	r2, [r3, #6]
 800b098:	4b37      	ldr	r3, [pc, #220]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b09a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	79da      	ldrb	r2, [r3, #7]
 800b0a0:	4b35      	ldr	r3, [pc, #212]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b0a2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	7a1a      	ldrb	r2, [r3, #8]
 800b0aa:	4b33      	ldr	r3, [pc, #204]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b0ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800b0b0:	f7fe ffb7 	bl	800a022 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	f7fe f953 	bl	8009360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b0ba:	4830      	ldr	r0, [pc, #192]	; (800b17c <RadioSetTxGenericConfig+0x464>)
 800b0bc:	f000 fd76 	bl	800bbac <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b0c0:	482f      	ldr	r0, [pc, #188]	; (800b180 <RadioSetTxGenericConfig+0x468>)
 800b0c2:	f000 fe45 	bl	800bd50 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800b0c6:	4b2c      	ldr	r3, [pc, #176]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b0c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0cc:	2b06      	cmp	r3, #6
 800b0ce:	d10d      	bne.n	800b0ec <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800b0d0:	f640 0089 	movw	r0, #2185	; 0x889
 800b0d4:	f000 ff98 	bl	800c008 <SUBGRF_ReadRegister>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	f023 0304 	bic.w	r3, r3, #4
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	f640 0089 	movw	r0, #2185	; 0x889
 800b0e6:	f000 ff7b 	bl	800bfe0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800b0ea:	e02d      	b.n	800b148 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800b0ec:	f640 0089 	movw	r0, #2185	; 0x889
 800b0f0:	f000 ff8a 	bl	800c008 <SUBGRF_ReadRegister>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f043 0304 	orr.w	r3, r3, #4
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	f640 0089 	movw	r0, #2185	; 0x889
 800b102:	f000 ff6d 	bl	800bfe0 <SUBGRF_WriteRegister>
        break;
 800b106:	e01f      	b.n	800b148 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d004      	beq.n	800b11a <RadioSetTxGenericConfig+0x402>
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b118:	d902      	bls.n	800b120 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800b11a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b11e:	e027      	b.n	800b170 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800b120:	2003      	movs	r0, #3
 800b122:	f7fe f91d 	bl	8009360 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800b126:	4b14      	ldr	r3, [pc, #80]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b128:	2202      	movs	r2, #2
 800b12a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a11      	ldr	r2, [pc, #68]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b134:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800b136:	4b10      	ldr	r3, [pc, #64]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b138:	2216      	movs	r2, #22
 800b13a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b13e:	480f      	ldr	r0, [pc, #60]	; (800b17c <RadioSetTxGenericConfig+0x464>)
 800b140:	f000 fd34 	bl	800bbac <SUBGRF_SetModulationParams>
        break;
 800b144:	e000      	b.n	800b148 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800b146:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800b148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 f863 	bl	800c218 <SUBGRF_SetRfTxPower>
 800b152:	4603      	mov	r3, r0
 800b154:	461a      	mov	r2, r3
 800b156:	4b08      	ldr	r3, [pc, #32]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b158:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800b15c:	4b06      	ldr	r3, [pc, #24]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b15e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800b162:	4618      	mov	r0, r3
 800b164:	f001 fa37 	bl	800c5d6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800b168:	4a03      	ldr	r2, [pc, #12]	; (800b178 <RadioSetTxGenericConfig+0x460>)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6053      	str	r3, [r2, #4]
    return 0;
 800b16e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800b170:	4618      	mov	r0, r3
 800b172:	3738      	adds	r7, #56	; 0x38
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	20000750 	.word	0x20000750
 800b17c:	20000788 	.word	0x20000788
 800b180:	2000075e 	.word	0x2000075e

0800b184 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800b18c:	2301      	movs	r3, #1
 800b18e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800b190:	7bfb      	ldrb	r3, [r7, #15]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	bc80      	pop	{r7}
 800b19a:	4770      	bx	lr

0800b19c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800b1a6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bc80      	pop	{r7}
 800b1b0:	4770      	bx	lr
	...

0800b1b4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d002      	beq.n	800b1c8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800b1c2:	4a1d      	ldr	r2, [pc, #116]	; (800b238 <SUBGRF_Init+0x84>)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800b1c8:	f7f6 fb44 	bl	8001854 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800b1cc:	2002      	movs	r0, #2
 800b1ce:	f001 f8ff 	bl	800c3d0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800b1d2:	4b1a      	ldr	r3, [pc, #104]	; (800b23c <SUBGRF_Init+0x88>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800b1d8:	2000      	movs	r0, #0
 800b1da:	f000 f97d 	bl	800b4d8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800b1de:	f001 fb3e 	bl	800c85e <RBI_IsTCXO>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d10e      	bne.n	800b206 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800b1e8:	2140      	movs	r1, #64	; 0x40
 800b1ea:	2001      	movs	r0, #1
 800b1ec:	f000 fb82 	bl	800b8f4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	f640 1011 	movw	r0, #2321	; 0x911
 800b1f6:	f000 fef3 	bl	800bfe0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800b1fa:	237f      	movs	r3, #127	; 0x7f
 800b1fc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800b1fe:	7b38      	ldrb	r0, [r7, #12]
 800b200:	f000 fa8b 	bl	800b71a <SUBGRF_Calibrate>
 800b204:	e009      	b.n	800b21a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800b206:	2120      	movs	r1, #32
 800b208:	f640 1011 	movw	r0, #2321	; 0x911
 800b20c:	f000 fee8 	bl	800bfe0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800b210:	2120      	movs	r1, #32
 800b212:	f640 1012 	movw	r0, #2322	; 0x912
 800b216:	f000 fee3 	bl	800bfe0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800b21a:	210e      	movs	r1, #14
 800b21c:	f640 101f 	movw	r0, #2335	; 0x91f
 800b220:	f000 fede 	bl	800bfe0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800b224:	f001 fa86 	bl	800c734 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800b228:	4b05      	ldr	r3, [pc, #20]	; (800b240 <SUBGRF_Init+0x8c>)
 800b22a:	2201      	movs	r2, #1
 800b22c:	701a      	strb	r2, [r3, #0]
}
 800b22e:	bf00      	nop
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	200007e8 	.word	0x200007e8
 800b23c:	200007e4 	.word	0x200007e4
 800b240:	200007dc 	.word	0x200007dc

0800b244 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800b244:	b480      	push	{r7}
 800b246:	af00      	add	r7, sp, #0
    return OperatingMode;
 800b248:	4b02      	ldr	r3, [pc, #8]	; (800b254 <SUBGRF_GetOperatingMode+0x10>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	46bd      	mov	sp, r7
 800b250:	bc80      	pop	{r7}
 800b252:	4770      	bx	lr
 800b254:	200007dc 	.word	0x200007dc

0800b258 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	460b      	mov	r3, r1
 800b262:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800b264:	78fb      	ldrb	r3, [r7, #3]
 800b266:	461a      	mov	r2, r3
 800b268:	6879      	ldr	r1, [r7, #4]
 800b26a:	2000      	movs	r0, #0
 800b26c:	f000 ff24 	bl	800c0b8 <SUBGRF_WriteBuffer>
}
 800b270:	bf00      	nop
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	4613      	mov	r3, r2
 800b284:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800b28a:	f107 0317 	add.w	r3, r7, #23
 800b28e:	4619      	mov	r1, r3
 800b290:	68b8      	ldr	r0, [r7, #8]
 800b292:	f000 fe27 	bl	800bee4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	79fa      	ldrb	r2, [r7, #7]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d201      	bcs.n	800b2a4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e007      	b.n	800b2b4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800b2a4:	7df8      	ldrb	r0, [r7, #23]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	68f9      	ldr	r1, [r7, #12]
 800b2ae:	f000 ff25 	bl	800c0fc <SUBGRF_ReadBuffer>

    return 0;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f7ff ffc2 	bl	800b258 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f91b 	bl	800b510 <SUBGRF_SetTx>
}
 800b2da:	bf00      	nop
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b082      	sub	sp, #8
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800b2ea:	2208      	movs	r2, #8
 800b2ec:	6879      	ldr	r1, [r7, #4]
 800b2ee:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800b2f2:	f000 fe9d 	bl	800c030 <SUBGRF_WriteRegisters>
    return 0;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800b30a:	88fb      	ldrh	r3, [r7, #6]
 800b30c:	0a1b      	lsrs	r3, r3, #8
 800b30e:	b29b      	uxth	r3, r3
 800b310:	b2db      	uxtb	r3, r3
 800b312:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800b314:	88fb      	ldrh	r3, [r7, #6]
 800b316:	b2db      	uxtb	r3, r3
 800b318:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800b31a:	f000 fb6f 	bl	800b9fc <SUBGRF_GetPacketType>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d108      	bne.n	800b336 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800b324:	f107 030c 	add.w	r3, r7, #12
 800b328:	2202      	movs	r2, #2
 800b32a:	4619      	mov	r1, r3
 800b32c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800b330:	f000 fe7e 	bl	800c030 <SUBGRF_WriteRegisters>
            break;
 800b334:	e000      	b.n	800b338 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800b336:	bf00      	nop
    }
}
 800b338:	bf00      	nop
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	4603      	mov	r3, r0
 800b348:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800b34a:	88fb      	ldrh	r3, [r7, #6]
 800b34c:	0a1b      	lsrs	r3, r3, #8
 800b34e:	b29b      	uxth	r3, r3
 800b350:	b2db      	uxtb	r3, r3
 800b352:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800b354:	88fb      	ldrh	r3, [r7, #6]
 800b356:	b2db      	uxtb	r3, r3
 800b358:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800b35a:	f000 fb4f 	bl	800b9fc <SUBGRF_GetPacketType>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d108      	bne.n	800b376 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800b364:	f107 030c 	add.w	r3, r7, #12
 800b368:	2202      	movs	r2, #2
 800b36a:	4619      	mov	r1, r3
 800b36c:	f240 60be 	movw	r0, #1726	; 0x6be
 800b370:	f000 fe5e 	bl	800c030 <SUBGRF_WriteRegisters>
            break;
 800b374:	e000      	b.n	800b378 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800b376:	bf00      	nop
    }
}
 800b378:	bf00      	nop
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800b38e:	f000 fb35 	bl	800b9fc <SUBGRF_GetPacketType>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d121      	bne.n	800b3dc <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800b398:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800b39c:	f000 fe34 	bl	800c008 <SUBGRF_ReadRegister>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	f023 0301 	bic.w	r3, r3, #1
 800b3a6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800b3a8:	88fb      	ldrh	r3, [r7, #6]
 800b3aa:	0a1b      	lsrs	r3, r3, #8
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	b25b      	sxtb	r3, r3
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	b25a      	sxtb	r2, r3
 800b3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	b25b      	sxtb	r3, r3
 800b3be:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800b3c8:	f000 fe0a 	bl	800bfe0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800b3cc:	88fb      	ldrh	r3, [r7, #6]
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800b3d6:	f000 fe03 	bl	800bfe0 <SUBGRF_WriteRegister>
            break;
 800b3da:	e000      	b.n	800b3de <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800b3dc:	bf00      	nop
    }
}
 800b3de:	bf00      	nop
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800b3f8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b3fc:	f000 fe04 	bl	800c008 <SUBGRF_ReadRegister>
 800b400:	4603      	mov	r3, r0
 800b402:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	f023 0301 	bic.w	r3, r3, #1
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	4619      	mov	r1, r3
 800b40e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b412:	f000 fde5 	bl	800bfe0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800b416:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b41a:	f000 fdf5 	bl	800c008 <SUBGRF_ReadRegister>
 800b41e:	4603      	mov	r3, r0
 800b420:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800b422:	79bb      	ldrb	r3, [r7, #6]
 800b424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	4619      	mov	r1, r3
 800b42c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b430:	f000 fdd6 	bl	800bfe0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800b434:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800b438:	f000 f88a 	bl	800b550 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800b43c:	463b      	mov	r3, r7
 800b43e:	2204      	movs	r2, #4
 800b440:	4619      	mov	r1, r3
 800b442:	f640 0019 	movw	r0, #2073	; 0x819
 800b446:	f000 fe15 	bl	800c074 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800b44a:	2000      	movs	r0, #0
 800b44c:	f000 f844 	bl	800b4d8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	4619      	mov	r1, r3
 800b454:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b458:	f000 fdc2 	bl	800bfe0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800b45c:	79bb      	ldrb	r3, [r7, #6]
 800b45e:	4619      	mov	r1, r3
 800b460:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b464:	f000 fdbc 	bl	800bfe0 <SUBGRF_WriteRegister>

    return number;
 800b468:	683b      	ldr	r3, [r7, #0]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
	...

0800b474 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800b47c:	2000      	movs	r0, #0
 800b47e:	f001 f999 	bl	800c7b4 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800b482:	2002      	movs	r0, #2
 800b484:	f000 ffa4 	bl	800c3d0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b488:	793b      	ldrb	r3, [r7, #4]
 800b48a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b494:	793b      	ldrb	r3, [r7, #4]
 800b496:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b49e:	b25b      	sxtb	r3, r3
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800b4a4:	793b      	ldrb	r3, [r7, #4]
 800b4a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	b25b      	sxtb	r3, r3
 800b4b2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b4b4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800b4b6:	f107 030f 	add.w	r3, r7, #15
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	4619      	mov	r1, r3
 800b4be:	2084      	movs	r0, #132	; 0x84
 800b4c0:	f000 fe3e 	bl	800c140 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800b4c4:	4b03      	ldr	r3, [pc, #12]	; (800b4d4 <SUBGRF_SetSleep+0x60>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	701a      	strb	r2, [r3, #0]
}
 800b4ca:	bf00      	nop
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	200007dc 	.word	0x200007dc

0800b4d8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800b4e2:	1dfb      	adds	r3, r7, #7
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	2080      	movs	r0, #128	; 0x80
 800b4ea:	f000 fe29 	bl	800c140 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d103      	bne.n	800b4fc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800b4f4:	4b05      	ldr	r3, [pc, #20]	; (800b50c <SUBGRF_SetStandby+0x34>)
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800b4fa:	e002      	b.n	800b502 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800b4fc:	4b03      	ldr	r3, [pc, #12]	; (800b50c <SUBGRF_SetStandby+0x34>)
 800b4fe:	2202      	movs	r2, #2
 800b500:	701a      	strb	r2, [r3, #0]
}
 800b502:	bf00      	nop
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	200007dc 	.word	0x200007dc

0800b510 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800b518:	4b0c      	ldr	r3, [pc, #48]	; (800b54c <SUBGRF_SetTx+0x3c>)
 800b51a:	2204      	movs	r2, #4
 800b51c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	0c1b      	lsrs	r3, r3, #16
 800b522:	b2db      	uxtb	r3, r3
 800b524:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	0a1b      	lsrs	r3, r3, #8
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	b2db      	uxtb	r3, r3
 800b532:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800b534:	f107 030c 	add.w	r3, r7, #12
 800b538:	2203      	movs	r2, #3
 800b53a:	4619      	mov	r1, r3
 800b53c:	2083      	movs	r0, #131	; 0x83
 800b53e:	f000 fdff 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	200007dc 	.word	0x200007dc

0800b550 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b558:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <SUBGRF_SetRx+0x3c>)
 800b55a:	2205      	movs	r2, #5
 800b55c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	0c1b      	lsrs	r3, r3, #16
 800b562:	b2db      	uxtb	r3, r3
 800b564:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	0a1b      	lsrs	r3, r3, #8
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	b2db      	uxtb	r3, r3
 800b572:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b574:	f107 030c 	add.w	r3, r7, #12
 800b578:	2203      	movs	r2, #3
 800b57a:	4619      	mov	r1, r3
 800b57c:	2082      	movs	r0, #130	; 0x82
 800b57e:	f000 fddf 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b582:	bf00      	nop
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	200007dc 	.word	0x200007dc

0800b590 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b598:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <SUBGRF_SetRxBoosted+0x44>)
 800b59a:	2205      	movs	r2, #5
 800b59c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800b59e:	2197      	movs	r1, #151	; 0x97
 800b5a0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800b5a4:	f000 fd1c 	bl	800bfe0 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	0c1b      	lsrs	r3, r3, #16
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	0a1b      	lsrs	r3, r3, #8
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b5be:	f107 030c 	add.w	r3, r7, #12
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	2082      	movs	r0, #130	; 0x82
 800b5c8:	f000 fdba 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b5cc:	bf00      	nop
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	200007dc 	.word	0x200007dc

0800b5d8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	0c1b      	lsrs	r3, r3, #16
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	0a1b      	lsrs	r3, r3, #8
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	0c1b      	lsrs	r3, r3, #16
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	0a1b      	lsrs	r3, r3, #8
 800b604:	b2db      	uxtb	r3, r3
 800b606:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800b60e:	f107 0308 	add.w	r3, r7, #8
 800b612:	2206      	movs	r2, #6
 800b614:	4619      	mov	r1, r3
 800b616:	2094      	movs	r0, #148	; 0x94
 800b618:	f000 fd92 	bl	800c140 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800b61c:	4b03      	ldr	r3, [pc, #12]	; (800b62c <SUBGRF_SetRxDutyCycle+0x54>)
 800b61e:	2206      	movs	r2, #6
 800b620:	701a      	strb	r2, [r3, #0]
}
 800b622:	bf00      	nop
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	200007dc 	.word	0x200007dc

0800b630 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800b634:	2200      	movs	r2, #0
 800b636:	2100      	movs	r1, #0
 800b638:	20c5      	movs	r0, #197	; 0xc5
 800b63a:	f000 fd81 	bl	800c140 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800b63e:	4b02      	ldr	r3, [pc, #8]	; (800b648 <SUBGRF_SetCad+0x18>)
 800b640:	2207      	movs	r2, #7
 800b642:	701a      	strb	r2, [r3, #0]
}
 800b644:	bf00      	nop
 800b646:	bd80      	pop	{r7, pc}
 800b648:	200007dc 	.word	0x200007dc

0800b64c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800b650:	2200      	movs	r2, #0
 800b652:	2100      	movs	r1, #0
 800b654:	20d1      	movs	r0, #209	; 0xd1
 800b656:	f000 fd73 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b65a:	bf00      	nop
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800b662:	2200      	movs	r2, #0
 800b664:	2100      	movs	r1, #0
 800b666:	20d2      	movs	r0, #210	; 0xd2
 800b668:	f000 fd6a 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b66c:	bf00      	nop
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	4603      	mov	r3, r0
 800b678:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800b67a:	1dfb      	adds	r3, r7, #7
 800b67c:	2201      	movs	r2, #1
 800b67e:	4619      	mov	r1, r3
 800b680:	209f      	movs	r0, #159	; 0x9f
 800b682:	f000 fd5d 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b686:	bf00      	nop
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	4603      	mov	r3, r0
 800b696:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800b698:	1dfb      	adds	r3, r7, #7
 800b69a:	2201      	movs	r2, #1
 800b69c:	4619      	mov	r1, r3
 800b69e:	20a0      	movs	r0, #160	; 0xa0
 800b6a0:	f000 fd4e 	bl	800c140 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	2b3f      	cmp	r3, #63	; 0x3f
 800b6a8:	d91c      	bls.n	800b6e4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800b6aa:	79fb      	ldrb	r3, [r7, #7]
 800b6ac:	085b      	lsrs	r3, r3, #1
 800b6ae:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800b6b8:	e005      	b.n	800b6c6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	089b      	lsrs	r3, r3, #2
 800b6be:	73fb      	strb	r3, [r7, #15]
            exp++;
 800b6c0:	7bbb      	ldrb	r3, [r7, #14]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	2b1f      	cmp	r3, #31
 800b6ca:	d8f6      	bhi.n	800b6ba <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	7bbb      	ldrb	r3, [r7, #14]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800b6d8:	7b7b      	ldrb	r3, [r7, #13]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	f240 7006 	movw	r0, #1798	; 0x706
 800b6e0:	f000 fc7e 	bl	800bfe0 <SUBGRF_WriteRegister>
    }
}
 800b6e4:	bf00      	nop
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800b6f2:	f001 f8bf 	bl	800c874 <RBI_IsDCDC>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d102      	bne.n	800b702 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	71fb      	strb	r3, [r7, #7]
 800b700:	e001      	b.n	800b706 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800b702:	2300      	movs	r3, #0
 800b704:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800b706:	1dfb      	adds	r3, r7, #7
 800b708:	2201      	movs	r2, #1
 800b70a:	4619      	mov	r1, r3
 800b70c:	2096      	movs	r0, #150	; 0x96
 800b70e:	f000 fd17 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b084      	sub	sp, #16
 800b71e:	af00      	add	r7, sp, #0
 800b720:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b722:	793b      	ldrb	r3, [r7, #4]
 800b724:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	019b      	lsls	r3, r3, #6
 800b72c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b72e:	793b      	ldrb	r3, [r7, #4]
 800b730:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b734:	b2db      	uxtb	r3, r3
 800b736:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b738:	b25b      	sxtb	r3, r3
 800b73a:	4313      	orrs	r3, r2
 800b73c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b73e:	793b      	ldrb	r3, [r7, #4]
 800b740:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b744:	b2db      	uxtb	r3, r3
 800b746:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b748:	b25b      	sxtb	r3, r3
 800b74a:	4313      	orrs	r3, r2
 800b74c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b74e:	793b      	ldrb	r3, [r7, #4]
 800b750:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b754:	b2db      	uxtb	r3, r3
 800b756:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b758:	b25b      	sxtb	r3, r3
 800b75a:	4313      	orrs	r3, r2
 800b75c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b75e:	793b      	ldrb	r3, [r7, #4]
 800b760:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b764:	b2db      	uxtb	r3, r3
 800b766:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	4313      	orrs	r3, r2
 800b76c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b76e:	793b      	ldrb	r3, [r7, #4]
 800b770:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b774:	b2db      	uxtb	r3, r3
 800b776:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b778:	b25b      	sxtb	r3, r3
 800b77a:	4313      	orrs	r3, r2
 800b77c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800b77e:	793b      	ldrb	r3, [r7, #4]
 800b780:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b784:	b2db      	uxtb	r3, r3
 800b786:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b788:	4313      	orrs	r3, r2
 800b78a:	b25b      	sxtb	r3, r3
 800b78c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b78e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800b790:	f107 030f 	add.w	r3, r7, #15
 800b794:	2201      	movs	r2, #1
 800b796:	4619      	mov	r1, r3
 800b798:	2089      	movs	r0, #137	; 0x89
 800b79a:	f000 fcd1 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b79e:	bf00      	nop
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a1d      	ldr	r2, [pc, #116]	; (800b828 <SUBGRF_CalibrateImage+0x80>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d904      	bls.n	800b7c2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800b7b8:	23e1      	movs	r3, #225	; 0xe1
 800b7ba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800b7bc:	23e9      	movs	r3, #233	; 0xe9
 800b7be:	737b      	strb	r3, [r7, #13]
 800b7c0:	e027      	b.n	800b812 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a19      	ldr	r2, [pc, #100]	; (800b82c <SUBGRF_CalibrateImage+0x84>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d904      	bls.n	800b7d4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800b7ca:	23d7      	movs	r3, #215	; 0xd7
 800b7cc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800b7ce:	23db      	movs	r3, #219	; 0xdb
 800b7d0:	737b      	strb	r3, [r7, #13]
 800b7d2:	e01e      	b.n	800b812 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a16      	ldr	r2, [pc, #88]	; (800b830 <SUBGRF_CalibrateImage+0x88>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d904      	bls.n	800b7e6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800b7dc:	23c1      	movs	r3, #193	; 0xc1
 800b7de:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800b7e0:	23c5      	movs	r3, #197	; 0xc5
 800b7e2:	737b      	strb	r3, [r7, #13]
 800b7e4:	e015      	b.n	800b812 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a12      	ldr	r2, [pc, #72]	; (800b834 <SUBGRF_CalibrateImage+0x8c>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d904      	bls.n	800b7f8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800b7ee:	2375      	movs	r3, #117	; 0x75
 800b7f0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800b7f2:	2381      	movs	r3, #129	; 0x81
 800b7f4:	737b      	strb	r3, [r7, #13]
 800b7f6:	e00c      	b.n	800b812 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a0f      	ldr	r2, [pc, #60]	; (800b838 <SUBGRF_CalibrateImage+0x90>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d904      	bls.n	800b80a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800b800:	236b      	movs	r3, #107	; 0x6b
 800b802:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800b804:	236f      	movs	r3, #111	; 0x6f
 800b806:	737b      	strb	r3, [r7, #13]
 800b808:	e003      	b.n	800b812 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800b80a:	2329      	movs	r3, #41	; 0x29
 800b80c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800b80e:	232b      	movs	r3, #43	; 0x2b
 800b810:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800b812:	f107 030c 	add.w	r3, r7, #12
 800b816:	2202      	movs	r2, #2
 800b818:	4619      	mov	r1, r3
 800b81a:	2098      	movs	r0, #152	; 0x98
 800b81c:	f000 fc90 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b820:	bf00      	nop
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	35a4e900 	.word	0x35a4e900
 800b82c:	32a9f880 	.word	0x32a9f880
 800b830:	2de54480 	.word	0x2de54480
 800b834:	1b6b0b00 	.word	0x1b6b0b00
 800b838:	1954fc40 	.word	0x1954fc40

0800b83c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800b83c:	b590      	push	{r4, r7, lr}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	4604      	mov	r4, r0
 800b844:	4608      	mov	r0, r1
 800b846:	4611      	mov	r1, r2
 800b848:	461a      	mov	r2, r3
 800b84a:	4623      	mov	r3, r4
 800b84c:	71fb      	strb	r3, [r7, #7]
 800b84e:	4603      	mov	r3, r0
 800b850:	71bb      	strb	r3, [r7, #6]
 800b852:	460b      	mov	r3, r1
 800b854:	717b      	strb	r3, [r7, #5]
 800b856:	4613      	mov	r3, r2
 800b858:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800b85a:	79fb      	ldrb	r3, [r7, #7]
 800b85c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800b85e:	79bb      	ldrb	r3, [r7, #6]
 800b860:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800b862:	797b      	ldrb	r3, [r7, #5]
 800b864:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800b866:	793b      	ldrb	r3, [r7, #4]
 800b868:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800b86a:	f107 030c 	add.w	r3, r7, #12
 800b86e:	2204      	movs	r2, #4
 800b870:	4619      	mov	r1, r3
 800b872:	2095      	movs	r0, #149	; 0x95
 800b874:	f000 fc64 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b878:	bf00      	nop
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd90      	pop	{r4, r7, pc}

0800b880 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800b880:	b590      	push	{r4, r7, lr}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	4611      	mov	r1, r2
 800b88c:	461a      	mov	r2, r3
 800b88e:	4623      	mov	r3, r4
 800b890:	80fb      	strh	r3, [r7, #6]
 800b892:	4603      	mov	r3, r0
 800b894:	80bb      	strh	r3, [r7, #4]
 800b896:	460b      	mov	r3, r1
 800b898:	807b      	strh	r3, [r7, #2]
 800b89a:	4613      	mov	r3, r2
 800b89c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b89e:	88fb      	ldrh	r3, [r7, #6]
 800b8a0:	0a1b      	lsrs	r3, r3, #8
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800b8a8:	88fb      	ldrh	r3, [r7, #6]
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800b8ae:	88bb      	ldrh	r3, [r7, #4]
 800b8b0:	0a1b      	lsrs	r3, r3, #8
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800b8b8:	88bb      	ldrh	r3, [r7, #4]
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800b8be:	887b      	ldrh	r3, [r7, #2]
 800b8c0:	0a1b      	lsrs	r3, r3, #8
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800b8c8:	887b      	ldrh	r3, [r7, #2]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800b8ce:	883b      	ldrh	r3, [r7, #0]
 800b8d0:	0a1b      	lsrs	r3, r3, #8
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800b8d8:	883b      	ldrh	r3, [r7, #0]
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800b8de:	f107 0308 	add.w	r3, r7, #8
 800b8e2:	2208      	movs	r2, #8
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	2008      	movs	r0, #8
 800b8e8:	f000 fc2a 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b8ec:	bf00      	nop
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd90      	pop	{r4, r7, pc}

0800b8f4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	6039      	str	r1, [r7, #0]
 800b8fe:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800b900:	79fb      	ldrb	r3, [r7, #7]
 800b902:	f003 0307 	and.w	r3, r3, #7
 800b906:	b2db      	uxtb	r3, r3
 800b908:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	0c1b      	lsrs	r3, r3, #16
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	0a1b      	lsrs	r3, r3, #8
 800b916:	b2db      	uxtb	r3, r3
 800b918:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800b920:	f107 030c 	add.w	r3, r7, #12
 800b924:	2204      	movs	r2, #4
 800b926:	4619      	mov	r1, r3
 800b928:	2097      	movs	r0, #151	; 0x97
 800b92a:	f000 fc09 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b92e:	bf00      	nop
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800b938:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800b942:	2300      	movs	r3, #0
 800b944:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800b946:	4b1d      	ldr	r3, [pc, #116]	; (800b9bc <SUBGRF_SetRfFrequency+0x84>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	f083 0301 	eor.w	r3, r3, #1
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	d005      	beq.n	800b960 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7ff ff27 	bl	800b7a8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800b95a:	4b18      	ldr	r3, [pc, #96]	; (800b9bc <SUBGRF_SetRfFrequency+0x84>)
 800b95c:	2201      	movs	r2, #1
 800b95e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	461c      	mov	r4, r3
 800b966:	4615      	mov	r5, r2
 800b968:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b96c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b970:	4a13      	ldr	r2, [pc, #76]	; (800b9c0 <SUBGRF_SetRfFrequency+0x88>)
 800b972:	f04f 0300 	mov.w	r3, #0
 800b976:	4640      	mov	r0, r8
 800b978:	4649      	mov	r1, r9
 800b97a:	f7f4 fc51 	bl	8000220 <__aeabi_uldivmod>
 800b97e:	4602      	mov	r2, r0
 800b980:	460b      	mov	r3, r1
 800b982:	4613      	mov	r3, r2
 800b984:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	0e1b      	lsrs	r3, r3, #24
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	0c1b      	lsrs	r3, r3, #16
 800b992:	b2db      	uxtb	r3, r3
 800b994:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	0a1b      	lsrs	r3, r3, #8
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b9a4:	f107 0308 	add.w	r3, r7, #8
 800b9a8:	2204      	movs	r2, #4
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	2086      	movs	r0, #134	; 0x86
 800b9ae:	f000 fbc7 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b9b2:	bf00      	nop
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b9bc:	200007e4 	.word	0x200007e4
 800b9c0:	01e84800 	.word	0x01e84800

0800b9c4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800b9ce:	79fa      	ldrb	r2, [r7, #7]
 800b9d0:	4b09      	ldr	r3, [pc, #36]	; (800b9f8 <SUBGRF_SetPacketType+0x34>)
 800b9d2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d104      	bne.n	800b9e4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800b9da:	2100      	movs	r1, #0
 800b9dc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800b9e0:	f000 fafe 	bl	800bfe0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800b9e4:	1dfb      	adds	r3, r7, #7
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	208a      	movs	r0, #138	; 0x8a
 800b9ec:	f000 fba8 	bl	800c140 <SUBGRF_WriteCommand>
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	200007dd 	.word	0x200007dd

0800b9fc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	af00      	add	r7, sp, #0
    return PacketType;
 800ba00:	4b02      	ldr	r3, [pc, #8]	; (800ba0c <SUBGRF_GetPacketType+0x10>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bc80      	pop	{r7}
 800ba0a:	4770      	bx	lr
 800ba0c:	200007dd 	.word	0x200007dd

0800ba10 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	71fb      	strb	r3, [r7, #7]
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	71bb      	strb	r3, [r7, #6]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d149      	bne.n	800babc <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f000 ff2e 	bl	800c88a <RBI_GetRFOMaxPowerConfig>
 800ba2e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800ba30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	da01      	bge.n	800ba3e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2b0e      	cmp	r3, #14
 800ba42:	d10e      	bne.n	800ba62 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800ba44:	2301      	movs	r3, #1
 800ba46:	2201      	movs	r2, #1
 800ba48:	2100      	movs	r1, #0
 800ba4a:	2004      	movs	r0, #4
 800ba4c:	f7ff fef6 	bl	800b83c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800ba50:	79ba      	ldrb	r2, [r7, #6]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	330e      	adds	r3, #14
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	71bb      	strb	r3, [r7, #6]
 800ba60:	e01f      	b.n	800baa2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b0a      	cmp	r3, #10
 800ba66:	d10e      	bne.n	800ba86 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800ba68:	2301      	movs	r3, #1
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	2001      	movs	r0, #1
 800ba70:	f7ff fee4 	bl	800b83c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800ba74:	79ba      	ldrb	r2, [r7, #6]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	330d      	adds	r3, #13
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	71bb      	strb	r3, [r7, #6]
 800ba84:	e00d      	b.n	800baa2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800ba86:	2301      	movs	r3, #1
 800ba88:	2201      	movs	r2, #1
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	2007      	movs	r0, #7
 800ba8e:	f7ff fed5 	bl	800b83c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800ba92:	79ba      	ldrb	r2, [r7, #6]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	330e      	adds	r3, #14
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800baa2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800baa6:	f113 0f11 	cmn.w	r3, #17
 800baaa:	da01      	bge.n	800bab0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800baac:	23ef      	movs	r3, #239	; 0xef
 800baae:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800bab0:	2118      	movs	r1, #24
 800bab2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800bab6:	f000 fa93 	bl	800bfe0 <SUBGRF_WriteRegister>
 800baba:	e067      	b.n	800bb8c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800babc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800bac0:	f000 faa2 	bl	800c008 <SUBGRF_ReadRegister>
 800bac4:	4603      	mov	r3, r0
 800bac6:	f043 031e 	orr.w	r3, r3, #30
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	4619      	mov	r1, r3
 800bace:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800bad2:	f000 fa85 	bl	800bfe0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800bad6:	2001      	movs	r0, #1
 800bad8:	f000 fed7 	bl	800c88a <RBI_GetRFOMaxPowerConfig>
 800badc:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800bade:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	da01      	bge.n	800baec <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b14      	cmp	r3, #20
 800baf0:	d10e      	bne.n	800bb10 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800baf2:	2301      	movs	r3, #1
 800baf4:	2200      	movs	r2, #0
 800baf6:	2105      	movs	r1, #5
 800baf8:	2003      	movs	r0, #3
 800bafa:	f7ff fe9f 	bl	800b83c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800bafe:	79ba      	ldrb	r2, [r7, #6]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	3316      	adds	r3, #22
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	71bb      	strb	r3, [r7, #6]
 800bb0e:	e031      	b.n	800bb74 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b11      	cmp	r3, #17
 800bb14:	d10e      	bne.n	800bb34 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800bb16:	2301      	movs	r3, #1
 800bb18:	2200      	movs	r2, #0
 800bb1a:	2103      	movs	r1, #3
 800bb1c:	2002      	movs	r0, #2
 800bb1e:	f7ff fe8d 	bl	800b83c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800bb22:	79ba      	ldrb	r2, [r7, #6]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	3316      	adds	r3, #22
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	71bb      	strb	r3, [r7, #6]
 800bb32:	e01f      	b.n	800bb74 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b0e      	cmp	r3, #14
 800bb38:	d10e      	bne.n	800bb58 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2102      	movs	r1, #2
 800bb40:	2002      	movs	r0, #2
 800bb42:	f7ff fe7b 	bl	800b83c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800bb46:	79ba      	ldrb	r2, [r7, #6]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	330e      	adds	r3, #14
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	71bb      	strb	r3, [r7, #6]
 800bb56:	e00d      	b.n	800bb74 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800bb58:	2301      	movs	r3, #1
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	2107      	movs	r1, #7
 800bb5e:	2004      	movs	r0, #4
 800bb60:	f7ff fe6c 	bl	800b83c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800bb64:	79ba      	ldrb	r2, [r7, #6]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	3316      	adds	r3, #22
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800bb74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bb78:	f113 0f09 	cmn.w	r3, #9
 800bb7c:	da01      	bge.n	800bb82 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800bb7e:	23f7      	movs	r3, #247	; 0xf7
 800bb80:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800bb82:	2138      	movs	r1, #56	; 0x38
 800bb84:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800bb88:	f000 fa2a 	bl	800bfe0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800bb8c:	79bb      	ldrb	r3, [r7, #6]
 800bb8e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800bb90:	797b      	ldrb	r3, [r7, #5]
 800bb92:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800bb94:	f107 0308 	add.w	r3, r7, #8
 800bb98:	2202      	movs	r2, #2
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	208e      	movs	r0, #142	; 0x8e
 800bb9e:	f000 facf 	bl	800c140 <SUBGRF_WriteCommand>
}
 800bba2:	bf00      	nop
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
	...

0800bbac <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800bbac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bbb0:	b086      	sub	sp, #24
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bbba:	4a61      	ldr	r2, [pc, #388]	; (800bd40 <SUBGRF_SetModulationParams+0x194>)
 800bbbc:	f107 0308 	add.w	r3, r7, #8
 800bbc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbc4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	781a      	ldrb	r2, [r3, #0]
 800bbcc:	4b5d      	ldr	r3, [pc, #372]	; (800bd44 <SUBGRF_SetModulationParams+0x198>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d004      	beq.n	800bbde <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff fef3 	bl	800b9c4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	f200 80a5 	bhi.w	800bd32 <SUBGRF_SetModulationParams+0x186>
 800bbe8:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <SUBGRF_SetModulationParams+0x44>)
 800bbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbee:	bf00      	nop
 800bbf0:	0800bc01 	.word	0x0800bc01
 800bbf4:	0800bcc1 	.word	0x0800bcc1
 800bbf8:	0800bc83 	.word	0x0800bc83
 800bbfc:	0800bcef 	.word	0x0800bcef
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800bc00:	2308      	movs	r3, #8
 800bc02:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	4a4f      	ldr	r2, [pc, #316]	; (800bd48 <SUBGRF_SetModulationParams+0x19c>)
 800bc0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc0e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	0c1b      	lsrs	r3, r3, #16
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	0a1b      	lsrs	r3, r3, #8
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	7b1b      	ldrb	r3, [r3, #12]
 800bc2a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	7b5b      	ldrb	r3, [r3, #13]
 800bc30:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	2200      	movs	r2, #0
 800bc38:	461c      	mov	r4, r3
 800bc3a:	4615      	mov	r5, r2
 800bc3c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800bc40:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800bc44:	4a41      	ldr	r2, [pc, #260]	; (800bd4c <SUBGRF_SetModulationParams+0x1a0>)
 800bc46:	f04f 0300 	mov.w	r3, #0
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	f7f4 fae7 	bl	8000220 <__aeabi_uldivmod>
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	4613      	mov	r3, r2
 800bc58:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	0c1b      	lsrs	r3, r3, #16
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	0a1b      	lsrs	r3, r3, #8
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bc70:	7cfb      	ldrb	r3, [r7, #19]
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	f107 0308 	add.w	r3, r7, #8
 800bc78:	4619      	mov	r1, r3
 800bc7a:	208b      	movs	r0, #139	; 0x8b
 800bc7c:	f000 fa60 	bl	800c140 <SUBGRF_WriteCommand>
        break;
 800bc80:	e058      	b.n	800bd34 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800bc82:	2304      	movs	r3, #4
 800bc84:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	4a2f      	ldr	r2, [pc, #188]	; (800bd48 <SUBGRF_SetModulationParams+0x19c>)
 800bc8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc90:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	0c1b      	lsrs	r3, r3, #16
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	0a1b      	lsrs	r3, r3, #8
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	7d1b      	ldrb	r3, [r3, #20]
 800bcac:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bcae:	7cfb      	ldrb	r3, [r7, #19]
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	f107 0308 	add.w	r3, r7, #8
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	208b      	movs	r0, #139	; 0x8b
 800bcba:	f000 fa41 	bl	800c140 <SUBGRF_WriteCommand>
        break;
 800bcbe:	e039      	b.n	800bd34 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800bcc0:	2304      	movs	r3, #4
 800bcc2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	7e1b      	ldrb	r3, [r3, #24]
 800bcc8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	7e5b      	ldrb	r3, [r3, #25]
 800bcce:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	7e9b      	ldrb	r3, [r3, #26]
 800bcd4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	7edb      	ldrb	r3, [r3, #27]
 800bcda:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bcdc:	7cfb      	ldrb	r3, [r7, #19]
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	f107 0308 	add.w	r3, r7, #8
 800bce4:	4619      	mov	r1, r3
 800bce6:	208b      	movs	r0, #139	; 0x8b
 800bce8:	f000 fa2a 	bl	800c140 <SUBGRF_WriteCommand>

        break;
 800bcec:	e022      	b.n	800bd34 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800bcee:	2305      	movs	r3, #5
 800bcf0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	4a14      	ldr	r2, [pc, #80]	; (800bd48 <SUBGRF_SetModulationParams+0x19c>)
 800bcf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcfc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	0c1b      	lsrs	r3, r3, #16
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	0a1b      	lsrs	r3, r3, #8
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	7b1b      	ldrb	r3, [r3, #12]
 800bd18:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	7b5b      	ldrb	r3, [r3, #13]
 800bd1e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bd20:	7cfb      	ldrb	r3, [r7, #19]
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	f107 0308 	add.w	r3, r7, #8
 800bd28:	4619      	mov	r1, r3
 800bd2a:	208b      	movs	r0, #139	; 0x8b
 800bd2c:	f000 fa08 	bl	800c140 <SUBGRF_WriteCommand>
        break;
 800bd30:	e000      	b.n	800bd34 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800bd32:	bf00      	nop
    }
}
 800bd34:	bf00      	nop
 800bd36:	3718      	adds	r7, #24
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bd3e:	bf00      	nop
 800bd40:	0800dcf8 	.word	0x0800dcf8
 800bd44:	200007dd 	.word	0x200007dd
 800bd48:	3d090000 	.word	0x3d090000
 800bd4c:	01e84800 	.word	0x01e84800

0800bd50 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bd5c:	4a48      	ldr	r2, [pc, #288]	; (800be80 <SUBGRF_SetPacketParams+0x130>)
 800bd5e:	f107 030c 	add.w	r3, r7, #12
 800bd62:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd64:	c303      	stmia	r3!, {r0, r1}
 800bd66:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	781a      	ldrb	r2, [r3, #0]
 800bd6c:	4b45      	ldr	r3, [pc, #276]	; (800be84 <SUBGRF_SetPacketParams+0x134>)
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d004      	beq.n	800bd7e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7ff fe23 	bl	800b9c4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	d878      	bhi.n	800be78 <SUBGRF_SetPacketParams+0x128>
 800bd86:	a201      	add	r2, pc, #4	; (adr r2, 800bd8c <SUBGRF_SetPacketParams+0x3c>)
 800bd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8c:	0800bd9d 	.word	0x0800bd9d
 800bd90:	0800be2d 	.word	0x0800be2d
 800bd94:	0800be21 	.word	0x0800be21
 800bd98:	0800bd9d 	.word	0x0800bd9d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	7a5b      	ldrb	r3, [r3, #9]
 800bda0:	2bf1      	cmp	r3, #241	; 0xf1
 800bda2:	d10a      	bne.n	800bdba <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800bda4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bda8:	f7ff faaa 	bl	800b300 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800bdac:	f248 0005 	movw	r0, #32773	; 0x8005
 800bdb0:	f7ff fac6 	bl	800b340 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	75bb      	strb	r3, [r7, #22]
 800bdb8:	e011      	b.n	800bdde <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	7a5b      	ldrb	r3, [r3, #9]
 800bdbe:	2bf2      	cmp	r3, #242	; 0xf2
 800bdc0:	d10a      	bne.n	800bdd8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800bdc2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800bdc6:	f7ff fa9b 	bl	800b300 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800bdca:	f241 0021 	movw	r0, #4129	; 0x1021
 800bdce:	f7ff fab7 	bl	800b340 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800bdd2:	2306      	movs	r3, #6
 800bdd4:	75bb      	strb	r3, [r7, #22]
 800bdd6:	e002      	b.n	800bdde <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	7a5b      	ldrb	r3, [r3, #9]
 800bddc:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800bdde:	2309      	movs	r3, #9
 800bde0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	885b      	ldrh	r3, [r3, #2]
 800bde6:	0a1b      	lsrs	r3, r3, #8
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	885b      	ldrh	r3, [r3, #2]
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	791b      	ldrb	r3, [r3, #4]
 800bdfa:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	795b      	ldrb	r3, [r3, #5]
 800be00:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	799b      	ldrb	r3, [r3, #6]
 800be06:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	79db      	ldrb	r3, [r3, #7]
 800be0c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	7a1b      	ldrb	r3, [r3, #8]
 800be12:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800be14:	7dbb      	ldrb	r3, [r7, #22]
 800be16:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	7a9b      	ldrb	r3, [r3, #10]
 800be1c:	753b      	strb	r3, [r7, #20]
        break;
 800be1e:	e022      	b.n	800be66 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800be20:	2301      	movs	r3, #1
 800be22:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7b1b      	ldrb	r3, [r3, #12]
 800be28:	733b      	strb	r3, [r7, #12]
        break;
 800be2a:	e01c      	b.n	800be66 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800be2c:	2306      	movs	r3, #6
 800be2e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	89db      	ldrh	r3, [r3, #14]
 800be34:	0a1b      	lsrs	r3, r3, #8
 800be36:	b29b      	uxth	r3, r3
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	89db      	ldrh	r3, [r3, #14]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7c1a      	ldrb	r2, [r3, #16]
 800be48:	4b0f      	ldr	r3, [pc, #60]	; (800be88 <SUBGRF_SetPacketParams+0x138>)
 800be4a:	4611      	mov	r1, r2
 800be4c:	7019      	strb	r1, [r3, #0]
 800be4e:	4613      	mov	r3, r2
 800be50:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	7c5b      	ldrb	r3, [r3, #17]
 800be56:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	7c9b      	ldrb	r3, [r3, #18]
 800be5c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	7cdb      	ldrb	r3, [r3, #19]
 800be62:	747b      	strb	r3, [r7, #17]
        break;
 800be64:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800be66:	7dfb      	ldrb	r3, [r7, #23]
 800be68:	b29a      	uxth	r2, r3
 800be6a:	f107 030c 	add.w	r3, r7, #12
 800be6e:	4619      	mov	r1, r3
 800be70:	208c      	movs	r0, #140	; 0x8c
 800be72:	f000 f965 	bl	800c140 <SUBGRF_WriteCommand>
 800be76:	e000      	b.n	800be7a <SUBGRF_SetPacketParams+0x12a>
        return;
 800be78:	bf00      	nop
}
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	0800dd00 	.word	0x0800dd00
 800be84:	200007dd 	.word	0x200007dd
 800be88:	200007de 	.word	0x200007de

0800be8c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	460a      	mov	r2, r1
 800be96:	71fb      	strb	r3, [r7, #7]
 800be98:	4613      	mov	r3, r2
 800be9a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800be9c:	79fb      	ldrb	r3, [r7, #7]
 800be9e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800bea0:	79bb      	ldrb	r3, [r7, #6]
 800bea2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800bea4:	f107 030c 	add.w	r3, r7, #12
 800bea8:	2202      	movs	r2, #2
 800beaa:	4619      	mov	r1, r3
 800beac:	208f      	movs	r0, #143	; 0x8f
 800beae:	f000 f947 	bl	800c140 <SUBGRF_WriteCommand>
}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b082      	sub	sp, #8
 800bebe:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800bec4:	1d3b      	adds	r3, r7, #4
 800bec6:	2201      	movs	r2, #1
 800bec8:	4619      	mov	r1, r3
 800beca:	2015      	movs	r0, #21
 800becc:	f000 f95a 	bl	800c184 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800bed0:	793b      	ldrb	r3, [r7, #4]
 800bed2:	425b      	negs	r3, r3
 800bed4:	105b      	asrs	r3, r3, #1
 800bed6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800bed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800beee:	f107 030c 	add.w	r3, r7, #12
 800bef2:	2202      	movs	r2, #2
 800bef4:	4619      	mov	r1, r3
 800bef6:	2013      	movs	r0, #19
 800bef8:	f000 f944 	bl	800c184 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800befc:	f7ff fd7e 	bl	800b9fc <SUBGRF_GetPacketType>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d10d      	bne.n	800bf22 <SUBGRF_GetRxBufferStatus+0x3e>
 800bf06:	4b0c      	ldr	r3, [pc, #48]	; (800bf38 <SUBGRF_GetRxBufferStatus+0x54>)
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d108      	bne.n	800bf22 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800bf10:	f240 7002 	movw	r0, #1794	; 0x702
 800bf14:	f000 f878 	bl	800c008 <SUBGRF_ReadRegister>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	701a      	strb	r2, [r3, #0]
 800bf20:	e002      	b.n	800bf28 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800bf22:	7b3a      	ldrb	r2, [r7, #12]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800bf28:	7b7a      	ldrb	r2, [r7, #13]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	701a      	strb	r2, [r3, #0]
}
 800bf2e:	bf00      	nop
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	200007de 	.word	0x200007de

0800bf3c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800bf44:	f107 030c 	add.w	r3, r7, #12
 800bf48:	2203      	movs	r2, #3
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	2014      	movs	r0, #20
 800bf4e:	f000 f919 	bl	800c184 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800bf52:	f7ff fd53 	bl	800b9fc <SUBGRF_GetPacketType>
 800bf56:	4603      	mov	r3, r0
 800bf58:	461a      	mov	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <SUBGRF_GetPacketStatus+0x30>
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d013      	beq.n	800bf92 <SUBGRF_GetPacketStatus+0x56>
 800bf6a:	e02a      	b.n	800bfc2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800bf6c:	7b3a      	ldrb	r2, [r7, #12]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800bf72:	7b7b      	ldrb	r3, [r7, #13]
 800bf74:	425b      	negs	r3, r3
 800bf76:	105b      	asrs	r3, r3, #1
 800bf78:	b25a      	sxtb	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800bf7e:	7bbb      	ldrb	r3, [r7, #14]
 800bf80:	425b      	negs	r3, r3
 800bf82:	105b      	asrs	r3, r3, #1
 800bf84:	b25a      	sxtb	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	609a      	str	r2, [r3, #8]
            break;
 800bf90:	e020      	b.n	800bfd4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800bf92:	7b3b      	ldrb	r3, [r7, #12]
 800bf94:	425b      	negs	r3, r3
 800bf96:	105b      	asrs	r3, r3, #1
 800bf98:	b25a      	sxtb	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800bf9e:	7b7b      	ldrb	r3, [r7, #13]
 800bfa0:	b25b      	sxtb	r3, r3
 800bfa2:	3302      	adds	r3, #2
 800bfa4:	109b      	asrs	r3, r3, #2
 800bfa6:	b25a      	sxtb	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
 800bfae:	425b      	negs	r3, r3
 800bfb0:	105b      	asrs	r3, r3, #1
 800bfb2:	b25a      	sxtb	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800bfb8:	4b08      	ldr	r3, [pc, #32]	; (800bfdc <SUBGRF_GetPacketStatus+0xa0>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	611a      	str	r2, [r3, #16]
            break;
 800bfc0:	e008      	b.n	800bfd4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800bfc2:	2214      	movs	r2, #20
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fc93 	bl	800c8f2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	220f      	movs	r2, #15
 800bfd0:	701a      	strb	r2, [r3, #0]
            break;
 800bfd2:	bf00      	nop
    }
}
 800bfd4:	bf00      	nop
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	200007e0 	.word	0x200007e0

0800bfe0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	460a      	mov	r2, r1
 800bfea:	80fb      	strh	r3, [r7, #6]
 800bfec:	4613      	mov	r3, r2
 800bfee:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800bff0:	1d7a      	adds	r2, r7, #5
 800bff2:	88f9      	ldrh	r1, [r7, #6]
 800bff4:	2301      	movs	r3, #1
 800bff6:	4803      	ldr	r0, [pc, #12]	; (800c004 <SUBGRF_WriteRegister+0x24>)
 800bff8:	f7fa fdaa 	bl	8006b50 <HAL_SUBGHZ_WriteRegisters>
}
 800bffc:	bf00      	nop
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20000528 	.word	0x20000528

0800c008 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	4603      	mov	r3, r0
 800c010:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800c012:	f107 020f 	add.w	r2, r7, #15
 800c016:	88f9      	ldrh	r1, [r7, #6]
 800c018:	2301      	movs	r3, #1
 800c01a:	4804      	ldr	r0, [pc, #16]	; (800c02c <SUBGRF_ReadRegister+0x24>)
 800c01c:	f7fa fdf7 	bl	8006c0e <HAL_SUBGHZ_ReadRegisters>
    return data;
 800c020:	7bfb      	ldrb	r3, [r7, #15]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	20000528 	.word	0x20000528

0800c030 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	6039      	str	r1, [r7, #0]
 800c03a:	80fb      	strh	r3, [r7, #6]
 800c03c:	4613      	mov	r3, r2
 800c03e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c040:	f3ef 8310 	mrs	r3, PRIMASK
 800c044:	60fb      	str	r3, [r7, #12]
  return(result);
 800c046:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c048:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c04a:	b672      	cpsid	i
}
 800c04c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800c04e:	88bb      	ldrh	r3, [r7, #4]
 800c050:	88f9      	ldrh	r1, [r7, #6]
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	4806      	ldr	r0, [pc, #24]	; (800c070 <SUBGRF_WriteRegisters+0x40>)
 800c056:	f7fa fd7b 	bl	8006b50 <HAL_SUBGHZ_WriteRegisters>
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	f383 8810 	msr	PRIMASK, r3
}
 800c064:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c066:	bf00      	nop
 800c068:	3718      	adds	r7, #24
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	20000528 	.word	0x20000528

0800c074 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	6039      	str	r1, [r7, #0]
 800c07e:	80fb      	strh	r3, [r7, #6]
 800c080:	4613      	mov	r3, r2
 800c082:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c084:	f3ef 8310 	mrs	r3, PRIMASK
 800c088:	60fb      	str	r3, [r7, #12]
  return(result);
 800c08a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c08c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c08e:	b672      	cpsid	i
}
 800c090:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800c092:	88bb      	ldrh	r3, [r7, #4]
 800c094:	88f9      	ldrh	r1, [r7, #6]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	4806      	ldr	r0, [pc, #24]	; (800c0b4 <SUBGRF_ReadRegisters+0x40>)
 800c09a:	f7fa fdb8 	bl	8006c0e <HAL_SUBGHZ_ReadRegisters>
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	f383 8810 	msr	PRIMASK, r3
}
 800c0a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c0aa:	bf00      	nop
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	20000528 	.word	0x20000528

0800c0b8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	4603      	mov	r3, r0
 800c0c0:	6039      	str	r1, [r7, #0]
 800c0c2:	71fb      	strb	r3, [r7, #7]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0c8:	f3ef 8310 	mrs	r3, PRIMASK
 800c0cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c0d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0d2:	b672      	cpsid	i
}
 800c0d4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800c0d6:	79bb      	ldrb	r3, [r7, #6]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	79f9      	ldrb	r1, [r7, #7]
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	4806      	ldr	r0, [pc, #24]	; (800c0f8 <SUBGRF_WriteBuffer+0x40>)
 800c0e0:	f7fa fea9 	bl	8006e36 <HAL_SUBGHZ_WriteBuffer>
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	f383 8810 	msr	PRIMASK, r3
}
 800c0ee:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c0f0:	bf00      	nop
 800c0f2:	3718      	adds	r7, #24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	20000528 	.word	0x20000528

0800c0fc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	6039      	str	r1, [r7, #0]
 800c106:	71fb      	strb	r3, [r7, #7]
 800c108:	4613      	mov	r3, r2
 800c10a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c10c:	f3ef 8310 	mrs	r3, PRIMASK
 800c110:	60fb      	str	r3, [r7, #12]
  return(result);
 800c112:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c116:	b672      	cpsid	i
}
 800c118:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800c11a:	79bb      	ldrb	r3, [r7, #6]
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	79f9      	ldrb	r1, [r7, #7]
 800c120:	683a      	ldr	r2, [r7, #0]
 800c122:	4806      	ldr	r0, [pc, #24]	; (800c13c <SUBGRF_ReadBuffer+0x40>)
 800c124:	f7fa feda 	bl	8006edc <HAL_SUBGHZ_ReadBuffer>
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	f383 8810 	msr	PRIMASK, r3
}
 800c132:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c134:	bf00      	nop
 800c136:	3718      	adds	r7, #24
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	20000528 	.word	0x20000528

0800c140 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
 800c146:	4603      	mov	r3, r0
 800c148:	6039      	str	r1, [r7, #0]
 800c14a:	71fb      	strb	r3, [r7, #7]
 800c14c:	4613      	mov	r3, r2
 800c14e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c150:	f3ef 8310 	mrs	r3, PRIMASK
 800c154:	60fb      	str	r3, [r7, #12]
  return(result);
 800c156:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c158:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c15a:	b672      	cpsid	i
}
 800c15c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800c15e:	88bb      	ldrh	r3, [r7, #4]
 800c160:	79f9      	ldrb	r1, [r7, #7]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	4806      	ldr	r0, [pc, #24]	; (800c180 <SUBGRF_WriteCommand+0x40>)
 800c166:	f7fa fdb3 	bl	8006cd0 <HAL_SUBGHZ_ExecSetCmd>
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	f383 8810 	msr	PRIMASK, r3
}
 800c174:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c176:	bf00      	nop
 800c178:	3718      	adds	r7, #24
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	20000528 	.word	0x20000528

0800c184 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	4603      	mov	r3, r0
 800c18c:	6039      	str	r1, [r7, #0]
 800c18e:	71fb      	strb	r3, [r7, #7]
 800c190:	4613      	mov	r3, r2
 800c192:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c194:	f3ef 8310 	mrs	r3, PRIMASK
 800c198:	60fb      	str	r3, [r7, #12]
  return(result);
 800c19a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c19c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c19e:	b672      	cpsid	i
}
 800c1a0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800c1a2:	88bb      	ldrh	r3, [r7, #4]
 800c1a4:	79f9      	ldrb	r1, [r7, #7]
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	4806      	ldr	r0, [pc, #24]	; (800c1c4 <SUBGRF_ReadCommand+0x40>)
 800c1aa:	f7fa fdf0 	bl	8006d8e <HAL_SUBGHZ_ExecGetCmd>
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f383 8810 	msr	PRIMASK, r3
}
 800c1b8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c1ba:	bf00      	nop
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20000528 	.word	0x20000528

0800c1c8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	460a      	mov	r2, r1
 800c1d2:	71fb      	strb	r3, [r7, #7]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800c1dc:	79bb      	ldrb	r3, [r7, #6]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d10d      	bne.n	800c1fe <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800c1e2:	79fb      	ldrb	r3, [r7, #7]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d104      	bne.n	800c1f2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800c1e8:	2302      	movs	r3, #2
 800c1ea:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800c1ec:	2004      	movs	r0, #4
 800c1ee:	f000 f8ef 	bl	800c3d0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800c1f2:	79fb      	ldrb	r3, [r7, #7]
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d107      	bne.n	800c208 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	73fb      	strb	r3, [r7, #15]
 800c1fc:	e004      	b.n	800c208 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800c1fe:	79bb      	ldrb	r3, [r7, #6]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d101      	bne.n	800c208 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800c204:	2301      	movs	r3, #1
 800c206:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 fad2 	bl	800c7b4 <RBI_ConfigRFSwitch>
}
 800c210:	bf00      	nop
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800c222:	2301      	movs	r3, #1
 800c224:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800c226:	f000 fb0f 	bl	800c848 <RBI_GetTxConfig>
 800c22a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d016      	beq.n	800c260 <SUBGRF_SetRfTxPower+0x48>
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2b02      	cmp	r3, #2
 800c236:	dc16      	bgt.n	800c266 <SUBGRF_SetRfTxPower+0x4e>
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d003      	beq.n	800c246 <SUBGRF_SetRfTxPower+0x2e>
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d00a      	beq.n	800c25a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800c244:	e00f      	b.n	800c266 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800c246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c24a:	2b0f      	cmp	r3, #15
 800c24c:	dd02      	ble.n	800c254 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800c24e:	2302      	movs	r3, #2
 800c250:	73fb      	strb	r3, [r7, #15]
            break;
 800c252:	e009      	b.n	800c268 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800c254:	2301      	movs	r3, #1
 800c256:	73fb      	strb	r3, [r7, #15]
            break;
 800c258:	e006      	b.n	800c268 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800c25a:	2301      	movs	r3, #1
 800c25c:	73fb      	strb	r3, [r7, #15]
            break;
 800c25e:	e003      	b.n	800c268 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800c260:	2302      	movs	r3, #2
 800c262:	73fb      	strb	r3, [r7, #15]
            break;
 800c264:	e000      	b.n	800c268 <SUBGRF_SetRfTxPower+0x50>
            break;
 800c266:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800c268:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	2202      	movs	r2, #2
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff fbcd 	bl	800ba10 <SUBGRF_SetTxParams>

    return paSelect;
 800c276:	7bfb      	ldrb	r3, [r7, #15]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800c280:	b480      	push	{r7}
 800c282:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800c284:	2301      	movs	r3, #1
}
 800c286:	4618      	mov	r0, r3
 800c288:	46bd      	mov	sp, r7
 800c28a:	bc80      	pop	{r7}
 800c28c:	4770      	bx	lr
	...

0800c290 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800c298:	4b03      	ldr	r3, [pc, #12]	; (800c2a8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2001      	movs	r0, #1
 800c29e:	4798      	blx	r3
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	200007e8 	.word	0x200007e8

0800c2ac <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800c2b4:	4b03      	ldr	r3, [pc, #12]	; (800c2c4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2002      	movs	r0, #2
 800c2ba:	4798      	blx	r3
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	200007e8 	.word	0x200007e8

0800c2c8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800c2d0:	4b03      	ldr	r3, [pc, #12]	; (800c2e0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2040      	movs	r0, #64	; 0x40
 800c2d6:	4798      	blx	r3
}
 800c2d8:	bf00      	nop
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	200007e8 	.word	0x200007e8

0800c2e4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d002      	beq.n	800c2fc <HAL_SUBGHZ_CADStatusCallback+0x18>
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d005      	beq.n	800c306 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800c2fa:	e00a      	b.n	800c312 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800c2fc:	4b07      	ldr	r3, [pc, #28]	; (800c31c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2080      	movs	r0, #128	; 0x80
 800c302:	4798      	blx	r3
            break;
 800c304:	e005      	b.n	800c312 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800c306:	4b05      	ldr	r3, [pc, #20]	; (800c31c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c30e:	4798      	blx	r3
            break;
 800c310:	bf00      	nop
    }
}
 800c312:	bf00      	nop
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	200007e8 	.word	0x200007e8

0800c320 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800c328:	4b04      	ldr	r3, [pc, #16]	; (800c33c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c330:	4798      	blx	r3
}
 800c332:	bf00      	nop
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	200007e8 	.word	0x200007e8

0800c340 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800c348:	4b03      	ldr	r3, [pc, #12]	; (800c358 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2020      	movs	r0, #32
 800c34e:	4798      	blx	r3
}
 800c350:	bf00      	nop
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	200007e8 	.word	0x200007e8

0800c35c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800c364:	4b03      	ldr	r3, [pc, #12]	; (800c374 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2004      	movs	r0, #4
 800c36a:	4798      	blx	r3
}
 800c36c:	bf00      	nop
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	200007e8 	.word	0x200007e8

0800c378 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800c380:	4b03      	ldr	r3, [pc, #12]	; (800c390 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2008      	movs	r0, #8
 800c386:	4798      	blx	r3
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	200007e8 	.word	0x200007e8

0800c394 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800c39c:	4b03      	ldr	r3, [pc, #12]	; (800c3ac <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2010      	movs	r0, #16
 800c3a2:	4798      	blx	r3
}
 800c3a4:	bf00      	nop
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	200007e8 	.word	0x200007e8

0800c3b0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800c3b8:	4b04      	ldr	r3, [pc, #16]	; (800c3cc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c3c0:	4798      	blx	r3
}
 800c3c2:	bf00      	nop
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	200007e8 	.word	0x200007e8

0800c3d0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800c3da:	f000 fa4b 	bl	800c874 <RBI_IsDCDC>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d112      	bne.n	800c40a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800c3e4:	f640 1023 	movw	r0, #2339	; 0x923
 800c3e8:	f7ff fe0e 	bl	800c008 <SUBGRF_ReadRegister>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800c3f0:	7bfb      	ldrb	r3, [r7, #15]
 800c3f2:	f023 0306 	bic.w	r3, r3, #6
 800c3f6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800c3f8:	7bfa      	ldrb	r2, [r7, #15]
 800c3fa:	79fb      	ldrb	r3, [r7, #7]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	4619      	mov	r1, r3
 800c402:	f640 1023 	movw	r0, #2339	; 0x923
 800c406:	f7ff fdeb 	bl	800bfe0 <SUBGRF_WriteRegister>
  }
}
 800c40a:	bf00      	nop
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
	...

0800c414 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800c422:	231f      	movs	r3, #31
 800c424:	e016      	b.n	800c454 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]
 800c42a:	e00f      	b.n	800c44c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
 800c42e:	4a0c      	ldr	r2, [pc, #48]	; (800c460 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800c430:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	429a      	cmp	r2, r3
 800c438:	d205      	bcs.n	800c446 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
 800c43c:	4a08      	ldr	r2, [pc, #32]	; (800c460 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	4413      	add	r3, r2
 800c442:	791b      	ldrb	r3, [r3, #4]
 800c444:	e006      	b.n	800c454 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	3301      	adds	r3, #1
 800c44a:	73fb      	strb	r3, [r7, #15]
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
 800c44e:	2b15      	cmp	r3, #21
 800c450:	d9ec      	bls.n	800c42c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800c452:	e7fe      	b.n	800c452 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	bc80      	pop	{r7}
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	0800de90 	.word	0x0800de90

0800c464 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08a      	sub	sp, #40	; 0x28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800c46e:	4b35      	ldr	r3, [pc, #212]	; (800c544 <SUBGRF_GetCFO+0xe0>)
 800c470:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800c472:	f640 0007 	movw	r0, #2055	; 0x807
 800c476:	f7ff fdc7 	bl	800c008 <SUBGRF_ReadRegister>
 800c47a:	4603      	mov	r3, r0
 800c47c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800c47e:	7ffb      	ldrb	r3, [r7, #31]
 800c480:	08db      	lsrs	r3, r3, #3
 800c482:	b2db      	uxtb	r3, r3
 800c484:	f003 0303 	and.w	r3, r3, #3
 800c488:	3328      	adds	r3, #40	; 0x28
 800c48a:	443b      	add	r3, r7
 800c48c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800c490:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800c492:	7ffb      	ldrb	r3, [r7, #31]
 800c494:	f003 0307 	and.w	r3, r3, #7
 800c498:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800c49a:	7fba      	ldrb	r2, [r7, #30]
 800c49c:	7f7b      	ldrb	r3, [r7, #29]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4b28      	ldr	r3, [pc, #160]	; (800c548 <SUBGRF_GetCFO+0xe4>)
 800c4a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4ac:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800c4ae:	69ba      	ldr	r2, [r7, #24]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4b6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800c4be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4c2:	697a      	ldr	r2, [r7, #20]
 800c4c4:	fb02 f303 	mul.w	r3, r2, r3
 800c4c8:	2b07      	cmp	r3, #7
 800c4ca:	d802      	bhi.n	800c4d2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800c4d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4d6:	697a      	ldr	r2, [r7, #20]
 800c4d8:	fb02 f303 	mul.w	r3, r2, r3
 800c4dc:	2b03      	cmp	r3, #3
 800c4de:	d802      	bhi.n	800c4e6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800c4e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	fb02 f303 	mul.w	r3, r2, r3
 800c4f0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800c4f2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800c4f6:	f7ff fd87 	bl	800c008 <SUBGRF_ReadRegister>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	021b      	lsls	r3, r3, #8
 800c4fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c502:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800c504:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800c508:	f7ff fd7e 	bl	800c008 <SUBGRF_ReadRegister>
 800c50c:	4603      	mov	r3, r0
 800c50e:	461a      	mov	r2, r3
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	4313      	orrs	r3, r2
 800c514:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d005      	beq.n	800c52c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800c520:	6a3b      	ldr	r3, [r7, #32]
 800c522:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800c526:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800c52a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	095b      	lsrs	r3, r3, #5
 800c530:	6a3a      	ldr	r2, [r7, #32]
 800c532:	fb02 f303 	mul.w	r3, r2, r3
 800c536:	11da      	asrs	r2, r3, #7
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	601a      	str	r2, [r3, #0]
}
 800c53c:	bf00      	nop
 800c53e:	3728      	adds	r7, #40	; 0x28
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	0c0a0804 	.word	0x0c0a0804
 800c548:	01e84800 	.word	0x01e84800

0800c54c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800c54c:	b480      	push	{r7}
 800c54e:	b087      	sub	sp, #28
 800c550:	af00      	add	r7, sp, #0
 800c552:	4603      	mov	r3, r0
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
 800c558:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800c55e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c562:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800c564:	697b      	ldr	r3, [r7, #20]
}
 800c566:	4618      	mov	r0, r3
 800c568:	371c      	adds	r7, #28
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bc80      	pop	{r7}
 800c56e:	4770      	bx	lr

0800c570 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	4603      	mov	r3, r0
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
 800c57c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800c582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c586:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800c588:	697b      	ldr	r3, [r7, #20]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	371c      	adds	r7, #28
 800c58e:	46bd      	mov	sp, r7
 800c590:	bc80      	pop	{r7}
 800c592:	4770      	bx	lr

0800c594 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800c5a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bc80      	pop	{r7}
 800c5ac:	4770      	bx	lr

0800c5ae <RFW_DeInit>:

void RFW_DeInit( void )
{
 800c5ae:	b480      	push	{r7}
 800c5b0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800c5b2:	bf00      	nop
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bc80      	pop	{r7}
 800c5b8:	4770      	bx	lr

0800c5ba <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800c5be:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bc80      	pop	{r7}
 800c5c6:	4770      	bx	lr

0800c5c8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800c5cc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bc80      	pop	{r7}
 800c5d4:	4770      	bx	lr

0800c5d6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b083      	sub	sp, #12
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	4603      	mov	r3, r0
 800c5de:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bc80      	pop	{r7}
 800c5e8:	4770      	bx	lr

0800c5ea <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b087      	sub	sp, #28
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	607a      	str	r2, [r7, #4]
 800c5f6:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800c5f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5fc:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800c5fe:	697b      	ldr	r3, [r7, #20]
}
 800c600:	4618      	mov	r0, r3
 800c602:	371c      	adds	r7, #28
 800c604:	46bd      	mov	sp, r7
 800c606:	bc80      	pop	{r7}
 800c608:	4770      	bx	lr

0800c60a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800c60a:	b480      	push	{r7}
 800c60c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800c60e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800c612:	4618      	mov	r0, r3
 800c614:	46bd      	mov	sp, r7
 800c616:	bc80      	pop	{r7}
 800c618:	4770      	bx	lr

0800c61a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800c61a:	b480      	push	{r7}
 800c61c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800c61e:	bf00      	nop
 800c620:	46bd      	mov	sp, r7
 800c622:	bc80      	pop	{r7}
 800c624:	4770      	bx	lr

0800c626 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800c626:	b480      	push	{r7}
 800c628:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800c62a:	bf00      	nop
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bc80      	pop	{r7}
 800c630:	4770      	bx	lr

0800c632 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800c632:	b480      	push	{r7}
 800c634:	b083      	sub	sp, #12
 800c636:	af00      	add	r7, sp, #0
 800c638:	4603      	mov	r3, r0
 800c63a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	bc80      	pop	{r7}
 800c644:	4770      	bx	lr

0800c646 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800c64a:	f7f5 fefd 	bl	8002448 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800c64e:	f000 f809 	bl	800c664 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800c652:	bf00      	nop
 800c654:	bd80      	pop	{r7, pc}

0800c656 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800c656:	b480      	push	{r7}
 800c658:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800c65a:	bf00      	nop
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bc80      	pop	{r7}
 800c660:	4770      	bx	lr
	...

0800c664 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800c668:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <SubghzApp_Init+0x30>)
 800c66a:	4a0b      	ldr	r2, [pc, #44]	; (800c698 <SubghzApp_Init+0x34>)
 800c66c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800c66e:	4b09      	ldr	r3, [pc, #36]	; (800c694 <SubghzApp_Init+0x30>)
 800c670:	4a0a      	ldr	r2, [pc, #40]	; (800c69c <SubghzApp_Init+0x38>)
 800c672:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800c674:	4b07      	ldr	r3, [pc, #28]	; (800c694 <SubghzApp_Init+0x30>)
 800c676:	4a0a      	ldr	r2, [pc, #40]	; (800c6a0 <SubghzApp_Init+0x3c>)
 800c678:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800c67a:	4b06      	ldr	r3, [pc, #24]	; (800c694 <SubghzApp_Init+0x30>)
 800c67c:	4a09      	ldr	r2, [pc, #36]	; (800c6a4 <SubghzApp_Init+0x40>)
 800c67e:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800c680:	4b04      	ldr	r3, [pc, #16]	; (800c694 <SubghzApp_Init+0x30>)
 800c682:	4a09      	ldr	r2, [pc, #36]	; (800c6a8 <SubghzApp_Init+0x44>)
 800c684:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800c686:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <SubghzApp_Init+0x48>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4802      	ldr	r0, [pc, #8]	; (800c694 <SubghzApp_Init+0x30>)
 800c68c:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800c68e:	bf00      	nop
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	200007ec 	.word	0x200007ec
 800c698:	0800c6b1 	.word	0x0800c6b1
 800c69c:	0800c6bd 	.word	0x0800c6bd
 800c6a0:	0800c6e1 	.word	0x0800c6e1
 800c6a4:	0800c6ed 	.word	0x0800c6ed
 800c6a8:	0800c6f9 	.word	0x0800c6f9
 800c6ac:	0800de00 	.word	0x0800de00

0800c6b0 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800c6b4:	bf00      	nop
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bc80      	pop	{r7}
 800c6ba:	4770      	bx	lr

0800c6bc <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	817b      	strh	r3, [r7, #10]
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	813b      	strh	r3, [r7, #8]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800c6d6:	bf00      	nop
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bc80      	pop	{r7}
 800c6de:	4770      	bx	lr

0800c6e0 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800c6e4:	bf00      	nop
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bc80      	pop	{r7}
 800c6ea:	4770      	bx	lr

0800c6ec <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800c6f0:	bf00      	nop
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bc80      	pop	{r7}
 800c6f6:	4770      	bx	lr

0800c6f8 <OnRxError>:

static void OnRxError(void)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800c6fc:	bf00      	nop
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bc80      	pop	{r7}
 800c702:	4770      	bx	lr

0800c704 <LL_AHB2_GRP1_EnableClock>:
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800c70c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c710:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4313      	orrs	r3, r2
 800c71a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800c71c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4013      	ands	r3, r2
 800c726:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c728:	68fb      	ldr	r3, [r7, #12]
}
 800c72a:	bf00      	nop
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	bc80      	pop	{r7}
 800c732:	4770      	bx	lr

0800c734 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800c73e:	463b      	mov	r3, r7
 800c740:	2200      	movs	r2, #0
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	605a      	str	r2, [r3, #4]
 800c746:	609a      	str	r2, [r3, #8]
 800c748:	60da      	str	r2, [r3, #12]
 800c74a:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800c74c:	2004      	movs	r0, #4
 800c74e:	f7ff ffd9 	bl	800c704 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800c752:	2310      	movs	r3, #16
 800c754:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800c756:	2301      	movs	r3, #1
 800c758:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800c75a:	2300      	movs	r3, #0
 800c75c:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c75e:	2303      	movs	r3, #3
 800c760:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800c762:	463b      	mov	r3, r7
 800c764:	4619      	mov	r1, r3
 800c766:	4812      	ldr	r0, [pc, #72]	; (800c7b0 <RBI_Init+0x7c>)
 800c768:	f7f7 f83a 	bl	80037e0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800c76c:	2320      	movs	r3, #32
 800c76e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800c770:	463b      	mov	r3, r7
 800c772:	4619      	mov	r1, r3
 800c774:	480e      	ldr	r0, [pc, #56]	; (800c7b0 <RBI_Init+0x7c>)
 800c776:	f7f7 f833 	bl	80037e0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800c77a:	2308      	movs	r3, #8
 800c77c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800c77e:	463b      	mov	r3, r7
 800c780:	4619      	mov	r1, r3
 800c782:	480b      	ldr	r0, [pc, #44]	; (800c7b0 <RBI_Init+0x7c>)
 800c784:	f7f7 f82c 	bl	80037e0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800c788:	2200      	movs	r2, #0
 800c78a:	2120      	movs	r1, #32
 800c78c:	4808      	ldr	r0, [pc, #32]	; (800c7b0 <RBI_Init+0x7c>)
 800c78e:	f7f7 f987 	bl	8003aa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800c792:	2200      	movs	r2, #0
 800c794:	2110      	movs	r1, #16
 800c796:	4806      	ldr	r0, [pc, #24]	; (800c7b0 <RBI_Init+0x7c>)
 800c798:	f7f7 f982 	bl	8003aa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800c79c:	2200      	movs	r2, #0
 800c79e:	2108      	movs	r1, #8
 800c7a0:	4803      	ldr	r0, [pc, #12]	; (800c7b0 <RBI_Init+0x7c>)
 800c7a2:	f7f7 f97d 	bl	8003aa0 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800c7a6:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	48000800 	.word	0x48000800

0800c7b4 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */

	switch (Config) {
 800c7c2:	79fb      	ldrb	r3, [r7, #7]
 800c7c4:	2b03      	cmp	r3, #3
 800c7c6:	d837      	bhi.n	800c838 <RBI_ConfigRFSwitch+0x84>
 800c7c8:	a201      	add	r2, pc, #4	; (adr r2, 800c7d0 <RBI_ConfigRFSwitch+0x1c>)
 800c7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ce:	bf00      	nop
 800c7d0:	0800c7e1 	.word	0x0800c7e1
 800c7d4:	0800c7f7 	.word	0x0800c7f7
 800c7d8:	0800c80d 	.word	0x0800c80d
 800c7dc:	0800c823 	.word	0x0800c823
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
		//				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	2110      	movs	r1, #16
 800c7e4:	4817      	ldr	r0, [pc, #92]	; (800c844 <RBI_ConfigRFSwitch+0x90>)
 800c7e6:	f7f7 f95b 	bl	8003aa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	2120      	movs	r1, #32
 800c7ee:	4815      	ldr	r0, [pc, #84]	; (800c844 <RBI_ConfigRFSwitch+0x90>)
 800c7f0:	f7f7 f956 	bl	8003aa0 <HAL_GPIO_WritePin>
		break;
 800c7f4:	e021      	b.n	800c83a <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	2110      	movs	r1, #16
 800c7fa:	4812      	ldr	r0, [pc, #72]	; (800c844 <RBI_ConfigRFSwitch+0x90>)
 800c7fc:	f7f7 f950 	bl	8003aa0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800c800:	2200      	movs	r2, #0
 800c802:	2120      	movs	r1, #32
 800c804:	480f      	ldr	r0, [pc, #60]	; (800c844 <RBI_ConfigRFSwitch+0x90>)
 800c806:	f7f7 f94b 	bl	8003aa0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800c80a:	e016      	b.n	800c83a <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800c80c:	2200      	movs	r2, #0
 800c80e:	2110      	movs	r1, #16
 800c810:	480c      	ldr	r0, [pc, #48]	; (800c844 <RBI_ConfigRFSwitch+0x90>)
 800c812:	f7f7 f945 	bl	8003aa0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800c816:	2201      	movs	r2, #1
 800c818:	2120      	movs	r1, #32
 800c81a:	480a      	ldr	r0, [pc, #40]	; (800c844 <RBI_ConfigRFSwitch+0x90>)
 800c81c:	f7f7 f940 	bl	8003aa0 <HAL_GPIO_WritePin>
		break;
 800c820:	e00b      	b.n	800c83a <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800c822:	2200      	movs	r2, #0
 800c824:	2110      	movs	r1, #16
 800c826:	4807      	ldr	r0, [pc, #28]	; (800c844 <RBI_ConfigRFSwitch+0x90>)
 800c828:	f7f7 f93a 	bl	8003aa0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800c82c:	2201      	movs	r2, #1
 800c82e:	2120      	movs	r1, #32
 800c830:	4804      	ldr	r0, [pc, #16]	; (800c844 <RBI_ConfigRFSwitch+0x90>)
 800c832:	f7f7 f935 	bl	8003aa0 <HAL_GPIO_WritePin>
		break;
 800c836:	e000      	b.n	800c83a <RBI_ConfigRFSwitch+0x86>
	}
	default:
		break;
 800c838:	bf00      	nop
//	}
//	default:
//		break;
//	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800c83a:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3710      	adds	r7, #16
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	48000800 	.word	0x48000800

0800c848 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800c84e:	2300      	movs	r3, #0
 800c850:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800c852:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c854:	4618      	mov	r0, r3
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	bc80      	pop	{r7}
 800c85c:	4770      	bx	lr

0800c85e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c85e:	b480      	push	{r7}
 800c860:	b083      	sub	sp, #12
 800c862:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800c864:	2301      	movs	r3, #1
 800c866:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800c868:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	bc80      	pop	{r7}
 800c872:	4770      	bx	lr

0800c874 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800c87a:	2301      	movs	r3, #1
 800c87c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800c87e:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c880:	4618      	mov	r0, r3
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	bc80      	pop	{r7}
 800c888:	4770      	bx	lr

0800c88a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	4603      	mov	r3, r0
 800c892:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800c898:	79fb      	ldrb	r3, [r7, #7]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d102      	bne.n	800c8a4 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800c89e:	230f      	movs	r3, #15
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	e001      	b.n	800c8a8 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800c8a4:	2316      	movs	r3, #22
 800c8a6:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3714      	adds	r7, #20
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bc80      	pop	{r7}
 800c8b2:	4770      	bx	lr

0800c8b4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b087      	sub	sp, #28
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800c8ca:	e007      	b.n	800c8dc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	1c53      	adds	r3, r2, #1
 800c8d0:	613b      	str	r3, [r7, #16]
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	1c59      	adds	r1, r3, #1
 800c8d6:	6179      	str	r1, [r7, #20]
 800c8d8:	7812      	ldrb	r2, [r2, #0]
 800c8da:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c8dc:	88fb      	ldrh	r3, [r7, #6]
 800c8de:	1e5a      	subs	r2, r3, #1
 800c8e0:	80fa      	strh	r2, [r7, #6]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1f2      	bne.n	800c8cc <UTIL_MEM_cpy_8+0x18>
    }
}
 800c8e6:	bf00      	nop
 800c8e8:	bf00      	nop
 800c8ea:	371c      	adds	r7, #28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bc80      	pop	{r7}
 800c8f0:	4770      	bx	lr

0800c8f2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	b085      	sub	sp, #20
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	70fb      	strb	r3, [r7, #3]
 800c8fe:	4613      	mov	r3, r2
 800c900:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800c906:	e004      	b.n	800c912 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	1c5a      	adds	r2, r3, #1
 800c90c:	60fa      	str	r2, [r7, #12]
 800c90e:	78fa      	ldrb	r2, [r7, #3]
 800c910:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c912:	883b      	ldrh	r3, [r7, #0]
 800c914:	1e5a      	subs	r2, r3, #1
 800c916:	803a      	strh	r2, [r7, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1f5      	bne.n	800c908 <UTIL_MEM_set_8+0x16>
  }
}
 800c91c:	bf00      	nop
 800c91e:	bf00      	nop
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	bc80      	pop	{r7}
 800c926:	4770      	bx	lr

0800c928 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	603b      	str	r3, [r7, #0]
 800c934:	4613      	mov	r3, r2
 800c936:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d023      	beq.n	800c986 <UTIL_TIMER_Create+0x5e>
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d020      	beq.n	800c986 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c94a:	4b11      	ldr	r3, [pc, #68]	; (800c990 <UTIL_TIMER_Create+0x68>)
 800c94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94e:	68b8      	ldr	r0, [r7, #8]
 800c950:	4798      	blx	r3
 800c952:	4602      	mov	r2, r0
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	683a      	ldr	r2, [r7, #0]
 800c96e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	79fa      	ldrb	r2, [r7, #7]
 800c97a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2200      	movs	r2, #0
 800c980:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800c982:	2300      	movs	r3, #0
 800c984:	e000      	b.n	800c988 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800c986:	2301      	movs	r3, #1
  }
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	0800ddac 	.word	0x0800ddac

0800c994 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b08a      	sub	sp, #40	; 0x28
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d056      	beq.n	800ca56 <UTIL_TIMER_Start+0xc2>
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f929 	bl	800cc00 <TimerExists>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	f083 0301 	eor.w	r3, r3, #1
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d04d      	beq.n	800ca56 <UTIL_TIMER_Start+0xc2>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	7a5b      	ldrb	r3, [r3, #9]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d149      	bne.n	800ca56 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9c2:	f3ef 8310 	mrs	r3, PRIMASK
 800c9c6:	613b      	str	r3, [r7, #16]
  return(result);
 800c9c8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c9ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9cc:	b672      	cpsid	i
}
 800c9ce:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c9d6:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <UTIL_TIMER_Start+0xd4>)
 800c9d8:	6a1b      	ldr	r3, [r3, #32]
 800c9da:	4798      	blx	r3
 800c9dc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800c9de:	6a3a      	ldr	r2, [r7, #32]
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d201      	bcs.n	800c9ea <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6a3a      	ldr	r2, [r7, #32]
 800c9ee:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800ca02:	4b1a      	ldr	r3, [pc, #104]	; (800ca6c <UTIL_TIMER_Start+0xd8>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d106      	bne.n	800ca18 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800ca0a:	4b17      	ldr	r3, [pc, #92]	; (800ca68 <UTIL_TIMER_Start+0xd4>)
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 f96b 	bl	800ccec <TimerInsertNewHeadTimer>
 800ca16:	e017      	b.n	800ca48 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800ca18:	4b13      	ldr	r3, [pc, #76]	; (800ca68 <UTIL_TIMER_Start+0xd4>)
 800ca1a:	699b      	ldr	r3, [r3, #24]
 800ca1c:	4798      	blx	r3
 800ca1e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	441a      	add	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	4b0e      	ldr	r3, [pc, #56]	; (800ca6c <UTIL_TIMER_Start+0xd8>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d203      	bcs.n	800ca42 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 f956 	bl	800ccec <TimerInsertNewHeadTimer>
 800ca40:	e002      	b.n	800ca48 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f922 	bl	800cc8c <TimerInsertTimer>
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f383 8810 	msr	PRIMASK, r3
}
 800ca52:	bf00      	nop
  {
 800ca54:	e002      	b.n	800ca5c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800ca56:	2301      	movs	r3, #1
 800ca58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800ca5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3728      	adds	r7, #40	; 0x28
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	0800ddac 	.word	0x0800ddac
 800ca6c:	20000808 	.word	0x20000808

0800ca70 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b088      	sub	sp, #32
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d05b      	beq.n	800cb3a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca82:	f3ef 8310 	mrs	r3, PRIMASK
 800ca86:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca88:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800ca8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca8c:	b672      	cpsid	i
}
 800ca8e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800ca90:	4b2d      	ldr	r3, [pc, #180]	; (800cb48 <UTIL_TIMER_Stop+0xd8>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800ca96:	4b2c      	ldr	r3, [pc, #176]	; (800cb48 <UTIL_TIMER_Stop+0xd8>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800caa2:	4b29      	ldr	r3, [pc, #164]	; (800cb48 <UTIL_TIMER_Stop+0xd8>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d041      	beq.n	800cb2e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800cab0:	4b25      	ldr	r3, [pc, #148]	; (800cb48 <UTIL_TIMER_Stop+0xd8>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d134      	bne.n	800cb24 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800caba:	4b23      	ldr	r3, [pc, #140]	; (800cb48 <UTIL_TIMER_Stop+0xd8>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2200      	movs	r2, #0
 800cac0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800cac2:	4b21      	ldr	r3, [pc, #132]	; (800cb48 <UTIL_TIMER_Stop+0xd8>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00a      	beq.n	800cae2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800cacc:	4b1e      	ldr	r3, [pc, #120]	; (800cb48 <UTIL_TIMER_Stop+0xd8>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	695b      	ldr	r3, [r3, #20]
 800cad2:	4a1d      	ldr	r2, [pc, #116]	; (800cb48 <UTIL_TIMER_Stop+0xd8>)
 800cad4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800cad6:	4b1c      	ldr	r3, [pc, #112]	; (800cb48 <UTIL_TIMER_Stop+0xd8>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4618      	mov	r0, r3
 800cadc:	f000 f8ac 	bl	800cc38 <TimerSetTimeout>
 800cae0:	e023      	b.n	800cb2a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800cae2:	4b1a      	ldr	r3, [pc, #104]	; (800cb4c <UTIL_TIMER_Stop+0xdc>)
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	4798      	blx	r3
            TimerListHead = NULL;
 800cae8:	4b17      	ldr	r3, [pc, #92]	; (800cb48 <UTIL_TIMER_Stop+0xd8>)
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]
 800caee:	e01c      	b.n	800cb2a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800caf0:	697a      	ldr	r2, [r7, #20]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d110      	bne.n	800cb1a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d006      	beq.n	800cb0e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	695b      	ldr	r3, [r3, #20]
 800cb04:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800cb0c:	e00d      	b.n	800cb2a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	615a      	str	r2, [r3, #20]
            break;
 800cb18:	e007      	b.n	800cb2a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1e2      	bne.n	800caf0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	77fb      	strb	r3, [r7, #31]
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	f383 8810 	msr	PRIMASK, r3
}
 800cb38:	e001      	b.n	800cb3e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800cb3e:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3720      	adds	r7, #32
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	20000808 	.word	0x20000808
 800cb4c:	0800ddac 	.word	0x0800ddac

0800cb50 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d102      	bne.n	800cb6a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800cb64:	2301      	movs	r3, #1
 800cb66:	73fb      	strb	r3, [r7, #15]
 800cb68:	e014      	b.n	800cb94 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800cb6a:	4b0d      	ldr	r3, [pc, #52]	; (800cba0 <UTIL_TIMER_SetPeriod+0x50>)
 800cb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6e:	6838      	ldr	r0, [r7, #0]
 800cb70:	4798      	blx	r3
 800cb72:	4602      	mov	r2, r0
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 f841 	bl	800cc00 <TimerExists>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d007      	beq.n	800cb94 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff ff73 	bl	800ca70 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff ff02 	bl	800c994 <UTIL_TIMER_Start>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	0800ddac 	.word	0x0800ddac

0800cba4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800cbaa:	4b06      	ldr	r3, [pc, #24]	; (800cbc4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800cbac:	69db      	ldr	r3, [r3, #28]
 800cbae:	4798      	blx	r3
 800cbb0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800cbb2:	4b04      	ldr	r3, [pc, #16]	; (800cbc4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800cbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	4798      	blx	r3
 800cbba:	4603      	mov	r3, r0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	0800ddac 	.word	0x0800ddac

0800cbc8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800cbd0:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <UTIL_TIMER_GetElapsedTime+0x34>)
 800cbd2:	69db      	ldr	r3, [r3, #28]
 800cbd4:	4798      	blx	r3
 800cbd6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800cbd8:	4b08      	ldr	r3, [pc, #32]	; (800cbfc <UTIL_TIMER_GetElapsedTime+0x34>)
 800cbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	4798      	blx	r3
 800cbe0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800cbe2:	4b06      	ldr	r3, [pc, #24]	; (800cbfc <UTIL_TIMER_GetElapsedTime+0x34>)
 800cbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe6:	68f9      	ldr	r1, [r7, #12]
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	1a8a      	subs	r2, r1, r2
 800cbec:	4610      	mov	r0, r2
 800cbee:	4798      	blx	r3
 800cbf0:	4603      	mov	r3, r0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	0800ddac 	.word	0x0800ddac

0800cc00 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cc08:	4b0a      	ldr	r3, [pc, #40]	; (800cc34 <TimerExists+0x34>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800cc0e:	e008      	b.n	800cc22 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d101      	bne.n	800cc1c <TimerExists+0x1c>
    {
      return true;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e006      	b.n	800cc2a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1f3      	bne.n	800cc10 <TimerExists+0x10>
  }
  return false;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3714      	adds	r7, #20
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bc80      	pop	{r7}
 800cc32:	4770      	bx	lr
 800cc34:	20000808 	.word	0x20000808

0800cc38 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800cc38:	b590      	push	{r4, r7, lr}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800cc40:	4b11      	ldr	r3, [pc, #68]	; (800cc88 <TimerSetTimeout+0x50>)
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	4798      	blx	r3
 800cc46:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681c      	ldr	r4, [r3, #0]
 800cc52:	4b0d      	ldr	r3, [pc, #52]	; (800cc88 <TimerSetTimeout+0x50>)
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	4798      	blx	r3
 800cc58:	4602      	mov	r2, r0
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	429c      	cmp	r4, r3
 800cc60:	d207      	bcs.n	800cc72 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800cc62:	4b09      	ldr	r3, [pc, #36]	; (800cc88 <TimerSetTimeout+0x50>)
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	4798      	blx	r3
 800cc68:	4602      	mov	r2, r0
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	441a      	add	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800cc72:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <TimerSetTimeout+0x50>)
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	6812      	ldr	r2, [r2, #0]
 800cc7a:	4610      	mov	r0, r2
 800cc7c:	4798      	blx	r3
}
 800cc7e:	bf00      	nop
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd90      	pop	{r4, r7, pc}
 800cc86:	bf00      	nop
 800cc88:	0800ddac 	.word	0x0800ddac

0800cc8c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cc94:	4b14      	ldr	r3, [pc, #80]	; (800cce8 <TimerInsertTimer+0x5c>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800cc9a:	4b13      	ldr	r3, [pc, #76]	; (800cce8 <TimerInsertTimer+0x5c>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	695b      	ldr	r3, [r3, #20]
 800cca0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800cca2:	e012      	b.n	800ccca <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d905      	bls.n	800ccbc <TimerInsertTimer+0x30>
    {
        cur = next;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	695b      	ldr	r3, [r3, #20]
 800ccb8:	60bb      	str	r3, [r7, #8]
 800ccba:	e006      	b.n	800ccca <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68ba      	ldr	r2, [r7, #8]
 800ccc6:	615a      	str	r2, [r3, #20]
        return;
 800ccc8:	e009      	b.n	800ccde <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	695b      	ldr	r3, [r3, #20]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1e8      	bne.n	800cca4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	615a      	str	r2, [r3, #20]
}
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bc80      	pop	{r7}
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	20000808 	.word	0x20000808

0800ccec <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ccf4:	4b0b      	ldr	r3, [pc, #44]	; (800cd24 <TimerInsertNewHeadTimer+0x38>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2200      	movs	r2, #0
 800cd04:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800cd0c:	4a05      	ldr	r2, [pc, #20]	; (800cd24 <TimerInsertNewHeadTimer+0x38>)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800cd12:	4b04      	ldr	r3, [pc, #16]	; (800cd24 <TimerInsertNewHeadTimer+0x38>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7ff ff8e 	bl	800cc38 <TimerSetTimeout>
}
 800cd1c:	bf00      	nop
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	20000808 	.word	0x20000808

0800cd28 <_vsniprintf_r>:
 800cd28:	b530      	push	{r4, r5, lr}
 800cd2a:	4614      	mov	r4, r2
 800cd2c:	2c00      	cmp	r4, #0
 800cd2e:	b09b      	sub	sp, #108	; 0x6c
 800cd30:	4605      	mov	r5, r0
 800cd32:	461a      	mov	r2, r3
 800cd34:	da05      	bge.n	800cd42 <_vsniprintf_r+0x1a>
 800cd36:	238b      	movs	r3, #139	; 0x8b
 800cd38:	6003      	str	r3, [r0, #0]
 800cd3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd3e:	b01b      	add	sp, #108	; 0x6c
 800cd40:	bd30      	pop	{r4, r5, pc}
 800cd42:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cd46:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cd4a:	bf14      	ite	ne
 800cd4c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cd50:	4623      	moveq	r3, r4
 800cd52:	9302      	str	r3, [sp, #8]
 800cd54:	9305      	str	r3, [sp, #20]
 800cd56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd5a:	9100      	str	r1, [sp, #0]
 800cd5c:	9104      	str	r1, [sp, #16]
 800cd5e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cd62:	4669      	mov	r1, sp
 800cd64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cd66:	f000 f8b5 	bl	800ced4 <_svfiprintf_r>
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	bfbc      	itt	lt
 800cd6e:	238b      	movlt	r3, #139	; 0x8b
 800cd70:	602b      	strlt	r3, [r5, #0]
 800cd72:	2c00      	cmp	r4, #0
 800cd74:	d0e3      	beq.n	800cd3e <_vsniprintf_r+0x16>
 800cd76:	9b00      	ldr	r3, [sp, #0]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	701a      	strb	r2, [r3, #0]
 800cd7c:	e7df      	b.n	800cd3e <_vsniprintf_r+0x16>
	...

0800cd80 <vsniprintf>:
 800cd80:	b507      	push	{r0, r1, r2, lr}
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	4613      	mov	r3, r2
 800cd86:	460a      	mov	r2, r1
 800cd88:	4601      	mov	r1, r0
 800cd8a:	4803      	ldr	r0, [pc, #12]	; (800cd98 <vsniprintf+0x18>)
 800cd8c:	6800      	ldr	r0, [r0, #0]
 800cd8e:	f7ff ffcb 	bl	800cd28 <_vsniprintf_r>
 800cd92:	b003      	add	sp, #12
 800cd94:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd98:	20000064 	.word	0x20000064

0800cd9c <memset>:
 800cd9c:	4402      	add	r2, r0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d100      	bne.n	800cda6 <memset+0xa>
 800cda4:	4770      	bx	lr
 800cda6:	f803 1b01 	strb.w	r1, [r3], #1
 800cdaa:	e7f9      	b.n	800cda0 <memset+0x4>

0800cdac <__errno>:
 800cdac:	4b01      	ldr	r3, [pc, #4]	; (800cdb4 <__errno+0x8>)
 800cdae:	6818      	ldr	r0, [r3, #0]
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	20000064 	.word	0x20000064

0800cdb8 <__libc_init_array>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	4d0d      	ldr	r5, [pc, #52]	; (800cdf0 <__libc_init_array+0x38>)
 800cdbc:	4c0d      	ldr	r4, [pc, #52]	; (800cdf4 <__libc_init_array+0x3c>)
 800cdbe:	1b64      	subs	r4, r4, r5
 800cdc0:	10a4      	asrs	r4, r4, #2
 800cdc2:	2600      	movs	r6, #0
 800cdc4:	42a6      	cmp	r6, r4
 800cdc6:	d109      	bne.n	800cddc <__libc_init_array+0x24>
 800cdc8:	4d0b      	ldr	r5, [pc, #44]	; (800cdf8 <__libc_init_array+0x40>)
 800cdca:	4c0c      	ldr	r4, [pc, #48]	; (800cdfc <__libc_init_array+0x44>)
 800cdcc:	f000 fc68 	bl	800d6a0 <_init>
 800cdd0:	1b64      	subs	r4, r4, r5
 800cdd2:	10a4      	asrs	r4, r4, #2
 800cdd4:	2600      	movs	r6, #0
 800cdd6:	42a6      	cmp	r6, r4
 800cdd8:	d105      	bne.n	800cde6 <__libc_init_array+0x2e>
 800cdda:	bd70      	pop	{r4, r5, r6, pc}
 800cddc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cde0:	4798      	blx	r3
 800cde2:	3601      	adds	r6, #1
 800cde4:	e7ee      	b.n	800cdc4 <__libc_init_array+0xc>
 800cde6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdea:	4798      	blx	r3
 800cdec:	3601      	adds	r6, #1
 800cdee:	e7f2      	b.n	800cdd6 <__libc_init_array+0x1e>
 800cdf0:	0800df7c 	.word	0x0800df7c
 800cdf4:	0800df7c 	.word	0x0800df7c
 800cdf8:	0800df7c 	.word	0x0800df7c
 800cdfc:	0800df80 	.word	0x0800df80

0800ce00 <__retarget_lock_acquire_recursive>:
 800ce00:	4770      	bx	lr

0800ce02 <__retarget_lock_release_recursive>:
 800ce02:	4770      	bx	lr

0800ce04 <memcpy>:
 800ce04:	440a      	add	r2, r1
 800ce06:	4291      	cmp	r1, r2
 800ce08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce0c:	d100      	bne.n	800ce10 <memcpy+0xc>
 800ce0e:	4770      	bx	lr
 800ce10:	b510      	push	{r4, lr}
 800ce12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce1a:	4291      	cmp	r1, r2
 800ce1c:	d1f9      	bne.n	800ce12 <memcpy+0xe>
 800ce1e:	bd10      	pop	{r4, pc}

0800ce20 <__ssputs_r>:
 800ce20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce24:	688e      	ldr	r6, [r1, #8]
 800ce26:	461f      	mov	r7, r3
 800ce28:	42be      	cmp	r6, r7
 800ce2a:	680b      	ldr	r3, [r1, #0]
 800ce2c:	4682      	mov	sl, r0
 800ce2e:	460c      	mov	r4, r1
 800ce30:	4690      	mov	r8, r2
 800ce32:	d82c      	bhi.n	800ce8e <__ssputs_r+0x6e>
 800ce34:	898a      	ldrh	r2, [r1, #12]
 800ce36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce3a:	d026      	beq.n	800ce8a <__ssputs_r+0x6a>
 800ce3c:	6965      	ldr	r5, [r4, #20]
 800ce3e:	6909      	ldr	r1, [r1, #16]
 800ce40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce44:	eba3 0901 	sub.w	r9, r3, r1
 800ce48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce4c:	1c7b      	adds	r3, r7, #1
 800ce4e:	444b      	add	r3, r9
 800ce50:	106d      	asrs	r5, r5, #1
 800ce52:	429d      	cmp	r5, r3
 800ce54:	bf38      	it	cc
 800ce56:	461d      	movcc	r5, r3
 800ce58:	0553      	lsls	r3, r2, #21
 800ce5a:	d527      	bpl.n	800ceac <__ssputs_r+0x8c>
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	f000 f957 	bl	800d110 <_malloc_r>
 800ce62:	4606      	mov	r6, r0
 800ce64:	b360      	cbz	r0, 800cec0 <__ssputs_r+0xa0>
 800ce66:	6921      	ldr	r1, [r4, #16]
 800ce68:	464a      	mov	r2, r9
 800ce6a:	f7ff ffcb 	bl	800ce04 <memcpy>
 800ce6e:	89a3      	ldrh	r3, [r4, #12]
 800ce70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce78:	81a3      	strh	r3, [r4, #12]
 800ce7a:	6126      	str	r6, [r4, #16]
 800ce7c:	6165      	str	r5, [r4, #20]
 800ce7e:	444e      	add	r6, r9
 800ce80:	eba5 0509 	sub.w	r5, r5, r9
 800ce84:	6026      	str	r6, [r4, #0]
 800ce86:	60a5      	str	r5, [r4, #8]
 800ce88:	463e      	mov	r6, r7
 800ce8a:	42be      	cmp	r6, r7
 800ce8c:	d900      	bls.n	800ce90 <__ssputs_r+0x70>
 800ce8e:	463e      	mov	r6, r7
 800ce90:	6820      	ldr	r0, [r4, #0]
 800ce92:	4632      	mov	r2, r6
 800ce94:	4641      	mov	r1, r8
 800ce96:	f000 fb86 	bl	800d5a6 <memmove>
 800ce9a:	68a3      	ldr	r3, [r4, #8]
 800ce9c:	1b9b      	subs	r3, r3, r6
 800ce9e:	60a3      	str	r3, [r4, #8]
 800cea0:	6823      	ldr	r3, [r4, #0]
 800cea2:	4433      	add	r3, r6
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	2000      	movs	r0, #0
 800cea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceac:	462a      	mov	r2, r5
 800ceae:	f000 fb4b 	bl	800d548 <_realloc_r>
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d1e0      	bne.n	800ce7a <__ssputs_r+0x5a>
 800ceb8:	6921      	ldr	r1, [r4, #16]
 800ceba:	4650      	mov	r0, sl
 800cebc:	f000 fb9e 	bl	800d5fc <_free_r>
 800cec0:	230c      	movs	r3, #12
 800cec2:	f8ca 3000 	str.w	r3, [sl]
 800cec6:	89a3      	ldrh	r3, [r4, #12]
 800cec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cecc:	81a3      	strh	r3, [r4, #12]
 800cece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ced2:	e7e9      	b.n	800cea8 <__ssputs_r+0x88>

0800ced4 <_svfiprintf_r>:
 800ced4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced8:	4698      	mov	r8, r3
 800ceda:	898b      	ldrh	r3, [r1, #12]
 800cedc:	061b      	lsls	r3, r3, #24
 800cede:	b09d      	sub	sp, #116	; 0x74
 800cee0:	4607      	mov	r7, r0
 800cee2:	460d      	mov	r5, r1
 800cee4:	4614      	mov	r4, r2
 800cee6:	d50e      	bpl.n	800cf06 <_svfiprintf_r+0x32>
 800cee8:	690b      	ldr	r3, [r1, #16]
 800ceea:	b963      	cbnz	r3, 800cf06 <_svfiprintf_r+0x32>
 800ceec:	2140      	movs	r1, #64	; 0x40
 800ceee:	f000 f90f 	bl	800d110 <_malloc_r>
 800cef2:	6028      	str	r0, [r5, #0]
 800cef4:	6128      	str	r0, [r5, #16]
 800cef6:	b920      	cbnz	r0, 800cf02 <_svfiprintf_r+0x2e>
 800cef8:	230c      	movs	r3, #12
 800cefa:	603b      	str	r3, [r7, #0]
 800cefc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf00:	e0d0      	b.n	800d0a4 <_svfiprintf_r+0x1d0>
 800cf02:	2340      	movs	r3, #64	; 0x40
 800cf04:	616b      	str	r3, [r5, #20]
 800cf06:	2300      	movs	r3, #0
 800cf08:	9309      	str	r3, [sp, #36]	; 0x24
 800cf0a:	2320      	movs	r3, #32
 800cf0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf10:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf14:	2330      	movs	r3, #48	; 0x30
 800cf16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d0bc <_svfiprintf_r+0x1e8>
 800cf1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf1e:	f04f 0901 	mov.w	r9, #1
 800cf22:	4623      	mov	r3, r4
 800cf24:	469a      	mov	sl, r3
 800cf26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf2a:	b10a      	cbz	r2, 800cf30 <_svfiprintf_r+0x5c>
 800cf2c:	2a25      	cmp	r2, #37	; 0x25
 800cf2e:	d1f9      	bne.n	800cf24 <_svfiprintf_r+0x50>
 800cf30:	ebba 0b04 	subs.w	fp, sl, r4
 800cf34:	d00b      	beq.n	800cf4e <_svfiprintf_r+0x7a>
 800cf36:	465b      	mov	r3, fp
 800cf38:	4622      	mov	r2, r4
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	f7ff ff6f 	bl	800ce20 <__ssputs_r>
 800cf42:	3001      	adds	r0, #1
 800cf44:	f000 80a9 	beq.w	800d09a <_svfiprintf_r+0x1c6>
 800cf48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf4a:	445a      	add	r2, fp
 800cf4c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf4e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 80a1 	beq.w	800d09a <_svfiprintf_r+0x1c6>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf62:	f10a 0a01 	add.w	sl, sl, #1
 800cf66:	9304      	str	r3, [sp, #16]
 800cf68:	9307      	str	r3, [sp, #28]
 800cf6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf6e:	931a      	str	r3, [sp, #104]	; 0x68
 800cf70:	4654      	mov	r4, sl
 800cf72:	2205      	movs	r2, #5
 800cf74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf78:	4850      	ldr	r0, [pc, #320]	; (800d0bc <_svfiprintf_r+0x1e8>)
 800cf7a:	f7f3 f901 	bl	8000180 <memchr>
 800cf7e:	9a04      	ldr	r2, [sp, #16]
 800cf80:	b9d8      	cbnz	r0, 800cfba <_svfiprintf_r+0xe6>
 800cf82:	06d0      	lsls	r0, r2, #27
 800cf84:	bf44      	itt	mi
 800cf86:	2320      	movmi	r3, #32
 800cf88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf8c:	0711      	lsls	r1, r2, #28
 800cf8e:	bf44      	itt	mi
 800cf90:	232b      	movmi	r3, #43	; 0x2b
 800cf92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf96:	f89a 3000 	ldrb.w	r3, [sl]
 800cf9a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf9c:	d015      	beq.n	800cfca <_svfiprintf_r+0xf6>
 800cf9e:	9a07      	ldr	r2, [sp, #28]
 800cfa0:	4654      	mov	r4, sl
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	f04f 0c0a 	mov.w	ip, #10
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfae:	3b30      	subs	r3, #48	; 0x30
 800cfb0:	2b09      	cmp	r3, #9
 800cfb2:	d94d      	bls.n	800d050 <_svfiprintf_r+0x17c>
 800cfb4:	b1b0      	cbz	r0, 800cfe4 <_svfiprintf_r+0x110>
 800cfb6:	9207      	str	r2, [sp, #28]
 800cfb8:	e014      	b.n	800cfe4 <_svfiprintf_r+0x110>
 800cfba:	eba0 0308 	sub.w	r3, r0, r8
 800cfbe:	fa09 f303 	lsl.w	r3, r9, r3
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	9304      	str	r3, [sp, #16]
 800cfc6:	46a2      	mov	sl, r4
 800cfc8:	e7d2      	b.n	800cf70 <_svfiprintf_r+0x9c>
 800cfca:	9b03      	ldr	r3, [sp, #12]
 800cfcc:	1d19      	adds	r1, r3, #4
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	9103      	str	r1, [sp, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bfbb      	ittet	lt
 800cfd6:	425b      	neglt	r3, r3
 800cfd8:	f042 0202 	orrlt.w	r2, r2, #2
 800cfdc:	9307      	strge	r3, [sp, #28]
 800cfde:	9307      	strlt	r3, [sp, #28]
 800cfe0:	bfb8      	it	lt
 800cfe2:	9204      	strlt	r2, [sp, #16]
 800cfe4:	7823      	ldrb	r3, [r4, #0]
 800cfe6:	2b2e      	cmp	r3, #46	; 0x2e
 800cfe8:	d10c      	bne.n	800d004 <_svfiprintf_r+0x130>
 800cfea:	7863      	ldrb	r3, [r4, #1]
 800cfec:	2b2a      	cmp	r3, #42	; 0x2a
 800cfee:	d134      	bne.n	800d05a <_svfiprintf_r+0x186>
 800cff0:	9b03      	ldr	r3, [sp, #12]
 800cff2:	1d1a      	adds	r2, r3, #4
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	9203      	str	r2, [sp, #12]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	bfb8      	it	lt
 800cffc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d000:	3402      	adds	r4, #2
 800d002:	9305      	str	r3, [sp, #20]
 800d004:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d0c0 <_svfiprintf_r+0x1ec>
 800d008:	7821      	ldrb	r1, [r4, #0]
 800d00a:	2203      	movs	r2, #3
 800d00c:	4650      	mov	r0, sl
 800d00e:	f7f3 f8b7 	bl	8000180 <memchr>
 800d012:	b138      	cbz	r0, 800d024 <_svfiprintf_r+0x150>
 800d014:	9b04      	ldr	r3, [sp, #16]
 800d016:	eba0 000a 	sub.w	r0, r0, sl
 800d01a:	2240      	movs	r2, #64	; 0x40
 800d01c:	4082      	lsls	r2, r0
 800d01e:	4313      	orrs	r3, r2
 800d020:	3401      	adds	r4, #1
 800d022:	9304      	str	r3, [sp, #16]
 800d024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d028:	4826      	ldr	r0, [pc, #152]	; (800d0c4 <_svfiprintf_r+0x1f0>)
 800d02a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d02e:	2206      	movs	r2, #6
 800d030:	f7f3 f8a6 	bl	8000180 <memchr>
 800d034:	2800      	cmp	r0, #0
 800d036:	d038      	beq.n	800d0aa <_svfiprintf_r+0x1d6>
 800d038:	4b23      	ldr	r3, [pc, #140]	; (800d0c8 <_svfiprintf_r+0x1f4>)
 800d03a:	bb1b      	cbnz	r3, 800d084 <_svfiprintf_r+0x1b0>
 800d03c:	9b03      	ldr	r3, [sp, #12]
 800d03e:	3307      	adds	r3, #7
 800d040:	f023 0307 	bic.w	r3, r3, #7
 800d044:	3308      	adds	r3, #8
 800d046:	9303      	str	r3, [sp, #12]
 800d048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d04a:	4433      	add	r3, r6
 800d04c:	9309      	str	r3, [sp, #36]	; 0x24
 800d04e:	e768      	b.n	800cf22 <_svfiprintf_r+0x4e>
 800d050:	fb0c 3202 	mla	r2, ip, r2, r3
 800d054:	460c      	mov	r4, r1
 800d056:	2001      	movs	r0, #1
 800d058:	e7a6      	b.n	800cfa8 <_svfiprintf_r+0xd4>
 800d05a:	2300      	movs	r3, #0
 800d05c:	3401      	adds	r4, #1
 800d05e:	9305      	str	r3, [sp, #20]
 800d060:	4619      	mov	r1, r3
 800d062:	f04f 0c0a 	mov.w	ip, #10
 800d066:	4620      	mov	r0, r4
 800d068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d06c:	3a30      	subs	r2, #48	; 0x30
 800d06e:	2a09      	cmp	r2, #9
 800d070:	d903      	bls.n	800d07a <_svfiprintf_r+0x1a6>
 800d072:	2b00      	cmp	r3, #0
 800d074:	d0c6      	beq.n	800d004 <_svfiprintf_r+0x130>
 800d076:	9105      	str	r1, [sp, #20]
 800d078:	e7c4      	b.n	800d004 <_svfiprintf_r+0x130>
 800d07a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d07e:	4604      	mov	r4, r0
 800d080:	2301      	movs	r3, #1
 800d082:	e7f0      	b.n	800d066 <_svfiprintf_r+0x192>
 800d084:	ab03      	add	r3, sp, #12
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	462a      	mov	r2, r5
 800d08a:	4b10      	ldr	r3, [pc, #64]	; (800d0cc <_svfiprintf_r+0x1f8>)
 800d08c:	a904      	add	r1, sp, #16
 800d08e:	4638      	mov	r0, r7
 800d090:	f3af 8000 	nop.w
 800d094:	1c42      	adds	r2, r0, #1
 800d096:	4606      	mov	r6, r0
 800d098:	d1d6      	bne.n	800d048 <_svfiprintf_r+0x174>
 800d09a:	89ab      	ldrh	r3, [r5, #12]
 800d09c:	065b      	lsls	r3, r3, #25
 800d09e:	f53f af2d 	bmi.w	800cefc <_svfiprintf_r+0x28>
 800d0a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0a4:	b01d      	add	sp, #116	; 0x74
 800d0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0aa:	ab03      	add	r3, sp, #12
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	462a      	mov	r2, r5
 800d0b0:	4b06      	ldr	r3, [pc, #24]	; (800d0cc <_svfiprintf_r+0x1f8>)
 800d0b2:	a904      	add	r1, sp, #16
 800d0b4:	4638      	mov	r0, r7
 800d0b6:	f000 f919 	bl	800d2ec <_printf_i>
 800d0ba:	e7eb      	b.n	800d094 <_svfiprintf_r+0x1c0>
 800d0bc:	0800df40 	.word	0x0800df40
 800d0c0:	0800df46 	.word	0x0800df46
 800d0c4:	0800df4a 	.word	0x0800df4a
 800d0c8:	00000000 	.word	0x00000000
 800d0cc:	0800ce21 	.word	0x0800ce21

0800d0d0 <sbrk_aligned>:
 800d0d0:	b570      	push	{r4, r5, r6, lr}
 800d0d2:	4e0e      	ldr	r6, [pc, #56]	; (800d10c <sbrk_aligned+0x3c>)
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	6831      	ldr	r1, [r6, #0]
 800d0d8:	4605      	mov	r5, r0
 800d0da:	b911      	cbnz	r1, 800d0e2 <sbrk_aligned+0x12>
 800d0dc:	f000 fa7e 	bl	800d5dc <_sbrk_r>
 800d0e0:	6030      	str	r0, [r6, #0]
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	f000 fa79 	bl	800d5dc <_sbrk_r>
 800d0ea:	1c43      	adds	r3, r0, #1
 800d0ec:	d00a      	beq.n	800d104 <sbrk_aligned+0x34>
 800d0ee:	1cc4      	adds	r4, r0, #3
 800d0f0:	f024 0403 	bic.w	r4, r4, #3
 800d0f4:	42a0      	cmp	r0, r4
 800d0f6:	d007      	beq.n	800d108 <sbrk_aligned+0x38>
 800d0f8:	1a21      	subs	r1, r4, r0
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	f000 fa6e 	bl	800d5dc <_sbrk_r>
 800d100:	3001      	adds	r0, #1
 800d102:	d101      	bne.n	800d108 <sbrk_aligned+0x38>
 800d104:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d108:	4620      	mov	r0, r4
 800d10a:	bd70      	pop	{r4, r5, r6, pc}
 800d10c:	2000094c 	.word	0x2000094c

0800d110 <_malloc_r>:
 800d110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d114:	1ccd      	adds	r5, r1, #3
 800d116:	f025 0503 	bic.w	r5, r5, #3
 800d11a:	3508      	adds	r5, #8
 800d11c:	2d0c      	cmp	r5, #12
 800d11e:	bf38      	it	cc
 800d120:	250c      	movcc	r5, #12
 800d122:	2d00      	cmp	r5, #0
 800d124:	4607      	mov	r7, r0
 800d126:	db01      	blt.n	800d12c <_malloc_r+0x1c>
 800d128:	42a9      	cmp	r1, r5
 800d12a:	d905      	bls.n	800d138 <_malloc_r+0x28>
 800d12c:	230c      	movs	r3, #12
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	2600      	movs	r6, #0
 800d132:	4630      	mov	r0, r6
 800d134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d20c <_malloc_r+0xfc>
 800d13c:	f000 f9f8 	bl	800d530 <__malloc_lock>
 800d140:	f8d8 3000 	ldr.w	r3, [r8]
 800d144:	461c      	mov	r4, r3
 800d146:	bb5c      	cbnz	r4, 800d1a0 <_malloc_r+0x90>
 800d148:	4629      	mov	r1, r5
 800d14a:	4638      	mov	r0, r7
 800d14c:	f7ff ffc0 	bl	800d0d0 <sbrk_aligned>
 800d150:	1c43      	adds	r3, r0, #1
 800d152:	4604      	mov	r4, r0
 800d154:	d155      	bne.n	800d202 <_malloc_r+0xf2>
 800d156:	f8d8 4000 	ldr.w	r4, [r8]
 800d15a:	4626      	mov	r6, r4
 800d15c:	2e00      	cmp	r6, #0
 800d15e:	d145      	bne.n	800d1ec <_malloc_r+0xdc>
 800d160:	2c00      	cmp	r4, #0
 800d162:	d048      	beq.n	800d1f6 <_malloc_r+0xe6>
 800d164:	6823      	ldr	r3, [r4, #0]
 800d166:	4631      	mov	r1, r6
 800d168:	4638      	mov	r0, r7
 800d16a:	eb04 0903 	add.w	r9, r4, r3
 800d16e:	f000 fa35 	bl	800d5dc <_sbrk_r>
 800d172:	4581      	cmp	r9, r0
 800d174:	d13f      	bne.n	800d1f6 <_malloc_r+0xe6>
 800d176:	6821      	ldr	r1, [r4, #0]
 800d178:	1a6d      	subs	r5, r5, r1
 800d17a:	4629      	mov	r1, r5
 800d17c:	4638      	mov	r0, r7
 800d17e:	f7ff ffa7 	bl	800d0d0 <sbrk_aligned>
 800d182:	3001      	adds	r0, #1
 800d184:	d037      	beq.n	800d1f6 <_malloc_r+0xe6>
 800d186:	6823      	ldr	r3, [r4, #0]
 800d188:	442b      	add	r3, r5
 800d18a:	6023      	str	r3, [r4, #0]
 800d18c:	f8d8 3000 	ldr.w	r3, [r8]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d038      	beq.n	800d206 <_malloc_r+0xf6>
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	42a2      	cmp	r2, r4
 800d198:	d12b      	bne.n	800d1f2 <_malloc_r+0xe2>
 800d19a:	2200      	movs	r2, #0
 800d19c:	605a      	str	r2, [r3, #4]
 800d19e:	e00f      	b.n	800d1c0 <_malloc_r+0xb0>
 800d1a0:	6822      	ldr	r2, [r4, #0]
 800d1a2:	1b52      	subs	r2, r2, r5
 800d1a4:	d41f      	bmi.n	800d1e6 <_malloc_r+0xd6>
 800d1a6:	2a0b      	cmp	r2, #11
 800d1a8:	d917      	bls.n	800d1da <_malloc_r+0xca>
 800d1aa:	1961      	adds	r1, r4, r5
 800d1ac:	42a3      	cmp	r3, r4
 800d1ae:	6025      	str	r5, [r4, #0]
 800d1b0:	bf18      	it	ne
 800d1b2:	6059      	strne	r1, [r3, #4]
 800d1b4:	6863      	ldr	r3, [r4, #4]
 800d1b6:	bf08      	it	eq
 800d1b8:	f8c8 1000 	streq.w	r1, [r8]
 800d1bc:	5162      	str	r2, [r4, r5]
 800d1be:	604b      	str	r3, [r1, #4]
 800d1c0:	4638      	mov	r0, r7
 800d1c2:	f104 060b 	add.w	r6, r4, #11
 800d1c6:	f000 f9b9 	bl	800d53c <__malloc_unlock>
 800d1ca:	f026 0607 	bic.w	r6, r6, #7
 800d1ce:	1d23      	adds	r3, r4, #4
 800d1d0:	1af2      	subs	r2, r6, r3
 800d1d2:	d0ae      	beq.n	800d132 <_malloc_r+0x22>
 800d1d4:	1b9b      	subs	r3, r3, r6
 800d1d6:	50a3      	str	r3, [r4, r2]
 800d1d8:	e7ab      	b.n	800d132 <_malloc_r+0x22>
 800d1da:	42a3      	cmp	r3, r4
 800d1dc:	6862      	ldr	r2, [r4, #4]
 800d1de:	d1dd      	bne.n	800d19c <_malloc_r+0x8c>
 800d1e0:	f8c8 2000 	str.w	r2, [r8]
 800d1e4:	e7ec      	b.n	800d1c0 <_malloc_r+0xb0>
 800d1e6:	4623      	mov	r3, r4
 800d1e8:	6864      	ldr	r4, [r4, #4]
 800d1ea:	e7ac      	b.n	800d146 <_malloc_r+0x36>
 800d1ec:	4634      	mov	r4, r6
 800d1ee:	6876      	ldr	r6, [r6, #4]
 800d1f0:	e7b4      	b.n	800d15c <_malloc_r+0x4c>
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	e7cc      	b.n	800d190 <_malloc_r+0x80>
 800d1f6:	230c      	movs	r3, #12
 800d1f8:	603b      	str	r3, [r7, #0]
 800d1fa:	4638      	mov	r0, r7
 800d1fc:	f000 f99e 	bl	800d53c <__malloc_unlock>
 800d200:	e797      	b.n	800d132 <_malloc_r+0x22>
 800d202:	6025      	str	r5, [r4, #0]
 800d204:	e7dc      	b.n	800d1c0 <_malloc_r+0xb0>
 800d206:	605b      	str	r3, [r3, #4]
 800d208:	deff      	udf	#255	; 0xff
 800d20a:	bf00      	nop
 800d20c:	20000948 	.word	0x20000948

0800d210 <_printf_common>:
 800d210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d214:	4616      	mov	r6, r2
 800d216:	4699      	mov	r9, r3
 800d218:	688a      	ldr	r2, [r1, #8]
 800d21a:	690b      	ldr	r3, [r1, #16]
 800d21c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d220:	4293      	cmp	r3, r2
 800d222:	bfb8      	it	lt
 800d224:	4613      	movlt	r3, r2
 800d226:	6033      	str	r3, [r6, #0]
 800d228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d22c:	4607      	mov	r7, r0
 800d22e:	460c      	mov	r4, r1
 800d230:	b10a      	cbz	r2, 800d236 <_printf_common+0x26>
 800d232:	3301      	adds	r3, #1
 800d234:	6033      	str	r3, [r6, #0]
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	0699      	lsls	r1, r3, #26
 800d23a:	bf42      	ittt	mi
 800d23c:	6833      	ldrmi	r3, [r6, #0]
 800d23e:	3302      	addmi	r3, #2
 800d240:	6033      	strmi	r3, [r6, #0]
 800d242:	6825      	ldr	r5, [r4, #0]
 800d244:	f015 0506 	ands.w	r5, r5, #6
 800d248:	d106      	bne.n	800d258 <_printf_common+0x48>
 800d24a:	f104 0a19 	add.w	sl, r4, #25
 800d24e:	68e3      	ldr	r3, [r4, #12]
 800d250:	6832      	ldr	r2, [r6, #0]
 800d252:	1a9b      	subs	r3, r3, r2
 800d254:	42ab      	cmp	r3, r5
 800d256:	dc26      	bgt.n	800d2a6 <_printf_common+0x96>
 800d258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d25c:	1e13      	subs	r3, r2, #0
 800d25e:	6822      	ldr	r2, [r4, #0]
 800d260:	bf18      	it	ne
 800d262:	2301      	movne	r3, #1
 800d264:	0692      	lsls	r2, r2, #26
 800d266:	d42b      	bmi.n	800d2c0 <_printf_common+0xb0>
 800d268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d26c:	4649      	mov	r1, r9
 800d26e:	4638      	mov	r0, r7
 800d270:	47c0      	blx	r8
 800d272:	3001      	adds	r0, #1
 800d274:	d01e      	beq.n	800d2b4 <_printf_common+0xa4>
 800d276:	6823      	ldr	r3, [r4, #0]
 800d278:	6922      	ldr	r2, [r4, #16]
 800d27a:	f003 0306 	and.w	r3, r3, #6
 800d27e:	2b04      	cmp	r3, #4
 800d280:	bf02      	ittt	eq
 800d282:	68e5      	ldreq	r5, [r4, #12]
 800d284:	6833      	ldreq	r3, [r6, #0]
 800d286:	1aed      	subeq	r5, r5, r3
 800d288:	68a3      	ldr	r3, [r4, #8]
 800d28a:	bf0c      	ite	eq
 800d28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d290:	2500      	movne	r5, #0
 800d292:	4293      	cmp	r3, r2
 800d294:	bfc4      	itt	gt
 800d296:	1a9b      	subgt	r3, r3, r2
 800d298:	18ed      	addgt	r5, r5, r3
 800d29a:	2600      	movs	r6, #0
 800d29c:	341a      	adds	r4, #26
 800d29e:	42b5      	cmp	r5, r6
 800d2a0:	d11a      	bne.n	800d2d8 <_printf_common+0xc8>
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	e008      	b.n	800d2b8 <_printf_common+0xa8>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	4652      	mov	r2, sl
 800d2aa:	4649      	mov	r1, r9
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	47c0      	blx	r8
 800d2b0:	3001      	adds	r0, #1
 800d2b2:	d103      	bne.n	800d2bc <_printf_common+0xac>
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2bc:	3501      	adds	r5, #1
 800d2be:	e7c6      	b.n	800d24e <_printf_common+0x3e>
 800d2c0:	18e1      	adds	r1, r4, r3
 800d2c2:	1c5a      	adds	r2, r3, #1
 800d2c4:	2030      	movs	r0, #48	; 0x30
 800d2c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2ca:	4422      	add	r2, r4
 800d2cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2d4:	3302      	adds	r3, #2
 800d2d6:	e7c7      	b.n	800d268 <_printf_common+0x58>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	4622      	mov	r2, r4
 800d2dc:	4649      	mov	r1, r9
 800d2de:	4638      	mov	r0, r7
 800d2e0:	47c0      	blx	r8
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	d0e6      	beq.n	800d2b4 <_printf_common+0xa4>
 800d2e6:	3601      	adds	r6, #1
 800d2e8:	e7d9      	b.n	800d29e <_printf_common+0x8e>
	...

0800d2ec <_printf_i>:
 800d2ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f0:	7e0f      	ldrb	r7, [r1, #24]
 800d2f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2f4:	2f78      	cmp	r7, #120	; 0x78
 800d2f6:	4691      	mov	r9, r2
 800d2f8:	4680      	mov	r8, r0
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	469a      	mov	sl, r3
 800d2fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d302:	d807      	bhi.n	800d314 <_printf_i+0x28>
 800d304:	2f62      	cmp	r7, #98	; 0x62
 800d306:	d80a      	bhi.n	800d31e <_printf_i+0x32>
 800d308:	2f00      	cmp	r7, #0
 800d30a:	f000 80d4 	beq.w	800d4b6 <_printf_i+0x1ca>
 800d30e:	2f58      	cmp	r7, #88	; 0x58
 800d310:	f000 80c0 	beq.w	800d494 <_printf_i+0x1a8>
 800d314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d31c:	e03a      	b.n	800d394 <_printf_i+0xa8>
 800d31e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d322:	2b15      	cmp	r3, #21
 800d324:	d8f6      	bhi.n	800d314 <_printf_i+0x28>
 800d326:	a101      	add	r1, pc, #4	; (adr r1, 800d32c <_printf_i+0x40>)
 800d328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d32c:	0800d385 	.word	0x0800d385
 800d330:	0800d399 	.word	0x0800d399
 800d334:	0800d315 	.word	0x0800d315
 800d338:	0800d315 	.word	0x0800d315
 800d33c:	0800d315 	.word	0x0800d315
 800d340:	0800d315 	.word	0x0800d315
 800d344:	0800d399 	.word	0x0800d399
 800d348:	0800d315 	.word	0x0800d315
 800d34c:	0800d315 	.word	0x0800d315
 800d350:	0800d315 	.word	0x0800d315
 800d354:	0800d315 	.word	0x0800d315
 800d358:	0800d49d 	.word	0x0800d49d
 800d35c:	0800d3c5 	.word	0x0800d3c5
 800d360:	0800d457 	.word	0x0800d457
 800d364:	0800d315 	.word	0x0800d315
 800d368:	0800d315 	.word	0x0800d315
 800d36c:	0800d4bf 	.word	0x0800d4bf
 800d370:	0800d315 	.word	0x0800d315
 800d374:	0800d3c5 	.word	0x0800d3c5
 800d378:	0800d315 	.word	0x0800d315
 800d37c:	0800d315 	.word	0x0800d315
 800d380:	0800d45f 	.word	0x0800d45f
 800d384:	682b      	ldr	r3, [r5, #0]
 800d386:	1d1a      	adds	r2, r3, #4
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	602a      	str	r2, [r5, #0]
 800d38c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d394:	2301      	movs	r3, #1
 800d396:	e09f      	b.n	800d4d8 <_printf_i+0x1ec>
 800d398:	6820      	ldr	r0, [r4, #0]
 800d39a:	682b      	ldr	r3, [r5, #0]
 800d39c:	0607      	lsls	r7, r0, #24
 800d39e:	f103 0104 	add.w	r1, r3, #4
 800d3a2:	6029      	str	r1, [r5, #0]
 800d3a4:	d501      	bpl.n	800d3aa <_printf_i+0xbe>
 800d3a6:	681e      	ldr	r6, [r3, #0]
 800d3a8:	e003      	b.n	800d3b2 <_printf_i+0xc6>
 800d3aa:	0646      	lsls	r6, r0, #25
 800d3ac:	d5fb      	bpl.n	800d3a6 <_printf_i+0xba>
 800d3ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d3b2:	2e00      	cmp	r6, #0
 800d3b4:	da03      	bge.n	800d3be <_printf_i+0xd2>
 800d3b6:	232d      	movs	r3, #45	; 0x2d
 800d3b8:	4276      	negs	r6, r6
 800d3ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3be:	485a      	ldr	r0, [pc, #360]	; (800d528 <_printf_i+0x23c>)
 800d3c0:	230a      	movs	r3, #10
 800d3c2:	e012      	b.n	800d3ea <_printf_i+0xfe>
 800d3c4:	682b      	ldr	r3, [r5, #0]
 800d3c6:	6820      	ldr	r0, [r4, #0]
 800d3c8:	1d19      	adds	r1, r3, #4
 800d3ca:	6029      	str	r1, [r5, #0]
 800d3cc:	0605      	lsls	r5, r0, #24
 800d3ce:	d501      	bpl.n	800d3d4 <_printf_i+0xe8>
 800d3d0:	681e      	ldr	r6, [r3, #0]
 800d3d2:	e002      	b.n	800d3da <_printf_i+0xee>
 800d3d4:	0641      	lsls	r1, r0, #25
 800d3d6:	d5fb      	bpl.n	800d3d0 <_printf_i+0xe4>
 800d3d8:	881e      	ldrh	r6, [r3, #0]
 800d3da:	4853      	ldr	r0, [pc, #332]	; (800d528 <_printf_i+0x23c>)
 800d3dc:	2f6f      	cmp	r7, #111	; 0x6f
 800d3de:	bf0c      	ite	eq
 800d3e0:	2308      	moveq	r3, #8
 800d3e2:	230a      	movne	r3, #10
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3ea:	6865      	ldr	r5, [r4, #4]
 800d3ec:	60a5      	str	r5, [r4, #8]
 800d3ee:	2d00      	cmp	r5, #0
 800d3f0:	bfa2      	ittt	ge
 800d3f2:	6821      	ldrge	r1, [r4, #0]
 800d3f4:	f021 0104 	bicge.w	r1, r1, #4
 800d3f8:	6021      	strge	r1, [r4, #0]
 800d3fa:	b90e      	cbnz	r6, 800d400 <_printf_i+0x114>
 800d3fc:	2d00      	cmp	r5, #0
 800d3fe:	d04b      	beq.n	800d498 <_printf_i+0x1ac>
 800d400:	4615      	mov	r5, r2
 800d402:	fbb6 f1f3 	udiv	r1, r6, r3
 800d406:	fb03 6711 	mls	r7, r3, r1, r6
 800d40a:	5dc7      	ldrb	r7, [r0, r7]
 800d40c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d410:	4637      	mov	r7, r6
 800d412:	42bb      	cmp	r3, r7
 800d414:	460e      	mov	r6, r1
 800d416:	d9f4      	bls.n	800d402 <_printf_i+0x116>
 800d418:	2b08      	cmp	r3, #8
 800d41a:	d10b      	bne.n	800d434 <_printf_i+0x148>
 800d41c:	6823      	ldr	r3, [r4, #0]
 800d41e:	07de      	lsls	r6, r3, #31
 800d420:	d508      	bpl.n	800d434 <_printf_i+0x148>
 800d422:	6923      	ldr	r3, [r4, #16]
 800d424:	6861      	ldr	r1, [r4, #4]
 800d426:	4299      	cmp	r1, r3
 800d428:	bfde      	ittt	le
 800d42a:	2330      	movle	r3, #48	; 0x30
 800d42c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d430:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d434:	1b52      	subs	r2, r2, r5
 800d436:	6122      	str	r2, [r4, #16]
 800d438:	f8cd a000 	str.w	sl, [sp]
 800d43c:	464b      	mov	r3, r9
 800d43e:	aa03      	add	r2, sp, #12
 800d440:	4621      	mov	r1, r4
 800d442:	4640      	mov	r0, r8
 800d444:	f7ff fee4 	bl	800d210 <_printf_common>
 800d448:	3001      	adds	r0, #1
 800d44a:	d14a      	bne.n	800d4e2 <_printf_i+0x1f6>
 800d44c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d450:	b004      	add	sp, #16
 800d452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	f043 0320 	orr.w	r3, r3, #32
 800d45c:	6023      	str	r3, [r4, #0]
 800d45e:	4833      	ldr	r0, [pc, #204]	; (800d52c <_printf_i+0x240>)
 800d460:	2778      	movs	r7, #120	; 0x78
 800d462:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	6829      	ldr	r1, [r5, #0]
 800d46a:	061f      	lsls	r7, r3, #24
 800d46c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d470:	d402      	bmi.n	800d478 <_printf_i+0x18c>
 800d472:	065f      	lsls	r7, r3, #25
 800d474:	bf48      	it	mi
 800d476:	b2b6      	uxthmi	r6, r6
 800d478:	07df      	lsls	r7, r3, #31
 800d47a:	bf48      	it	mi
 800d47c:	f043 0320 	orrmi.w	r3, r3, #32
 800d480:	6029      	str	r1, [r5, #0]
 800d482:	bf48      	it	mi
 800d484:	6023      	strmi	r3, [r4, #0]
 800d486:	b91e      	cbnz	r6, 800d490 <_printf_i+0x1a4>
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	f023 0320 	bic.w	r3, r3, #32
 800d48e:	6023      	str	r3, [r4, #0]
 800d490:	2310      	movs	r3, #16
 800d492:	e7a7      	b.n	800d3e4 <_printf_i+0xf8>
 800d494:	4824      	ldr	r0, [pc, #144]	; (800d528 <_printf_i+0x23c>)
 800d496:	e7e4      	b.n	800d462 <_printf_i+0x176>
 800d498:	4615      	mov	r5, r2
 800d49a:	e7bd      	b.n	800d418 <_printf_i+0x12c>
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	6826      	ldr	r6, [r4, #0]
 800d4a0:	6961      	ldr	r1, [r4, #20]
 800d4a2:	1d18      	adds	r0, r3, #4
 800d4a4:	6028      	str	r0, [r5, #0]
 800d4a6:	0635      	lsls	r5, r6, #24
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	d501      	bpl.n	800d4b0 <_printf_i+0x1c4>
 800d4ac:	6019      	str	r1, [r3, #0]
 800d4ae:	e002      	b.n	800d4b6 <_printf_i+0x1ca>
 800d4b0:	0670      	lsls	r0, r6, #25
 800d4b2:	d5fb      	bpl.n	800d4ac <_printf_i+0x1c0>
 800d4b4:	8019      	strh	r1, [r3, #0]
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	6123      	str	r3, [r4, #16]
 800d4ba:	4615      	mov	r5, r2
 800d4bc:	e7bc      	b.n	800d438 <_printf_i+0x14c>
 800d4be:	682b      	ldr	r3, [r5, #0]
 800d4c0:	1d1a      	adds	r2, r3, #4
 800d4c2:	602a      	str	r2, [r5, #0]
 800d4c4:	681d      	ldr	r5, [r3, #0]
 800d4c6:	6862      	ldr	r2, [r4, #4]
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	f7f2 fe58 	bl	8000180 <memchr>
 800d4d0:	b108      	cbz	r0, 800d4d6 <_printf_i+0x1ea>
 800d4d2:	1b40      	subs	r0, r0, r5
 800d4d4:	6060      	str	r0, [r4, #4]
 800d4d6:	6863      	ldr	r3, [r4, #4]
 800d4d8:	6123      	str	r3, [r4, #16]
 800d4da:	2300      	movs	r3, #0
 800d4dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4e0:	e7aa      	b.n	800d438 <_printf_i+0x14c>
 800d4e2:	6923      	ldr	r3, [r4, #16]
 800d4e4:	462a      	mov	r2, r5
 800d4e6:	4649      	mov	r1, r9
 800d4e8:	4640      	mov	r0, r8
 800d4ea:	47d0      	blx	sl
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d0ad      	beq.n	800d44c <_printf_i+0x160>
 800d4f0:	6823      	ldr	r3, [r4, #0]
 800d4f2:	079b      	lsls	r3, r3, #30
 800d4f4:	d413      	bmi.n	800d51e <_printf_i+0x232>
 800d4f6:	68e0      	ldr	r0, [r4, #12]
 800d4f8:	9b03      	ldr	r3, [sp, #12]
 800d4fa:	4298      	cmp	r0, r3
 800d4fc:	bfb8      	it	lt
 800d4fe:	4618      	movlt	r0, r3
 800d500:	e7a6      	b.n	800d450 <_printf_i+0x164>
 800d502:	2301      	movs	r3, #1
 800d504:	4632      	mov	r2, r6
 800d506:	4649      	mov	r1, r9
 800d508:	4640      	mov	r0, r8
 800d50a:	47d0      	blx	sl
 800d50c:	3001      	adds	r0, #1
 800d50e:	d09d      	beq.n	800d44c <_printf_i+0x160>
 800d510:	3501      	adds	r5, #1
 800d512:	68e3      	ldr	r3, [r4, #12]
 800d514:	9903      	ldr	r1, [sp, #12]
 800d516:	1a5b      	subs	r3, r3, r1
 800d518:	42ab      	cmp	r3, r5
 800d51a:	dcf2      	bgt.n	800d502 <_printf_i+0x216>
 800d51c:	e7eb      	b.n	800d4f6 <_printf_i+0x20a>
 800d51e:	2500      	movs	r5, #0
 800d520:	f104 0619 	add.w	r6, r4, #25
 800d524:	e7f5      	b.n	800d512 <_printf_i+0x226>
 800d526:	bf00      	nop
 800d528:	0800df51 	.word	0x0800df51
 800d52c:	0800df62 	.word	0x0800df62

0800d530 <__malloc_lock>:
 800d530:	4801      	ldr	r0, [pc, #4]	; (800d538 <__malloc_lock+0x8>)
 800d532:	f7ff bc65 	b.w	800ce00 <__retarget_lock_acquire_recursive>
 800d536:	bf00      	nop
 800d538:	20000944 	.word	0x20000944

0800d53c <__malloc_unlock>:
 800d53c:	4801      	ldr	r0, [pc, #4]	; (800d544 <__malloc_unlock+0x8>)
 800d53e:	f7ff bc60 	b.w	800ce02 <__retarget_lock_release_recursive>
 800d542:	bf00      	nop
 800d544:	20000944 	.word	0x20000944

0800d548 <_realloc_r>:
 800d548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d54c:	4680      	mov	r8, r0
 800d54e:	4614      	mov	r4, r2
 800d550:	460e      	mov	r6, r1
 800d552:	b921      	cbnz	r1, 800d55e <_realloc_r+0x16>
 800d554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d558:	4611      	mov	r1, r2
 800d55a:	f7ff bdd9 	b.w	800d110 <_malloc_r>
 800d55e:	b92a      	cbnz	r2, 800d56c <_realloc_r+0x24>
 800d560:	f000 f84c 	bl	800d5fc <_free_r>
 800d564:	4625      	mov	r5, r4
 800d566:	4628      	mov	r0, r5
 800d568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d56c:	f000 f890 	bl	800d690 <_malloc_usable_size_r>
 800d570:	4284      	cmp	r4, r0
 800d572:	4607      	mov	r7, r0
 800d574:	d802      	bhi.n	800d57c <_realloc_r+0x34>
 800d576:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d57a:	d812      	bhi.n	800d5a2 <_realloc_r+0x5a>
 800d57c:	4621      	mov	r1, r4
 800d57e:	4640      	mov	r0, r8
 800d580:	f7ff fdc6 	bl	800d110 <_malloc_r>
 800d584:	4605      	mov	r5, r0
 800d586:	2800      	cmp	r0, #0
 800d588:	d0ed      	beq.n	800d566 <_realloc_r+0x1e>
 800d58a:	42bc      	cmp	r4, r7
 800d58c:	4622      	mov	r2, r4
 800d58e:	4631      	mov	r1, r6
 800d590:	bf28      	it	cs
 800d592:	463a      	movcs	r2, r7
 800d594:	f7ff fc36 	bl	800ce04 <memcpy>
 800d598:	4631      	mov	r1, r6
 800d59a:	4640      	mov	r0, r8
 800d59c:	f000 f82e 	bl	800d5fc <_free_r>
 800d5a0:	e7e1      	b.n	800d566 <_realloc_r+0x1e>
 800d5a2:	4635      	mov	r5, r6
 800d5a4:	e7df      	b.n	800d566 <_realloc_r+0x1e>

0800d5a6 <memmove>:
 800d5a6:	4288      	cmp	r0, r1
 800d5a8:	b510      	push	{r4, lr}
 800d5aa:	eb01 0402 	add.w	r4, r1, r2
 800d5ae:	d902      	bls.n	800d5b6 <memmove+0x10>
 800d5b0:	4284      	cmp	r4, r0
 800d5b2:	4623      	mov	r3, r4
 800d5b4:	d807      	bhi.n	800d5c6 <memmove+0x20>
 800d5b6:	1e43      	subs	r3, r0, #1
 800d5b8:	42a1      	cmp	r1, r4
 800d5ba:	d008      	beq.n	800d5ce <memmove+0x28>
 800d5bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5c4:	e7f8      	b.n	800d5b8 <memmove+0x12>
 800d5c6:	4402      	add	r2, r0
 800d5c8:	4601      	mov	r1, r0
 800d5ca:	428a      	cmp	r2, r1
 800d5cc:	d100      	bne.n	800d5d0 <memmove+0x2a>
 800d5ce:	bd10      	pop	{r4, pc}
 800d5d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5d8:	e7f7      	b.n	800d5ca <memmove+0x24>
	...

0800d5dc <_sbrk_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	4d06      	ldr	r5, [pc, #24]	; (800d5f8 <_sbrk_r+0x1c>)
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	4608      	mov	r0, r1
 800d5e6:	602b      	str	r3, [r5, #0]
 800d5e8:	f7f4 ff54 	bl	8002494 <_sbrk>
 800d5ec:	1c43      	adds	r3, r0, #1
 800d5ee:	d102      	bne.n	800d5f6 <_sbrk_r+0x1a>
 800d5f0:	682b      	ldr	r3, [r5, #0]
 800d5f2:	b103      	cbz	r3, 800d5f6 <_sbrk_r+0x1a>
 800d5f4:	6023      	str	r3, [r4, #0]
 800d5f6:	bd38      	pop	{r3, r4, r5, pc}
 800d5f8:	20000950 	.word	0x20000950

0800d5fc <_free_r>:
 800d5fc:	b538      	push	{r3, r4, r5, lr}
 800d5fe:	4605      	mov	r5, r0
 800d600:	2900      	cmp	r1, #0
 800d602:	d041      	beq.n	800d688 <_free_r+0x8c>
 800d604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d608:	1f0c      	subs	r4, r1, #4
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	bfb8      	it	lt
 800d60e:	18e4      	addlt	r4, r4, r3
 800d610:	f7ff ff8e 	bl	800d530 <__malloc_lock>
 800d614:	4a1d      	ldr	r2, [pc, #116]	; (800d68c <_free_r+0x90>)
 800d616:	6813      	ldr	r3, [r2, #0]
 800d618:	b933      	cbnz	r3, 800d628 <_free_r+0x2c>
 800d61a:	6063      	str	r3, [r4, #4]
 800d61c:	6014      	str	r4, [r2, #0]
 800d61e:	4628      	mov	r0, r5
 800d620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d624:	f7ff bf8a 	b.w	800d53c <__malloc_unlock>
 800d628:	42a3      	cmp	r3, r4
 800d62a:	d908      	bls.n	800d63e <_free_r+0x42>
 800d62c:	6820      	ldr	r0, [r4, #0]
 800d62e:	1821      	adds	r1, r4, r0
 800d630:	428b      	cmp	r3, r1
 800d632:	bf01      	itttt	eq
 800d634:	6819      	ldreq	r1, [r3, #0]
 800d636:	685b      	ldreq	r3, [r3, #4]
 800d638:	1809      	addeq	r1, r1, r0
 800d63a:	6021      	streq	r1, [r4, #0]
 800d63c:	e7ed      	b.n	800d61a <_free_r+0x1e>
 800d63e:	461a      	mov	r2, r3
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	b10b      	cbz	r3, 800d648 <_free_r+0x4c>
 800d644:	42a3      	cmp	r3, r4
 800d646:	d9fa      	bls.n	800d63e <_free_r+0x42>
 800d648:	6811      	ldr	r1, [r2, #0]
 800d64a:	1850      	adds	r0, r2, r1
 800d64c:	42a0      	cmp	r0, r4
 800d64e:	d10b      	bne.n	800d668 <_free_r+0x6c>
 800d650:	6820      	ldr	r0, [r4, #0]
 800d652:	4401      	add	r1, r0
 800d654:	1850      	adds	r0, r2, r1
 800d656:	4283      	cmp	r3, r0
 800d658:	6011      	str	r1, [r2, #0]
 800d65a:	d1e0      	bne.n	800d61e <_free_r+0x22>
 800d65c:	6818      	ldr	r0, [r3, #0]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	6053      	str	r3, [r2, #4]
 800d662:	4408      	add	r0, r1
 800d664:	6010      	str	r0, [r2, #0]
 800d666:	e7da      	b.n	800d61e <_free_r+0x22>
 800d668:	d902      	bls.n	800d670 <_free_r+0x74>
 800d66a:	230c      	movs	r3, #12
 800d66c:	602b      	str	r3, [r5, #0]
 800d66e:	e7d6      	b.n	800d61e <_free_r+0x22>
 800d670:	6820      	ldr	r0, [r4, #0]
 800d672:	1821      	adds	r1, r4, r0
 800d674:	428b      	cmp	r3, r1
 800d676:	bf04      	itt	eq
 800d678:	6819      	ldreq	r1, [r3, #0]
 800d67a:	685b      	ldreq	r3, [r3, #4]
 800d67c:	6063      	str	r3, [r4, #4]
 800d67e:	bf04      	itt	eq
 800d680:	1809      	addeq	r1, r1, r0
 800d682:	6021      	streq	r1, [r4, #0]
 800d684:	6054      	str	r4, [r2, #4]
 800d686:	e7ca      	b.n	800d61e <_free_r+0x22>
 800d688:	bd38      	pop	{r3, r4, r5, pc}
 800d68a:	bf00      	nop
 800d68c:	20000948 	.word	0x20000948

0800d690 <_malloc_usable_size_r>:
 800d690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d694:	1f18      	subs	r0, r3, #4
 800d696:	2b00      	cmp	r3, #0
 800d698:	bfbc      	itt	lt
 800d69a:	580b      	ldrlt	r3, [r1, r0]
 800d69c:	18c0      	addlt	r0, r0, r3
 800d69e:	4770      	bx	lr

0800d6a0 <_init>:
 800d6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a2:	bf00      	nop
 800d6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a6:	bc08      	pop	{r3}
 800d6a8:	469e      	mov	lr, r3
 800d6aa:	4770      	bx	lr

0800d6ac <_fini>:
 800d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ae:	bf00      	nop
 800d6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6b2:	bc08      	pop	{r3}
 800d6b4:	469e      	mov	lr, r3
 800d6b6:	4770      	bx	lr
