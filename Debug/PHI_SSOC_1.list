
PHI_SSOC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d560  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800d6a0  0800d6a0  0001d6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df5c  0800df5c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800df5c  0800df5c  0001df5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df64  0800df64  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df64  0800df64  0001df64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df68  0800df68  0001df68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800df6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  20000068  0800dfd4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  0800dfd4  00020954  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026edf  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005277  00000000  00000000  00046fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002488  00000000  00000000  0004c230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c17  00000000  00000000  0004e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024636  00000000  00000000  000502cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026ea7  00000000  00000000  00074905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6aa7  00000000  00000000  0009b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009f0c  00000000  00000000  00172254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d688 	.word	0x0800d688

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800d688 	.word	0x0800d688

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	f023 0203 	bic.w	r2, r3, #3
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	431a      	orrs	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	60da      	str	r2, [r3, #12]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	f003 0303 	and.w	r3, r3, #3
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800056a:	f023 0317 	bic.w	r3, r3, #23
 800056e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000590:	f023 0317 	bic.w	r3, r3, #23
 8000594:	f043 0201 	orr.w	r2, r3, #1
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d101      	bne.n	80005be <LL_ADC_IsEnabled+0x18>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e000      	b.n	80005c0 <LL_ADC_IsEnabled+0x1a>
 80005be:	2300      	movs	r3, #0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr

080005ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d101      	bne.n	80005e2 <LL_ADC_IsDisableOngoing+0x18>
 80005de:	2301      	movs	r3, #1
 80005e0:	e000      	b.n	80005e4 <LL_ADC_IsDisableOngoing+0x1a>
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80005fe:	f023 0317 	bic.w	r3, r3, #23
 8000602:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000628:	d101      	bne.n	800062e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800062a:	2301      	movs	r3, #1
 800062c:	e000      	b.n	8000630 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800064a:	f023 0317 	bic.w	r3, r3, #23
 800064e:	f043 0204 	orr.w	r2, r3, #4
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	2b04      	cmp	r3, #4
 8000672:	d101      	bne.n	8000678 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000674:	2301      	movs	r3, #1
 8000676:	e000      	b.n	800067a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	b29b      	uxth	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d101      	bne.n	80006b4 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 80006b0:	2301      	movs	r3, #1
 80006b2:	e000      	b.n	80006b6 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d101      	bne.n	80006d8 <LL_ADC_IsActiveFlag_EOC+0x18>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <LL_ADC_IsActiveFlag_EOC+0x1a>
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2204      	movs	r2, #4
 80006f0:	601a      	str	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <Activate_ADC>:
__IO uint16_t uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE; /* ADC group regular conversion data */

/* Variables for ADC conversion data computation to physical values */
__IO int16_t hADCxConvertedData_Temperature_DegreeCelsius; /* Value of temperature calculated from ADC conversion data (unit: degree Celsius) */

void Activate_ADC(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	__IO uint32_t wait_loop_index = 0U;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
	__IO uint32_t backup_setting_adc_dma_transfer = 0U;
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
	/*       implemented anyway to show the best practice usages                */
	/*       corresponding to reference manual procedure.                       */
	/*       Software can be optimized by removing some of these checks, if     */
	/*       they are not relevant considering previous settings and actions    */
	/*       in user application.                                               */
	if (LL_ADC_IsEnabled(ADC) == 0) {
 800070a:	4828      	ldr	r0, [pc, #160]	; (80007ac <Activate_ADC+0xb0>)
 800070c:	f7ff ff4b 	bl	80005a6 <LL_ADC_IsEnabled>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d145      	bne.n	80007a2 <Activate_ADC+0xa6>
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(ADC);
 8000716:	4825      	ldr	r0, [pc, #148]	; (80007ac <Activate_ADC+0xb0>)
 8000718:	f7ff ff1f 	bl	800055a <LL_ADC_EnableInternalRegulator>
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		/* Note: If system core clock frequency is below 200kHz, wait time        */
		/*       is only a few CPU processing cycles.                             */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
				* (SystemCoreClock / (100000 * 2))) / 10);
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <Activate_ADC+0xb4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	099b      	lsrs	r3, r3, #6
 8000722:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <Activate_ADC+0xb8>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	099a      	lsrs	r2, r3, #6
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	461a      	mov	r2, r3
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <Activate_ADC+0xbc>)
 8000736:	fba3 2302 	umull	r2, r3, r3, r2
 800073a:	08db      	lsrs	r3, r3, #3
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
 800073c:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 800073e:	e002      	b.n	8000746 <Activate_ADC+0x4a>
			wait_loop_index--;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f9      	bne.n	8000740 <Activate_ADC+0x44>
		/* Note: Specificity of this STM32 series: Calibration factor is          */
		/*       available in data register and also transferred by DMA.          */
		/*       To not insert ADC calibration factor among ADC conversion data   */
		/*       in DMA destination address, DMA transfer must be disabled during */
		/*       calibration.                                                     */
		backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(ADC);
 800074c:	4817      	ldr	r0, [pc, #92]	; (80007ac <Activate_ADC+0xb0>)
 800074e:	f7ff fef7 	bl	8000540 <LL_ADC_REG_GetDMATransfer>
 8000752:	4603      	mov	r3, r0
 8000754:	603b      	str	r3, [r7, #0]
		LL_ADC_REG_SetDMATransfer(ADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8000756:	2100      	movs	r1, #0
 8000758:	4814      	ldr	r0, [pc, #80]	; (80007ac <Activate_ADC+0xb0>)
 800075a:	f7ff fedf 	bl	800051c <LL_ADC_REG_SetDMATransfer>

		/* Run ADC self calibration */
		LL_ADC_StartCalibration(ADC);
 800075e:	4813      	ldr	r0, [pc, #76]	; (80007ac <Activate_ADC+0xb0>)
 8000760:	f7ff ff45 	bl	80005ee <LL_ADC_StartCalibration>
		/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
	    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
	    #endif /* USE_TIMEOUT */

		while (LL_ADC_IsCalibrationOnGoing(ADC) != 0) {
 8000764:	bf00      	nop
 8000766:	4811      	ldr	r0, [pc, #68]	; (80007ac <Activate_ADC+0xb0>)
 8000768:	f7ff ff54 	bl	8000614 <LL_ADC_IsCalibrationOnGoing>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f9      	bne.n	8000766 <Activate_ADC+0x6a>
	      }
	    #endif /* USE_TIMEOUT */
		}

		/* Restore ADC DMA transfer request after calibration */
		LL_ADC_REG_SetDMATransfer(ADC, backup_setting_adc_dma_transfer);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <Activate_ADC+0xb0>)
 8000778:	f7ff fed0 	bl	800051c <LL_ADC_REG_SetDMATransfer>

		/* Delay between ADC end of calibration and ADC enable.                   */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 800077c:	2320      	movs	r3, #32
 800077e:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 8000780:	e002      	b.n	8000788 <Activate_ADC+0x8c>
			wait_loop_index--;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3b01      	subs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f9      	bne.n	8000782 <Activate_ADC+0x86>
		}

		/* Enable ADC */
		LL_ADC_Enable(ADC);
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <Activate_ADC+0xb0>)
 8000790:	f7ff fef6 	bl	8000580 <LL_ADC_Enable>
		/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
	    Timeout = ADC_ENABLE_TIMEOUT_MS;
	    #endif /* USE_TIMEOUT */

		while (LL_ADC_IsActiveFlag_ADRDY(ADC) == 0) {
 8000794:	bf00      	nop
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <Activate_ADC+0xb0>)
 8000798:	f7ff ff80 	bl	800069c <LL_ADC_IsActiveFlag_ADRDY>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f9      	beq.n	8000796 <Activate_ADC+0x9a>
		/*       status afterwards.                                               */
		/*       This flag should be cleared at ADC Deactivation, before a new    */
		/*       ADC activation, using function "LL_ADC_ClearFlag_ADRDY()".       */
	}

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40012400 	.word	0x40012400
 80007b0:	2000000c 	.word	0x2000000c
 80007b4:	053e2d63 	.word	0x053e2d63
 80007b8:	cccccccd 	.word	0xcccccccd

080007bc <ConversionStartPoll_ADC_GrpRegular>:

/**
 * @brief  Perform ADC group regular conversion start, poll for conversion
 *         completion.*/

void ConversionStartPoll_ADC_GrpRegular(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	  uint32_t Timeout = 0U; /* Variable used for timeout management */
	  #endif /* USE_TIMEOUT */

	/* Start ADC group regular conversion */

	if ((LL_ADC_IsEnabled(ADC) == 1) && (LL_ADC_IsDisableOngoing(ADC) == 0)
 80007c0:	4811      	ldr	r0, [pc, #68]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007c2:	f7ff fef0 	bl	80005a6 <LL_ADC_IsEnabled>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d10f      	bne.n	80007ec <ConversionStartPoll_ADC_GrpRegular+0x30>
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007ce:	f7ff fefc 	bl	80005ca <LL_ADC_IsDisableOngoing>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d109      	bne.n	80007ec <ConversionStartPoll_ADC_GrpRegular+0x30>
			&& (LL_ADC_REG_IsConversionOngoing(ADC) == 0)) {
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007da:	f7ff ff41 	bl	8000660 <LL_ADC_REG_IsConversionOngoing>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d103      	bne.n	80007ec <ConversionStartPoll_ADC_GrpRegular+0x30>
		LL_ADC_REG_StartConversion(ADC);
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007e6:	f7ff ff28 	bl	800063a <LL_ADC_REG_StartConversion>
 80007ea:	e001      	b.n	80007f0 <ConversionStartPoll_ADC_GrpRegular+0x34>
	} else {
		/* Error: ADC conversion start could not be performed */
		Error_Handler();
 80007ec:	f001 f944 	bl	8001a78 <Error_Handler>

#if (USE_TIMEOUT == 1)
	  Timeout = ADC_UNITARY_CONVERSION_TIMEOUT_MS;
	  #endif /* USE_TIMEOUT */

	while (LL_ADC_IsActiveFlag_EOC(ADC) == 0) {
 80007f0:	bf00      	nop
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007f4:	f7ff ff64 	bl	80006c0 <LL_ADC_IsActiveFlag_EOC>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f9      	beq.n	80007f2 <ConversionStartPoll_ADC_GrpRegular+0x36>
	    }
	  #endif /* USE_TIMEOUT */
	}

	/* Clear flag ADC group regular end of unitary conversion */
	LL_ADC_ClearFlag_EOC(ADC);
 80007fe:	4802      	ldr	r0, [pc, #8]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 8000800:	f7ff ff70 	bl	80006e4 <LL_ADC_ClearFlag_EOC>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40012400 	.word	0x40012400

0800080c <ReadTemperature>:

uint16_t ReadTemperature() {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	Activate_ADC();
 8000810:	f7ff ff74 	bl	80006fc <Activate_ADC>
	/* Init variable containing ADC conversion data */
	uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <ReadTemperature+0x84>)
 8000816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800081a:	801a      	strh	r2, [r3, #0]

	/* Perform ADC group regular conversion start, poll for conversion        */
	/* completion.                                                            */
	ConversionStartPoll_ADC_GrpRegular();
 800081c:	f7ff ffce 	bl	80007bc <ConversionStartPoll_ADC_GrpRegular>

	/* Retrieve ADC conversion data */
	/* (data scale corresponds to ADC resolution: 12 bits) */
	uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADC);
 8000820:	481c      	ldr	r0, [pc, #112]	; (8000894 <ReadTemperature+0x88>)
 8000822:	f7ff ff2f 	bl	8000684 <LL_ADC_REG_ReadConversionData12>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <ReadTemperature+0x84>)
 800082c:	801a      	strh	r2, [r3, #0]

	/* Turn LED on after ADC conversion completion */

	/* Computation of ADC conversions raw data to physical values             */
	/* using LL ADC driver helper macro.                                      */
	hADCxConvertedData_Temperature_DegreeCelsius = __LL_ADC_CALC_TEMPERATURE(
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <ReadTemperature+0x8c>)
 8000830:	881a      	ldrh	r2, [r3, #0]
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <ReadTemperature+0x90>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d020      	beq.n	800087c <ReadTemperature+0x70>
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <ReadTemperature+0x84>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b29b      	uxth	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000846:	fb02 f303 	mul.w	r3, r2, r3
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <ReadTemperature+0x94>)
 800084e:	fba2 2303 	umull	r2, r3, r2, r3
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	461a      	mov	r2, r3
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <ReadTemperature+0x90>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2264      	movs	r2, #100	; 0x64
 800085e:	fb03 f202 	mul.w	r2, r3, r2
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <ReadTemperature+0x8c>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	4619      	mov	r1, r3
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <ReadTemperature+0x90>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	1acb      	subs	r3, r1, r3
 800086e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000872:	b29b      	uxth	r3, r3
 8000874:	331e      	adds	r3, #30
 8000876:	b29b      	uxth	r3, r3
 8000878:	b21b      	sxth	r3, r3
 800087a:	e001      	b.n	8000880 <ReadTemperature+0x74>
 800087c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000880:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <ReadTemperature+0x98>)
 8000882:	8013      	strh	r3, [r2, #0]
			VDDA_APPLI, uhADCxConvertedData, LL_ADC_RESOLUTION_12B);

	return hADCxConvertedData_Temperature_DegreeCelsius;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <ReadTemperature+0x98>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	b21b      	sxth	r3, r3
 800088a:	b29b      	uxth	r3, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000000 	.word	0x20000000
 8000894:	40012400 	.word	0x40012400
 8000898:	1fff75c8 	.word	0x1fff75c8
 800089c:	1fff75a8 	.word	0x1fff75a8
 80008a0:	09ee009f 	.word	0x09ee009f
 80008a4:	20000084 	.word	0x20000084

080008a8 <myDebug>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void myDebug(const char *fmt, ...) {
 80008a8:	b40f      	push	{r0, r1, r2, r3}
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	2164      	movs	r1, #100	; 0x64
 80008bc:	480a      	ldr	r0, [pc, #40]	; (80008e8 <myDebug+0x40>)
 80008be:	f00c fa53 	bl	800cd68 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 80008c2:	4809      	ldr	r0, [pc, #36]	; (80008e8 <myDebug+0x40>)
 80008c4:	f000 f814 	bl	80008f0 <bufferSize>
 80008c8:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	4905      	ldr	r1, [pc, #20]	; (80008e8 <myDebug+0x40>)
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <myDebug+0x44>)
 80008d6:	f007 f81a 	bl	800790e <HAL_UART_Transmit>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008e4:	b004      	add	sp, #16
 80008e6:	4770      	bx	lr
 80008e8:	20000088 	.word	0x20000088
 80008ec:	20000278 	.word	0x20000278

080008f0 <bufferSize>:

int bufferSize(char *buffer) {
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80008fc:	e002      	b.n	8000904 <bufferSize+0x14>
		i++;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f6      	bne.n	80008fe <bufferSize+0xe>
	return i;
 8000910:	68fb      	ldr	r3, [r7, #12]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <delay_us>:

void delay_us(uint16_t ms) {
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
	uint8_t delay_counter_disp = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <delay_us+0x38>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < ms) {
 8000932:	e002      	b.n	800093a <delay_us+0x1e>
		delay_counter_disp++;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	3301      	adds	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
	while (__HAL_TIM_GET_COUNTER(&htim1) < ms) {
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <delay_us+0x38>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	429a      	cmp	r2, r3
 8000944:	d3f6      	bcc.n	8000934 <delay_us+0x18>
		// wait for the counter to reach the us input in the parameter
	}
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000534 	.word	0x20000534

08000958 <Read_ID>:
 */

#include "main.h"
#include "flash_memory.h"

void Read_ID(SPI_HandleTypeDef *SPI, DEVICE_ID *FM_ID) {
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b08e      	sub	sp, #56	; 0x38
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	uint8_t cmd = READ_ID;
 8000962:	239e      	movs	r3, #158	; 0x9e
 8000964:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	DEVICE_ID buff;
	uint8_t data[20];
	int i;
	FM_Enable(SPI);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 f915 	bl	8000b98 <FM_Enable>
	delay_us(1);
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff ffd4 	bl	800091c <delay_us>
	HAL_SPI_Transmit(SPI, &cmd, 1, 300);
 8000974:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8000978:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800097c:	2201      	movs	r2, #1
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f004 ffc2 	bl	8005908 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, 20, 1000);
 8000984:	f107 0108 	add.w	r1, r7, #8
 8000988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098c:	2214      	movs	r2, #20
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f005 f94a 	bl	8005c28 <HAL_SPI_Receive>
	delay_us(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff ffc1 	bl	800091c <delay_us>
	FM_Disable(SPI);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 f90d 	bl	8000bba <FM_Disable>
	delay_us(500);
 80009a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a4:	f7ff ffba 	bl	800091c <delay_us>
	buff.MAN_ID = data[0];
 80009a8:	7a3b      	ldrb	r3, [r7, #8]
 80009aa:	773b      	strb	r3, [r7, #28]
	buff.M_TYPE = data[1];
 80009ac:	7a7b      	ldrb	r3, [r7, #9]
 80009ae:	777b      	strb	r3, [r7, #29]
	buff.M_CAP = data[2];
 80009b0:	7abb      	ldrb	r3, [r7, #10]
 80009b2:	77bb      	strb	r3, [r7, #30]
	buff.REM_BYTES = data[3];
 80009b4:	7afb      	ldrb	r3, [r7, #11]
 80009b6:	77fb      	strb	r3, [r7, #31]
	buff.EXT_ID = data[4];
 80009b8:	7b3b      	ldrb	r3, [r7, #12]
 80009ba:	f887 3020 	strb.w	r3, [r7, #32]
	buff.DEV_INFO = data[5];
 80009be:	7b7b      	ldrb	r3, [r7, #13]
 80009c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	for (i = 6; i < 20; i++) {
 80009c4:	2306      	movs	r3, #6
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
 80009c8:	e00d      	b.n	80009e6 <Read_ID+0x8e>
		buff.UID[i] = data[i];
 80009ca:	f107 0208 	add.w	r2, r7, #8
 80009ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d0:	4413      	add	r3, r2
 80009d2:	7819      	ldrb	r1, [r3, #0]
 80009d4:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80009d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009da:	4413      	add	r3, r2
 80009dc:	460a      	mov	r2, r1
 80009de:	701a      	strb	r2, [r3, #0]
	for (i = 6; i < 20; i++) {
 80009e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e2:	3301      	adds	r3, #1
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
 80009e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e8:	2b13      	cmp	r3, #19
 80009ea:	ddee      	ble.n	80009ca <Read_ID+0x72>
	}
	*FM_ID = buff;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	461d      	mov	r5, r3
 80009f0:	f107 041c 	add.w	r4, r7, #28
 80009f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f6:	6028      	str	r0, [r5, #0]
 80009f8:	6069      	str	r1, [r5, #4]
 80009fa:	60aa      	str	r2, [r5, #8]
 80009fc:	60eb      	str	r3, [r5, #12]
 80009fe:	6820      	ldr	r0, [r4, #0]
 8000a00:	6128      	str	r0, [r5, #16]
	return;
 8000a02:	bf00      	nop
}
 8000a04:	3738      	adds	r7, #56	; 0x38
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bdb0      	pop	{r4, r5, r7, pc}

08000a0a <Page_Write>:
 * 			*data		data to be written into the address
 * 			size		size of the data
 *@retval	none
 */
void Page_Write(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	807b      	strh	r3, [r7, #2]
	uint8_t cmd = PAGE_PROGRAM;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	75fb      	strb	r3, [r7, #23]
	uint8_t command[3];
	while (size > PAGE_SIZE) {
 8000a1c:	e03a      	b.n	8000a94 <Page_Write+0x8a>
		command[0] = (uint8_t) (address >> 16 & 0xff);
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	0c1b      	lsrs	r3, r3, #16
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	753b      	strb	r3, [r7, #20]
		command[1] = (uint8_t) (address >> 8 & 0xff);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	757b      	strb	r3, [r7, #21]
		command[2] = (uint8_t) (address & 0xff);
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	75bb      	strb	r3, [r7, #22]
		Write_Enable(SPI);
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f000 f863 	bl	8000b00 <Write_Enable>
		FM_Enable(SPI);
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f000 f8ac 	bl	8000b98 <FM_Enable>
		delay_us(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff ff6b 	bl	800091c <delay_us>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 8000a46:	f107 0117 	add.w	r1, r7, #23
 8000a4a:	2364      	movs	r3, #100	; 0x64
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f004 ff5a 	bl	8005908 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, command, 3, 200);
 8000a54:	f107 0114 	add.w	r1, r7, #20
 8000a58:	23c8      	movs	r3, #200	; 0xc8
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f004 ff53 	bl	8005908 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, data, PAGE_SIZE, 200);
 8000a62:	23c8      	movs	r3, #200	; 0xc8
 8000a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f004 ff4c 	bl	8005908 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f000 f8a2 	bl	8000bba <FM_Disable>
		delay_us(5);
 8000a76:	2005      	movs	r0, #5
 8000a78:	f7ff ff50 	bl	800091c <delay_us>
		size = size - PAGE_SIZE;
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a82:	807b      	strh	r3, [r7, #2]
		data = data + 256;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a8a:	607b      	str	r3, [r7, #4]
		address = address + 256;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a92:	60bb      	str	r3, [r7, #8]
	while (size > PAGE_SIZE) {
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a9a:	d8c0      	bhi.n	8000a1e <Page_Write+0x14>
	}
	command[0] = (uint8_t) (address >> 16 & 0xff);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	0c1b      	lsrs	r3, r3, #16
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	753b      	strb	r3, [r7, #20]
	command[1] = (uint8_t) (address >> 8 & 0xff);
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	757b      	strb	r3, [r7, #21]
	command[2] = (uint8_t) (address & 0xff);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	75bb      	strb	r3, [r7, #22]
	Write_Enable(SPI);
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f000 f824 	bl	8000b00 <Write_Enable>
	FM_Enable(SPI);
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 f86d 	bl	8000b98 <FM_Enable>
	delay_us(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff ff2c 	bl	800091c <delay_us>
	HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 8000ac4:	f107 0117 	add.w	r1, r7, #23
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	2201      	movs	r2, #1
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f004 ff1b 	bl	8005908 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI, command, 3, 200);
 8000ad2:	f107 0114 	add.w	r1, r7, #20
 8000ad6:	23c8      	movs	r3, #200	; 0xc8
 8000ad8:	2203      	movs	r2, #3
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f004 ff14 	bl	8005908 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI, data, size, 200);
 8000ae0:	887a      	ldrh	r2, [r7, #2]
 8000ae2:	23c8      	movs	r3, #200	; 0xc8
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f004 ff0e 	bl	8005908 <HAL_SPI_Transmit>
	FM_Disable(SPI);
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f000 f864 	bl	8000bba <FM_Disable>
	delay_us(5);
 8000af2:	2005      	movs	r0, #5
 8000af4:	f7ff ff12 	bl	800091c <delay_us>
	return;
 8000af8:	bf00      	nop
}
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <Write_Enable>:
	default:
		return 0;
	}
}

void Write_Enable(SPI_HandleTypeDef *SPI) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	uint8_t cmd = WRITE_ENABLE;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	73fb      	strb	r3, [r7, #15]
	FM_Enable(SPI);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 f843 	bl	8000b98 <FM_Enable>
	delay_us(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff ff02 	bl	800091c <delay_us>
	HAL_SPI_Transmit(SPI, &cmd, 1, 500);
 8000b18:	f107 010f 	add.w	r1, r7, #15
 8000b1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b20:	2201      	movs	r2, #1
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f004 fef0 	bl	8005908 <HAL_SPI_Transmit>
	FM_Disable(SPI);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 f846 	bl	8000bba <FM_Disable>
	delay_us(10);
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f7ff fef4 	bl	800091c <delay_us>
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Bulk_Read>:
 * @param	address		address from which the data is to be read
 * 			*data		pointer to store the data which is read from the corresponding address
 * 			size		size of the data to be read
 */
void Bulk_Read(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	807b      	strh	r3, [r7, #2]
	uint8_t cmd[4];
	cmd[0] = READ;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	753b      	strb	r3, [r7, #20]
	cmd[1] = (uint8_t) (address >> 16 & 0xff);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	0c1b      	lsrs	r3, r3, #16
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	757b      	strb	r3, [r7, #21]
	cmd[2] = (uint8_t) (address >> 8 & 0xff);
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t) (address & 0xff);
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	75fb      	strb	r3, [r7, #23]
	FM_Enable(SPI);
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 f817 	bl	8000b98 <FM_Enable>
	HAL_SPI_Transmit(SPI, cmd, 4, 100);
 8000b6a:	f107 0114 	add.w	r1, r7, #20
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	2204      	movs	r2, #4
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f004 fec8 	bl	8005908 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, size, 200);
 8000b78:	887a      	ldrh	r2, [r7, #2]
 8000b7a:	23c8      	movs	r3, #200	; 0xc8
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f005 f852 	bl	8005c28 <HAL_SPI_Receive>
	FM_Disable(SPI);
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 f818 	bl	8000bba <FM_Disable>
	delay_us(5);
 8000b8a:	2005      	movs	r0, #5
 8000b8c:	f7ff fec6 	bl	800091c <delay_us>
	return;
 8000b90:	bf00      	nop
}
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <FM_Enable>:

void FM_Enable(SPI_HandleTypeDef *SPI) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f002 ff6e 	bl	8003a88 <HAL_GPIO_WritePin>
	delay_us(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f7ff feb5 	bl	800091c <delay_us>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <FM_Disable>:

void FM_Disable(SPI_HandleTypeDef *SPI) {
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f002 ff5d 	bl	8003a88 <HAL_GPIO_WritePin>
	delay_us(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fea4 	bl	800091c <delay_us>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c00:	68fb      	ldr	r3, [r7, #12]
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c30:	68fb      	ldr	r3, [r7, #12]
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <setDataToBeTransmitted>:
void MSN_Error();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setDataToBeTransmitted() {
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b090      	sub	sp, #64	; 0x40
 8000c40:	af02      	add	r7, sp, #8
	uint8_t temp_count = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t temp_sensor[30];

	setTime(MAIN_CMD[8], MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 8000c48:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c4a:	7a18      	ldrb	r0, [r3, #8]
 8000c4c:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c4e:	7a59      	ldrb	r1, [r3, #9]
 8000c50:	4b52      	ldr	r3, [pc, #328]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c52:	7a9c      	ldrb	r4, [r3, #10]
 8000c54:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c56:	7add      	ldrb	r5, [r3, #11]
 8000c58:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c5a:	7b1b      	ldrb	r3, [r3, #12]
 8000c5c:	4a4f      	ldr	r2, [pc, #316]	; (8000d9c <setDataToBeTransmitted+0x160>)
 8000c5e:	7b52      	ldrb	r2, [r2, #13]
 8000c60:	9201      	str	r2, [sp, #4]
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	462b      	mov	r3, r5
 8000c66:	4622      	mov	r2, r4
 8000c68:	f001 f84c 	bl	8001d04 <setTime>
			MAIN_CMD[13]);

	while (temp_count < 30) {
 8000c6c:	e017      	b.n	8000c9e <setDataToBeTransmitted+0x62>
		if (ReadTemperature() > 0)
 8000c6e:	f7ff fdcd 	bl	800080c <ReadTemperature>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00a      	beq.n	8000c8e <setDataToBeTransmitted+0x52>
			temp_sensor[temp_count] = ReadTemperature();
 8000c78:	f7ff fdc8 	bl	800080c <ReadTemperature>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	3338      	adds	r3, #56	; 0x38
 8000c88:	443b      	add	r3, r7
 8000c8a:	f803 2c38 	strb.w	r2, [r3, #-56]
		delay_us(10);
 8000c8e:	200a      	movs	r0, #10
 8000c90:	f7ff fe44 	bl	800091c <delay_us>
		temp_count++;
 8000c94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (temp_count < 30) {
 8000c9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca2:	2b1d      	cmp	r3, #29
 8000ca4:	d9e3      	bls.n	8000c6e <setDataToBeTransmitted+0x32>
	}

	getTime();
 8000ca6:	f001 f873 	bl	8001d90 <getTime>

	txBuffer[0] = 0xBA;
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cac:	22ba      	movs	r2, #186	; 0xba
 8000cae:	701a      	strb	r2, [r3, #0]
	txBuffer[1] = 0x01;
 8000cb0:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	705a      	strb	r2, [r3, #1]
	txBuffer[2] = pkt_id;
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <setDataToBeTransmitted+0x168>)
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cbc:	709a      	strb	r2, [r3, #2]
	txBuffer[3] = gDate.Year;
 8000cbe:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <setDataToBeTransmitted+0x16c>)
 8000cc0:	78da      	ldrb	r2, [r3, #3]
 8000cc2:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cc4:	70da      	strb	r2, [r3, #3]
	txBuffer[4] = gDate.Month;
 8000cc6:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <setDataToBeTransmitted+0x16c>)
 8000cc8:	785a      	ldrb	r2, [r3, #1]
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000ccc:	711a      	strb	r2, [r3, #4]
	txBuffer[5] = gDate.WeekDay;
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <setDataToBeTransmitted+0x16c>)
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cd4:	715a      	strb	r2, [r3, #5]
	txBuffer[6] = gTime.Hours;
 8000cd6:	4b35      	ldr	r3, [pc, #212]	; (8000dac <setDataToBeTransmitted+0x170>)
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cdc:	719a      	strb	r2, [r3, #6]
	txBuffer[7] = gTime.Minutes;
 8000cde:	4b33      	ldr	r3, [pc, #204]	; (8000dac <setDataToBeTransmitted+0x170>)
 8000ce0:	785a      	ldrb	r2, [r3, #1]
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000ce4:	71da      	strb	r2, [r3, #7]
	txBuffer[8] = gTime.Seconds;
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <setDataToBeTransmitted+0x170>)
 8000ce8:	789a      	ldrb	r2, [r3, #2]
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cec:	721a      	strb	r2, [r3, #8]
	int j = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 9; i <= 28; i += 2) {
 8000cf2:	2309      	movs	r3, #9
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf6:	e012      	b.n	8000d1e <setDataToBeTransmitted+0xe2>
		txBuffer[i] = 0xDA;
 8000cf8:	4a29      	ldr	r2, [pc, #164]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	4413      	add	r3, r2
 8000cfe:	22da      	movs	r2, #218	; 0xda
 8000d00:	701a      	strb	r2, [r3, #0]
		txBuffer[i + 1] = temp_sensor[j];
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	3301      	adds	r3, #1
 8000d06:	4639      	mov	r1, r7
 8000d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d0a:	440a      	add	r2, r1
 8000d0c:	7811      	ldrb	r1, [r2, #0]
 8000d0e:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d10:	54d1      	strb	r1, [r2, r3]
		j++;
 8000d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d14:	3301      	adds	r3, #1
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 9; i <= 28; i += 2) {
 8000d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d20:	2b1c      	cmp	r3, #28
 8000d22:	dde9      	ble.n	8000cf8 <setDataToBeTransmitted+0xbc>
	}
	uint16_t _HK_SUM = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	857b      	strh	r3, [r7, #42]	; 0x2a
	for (int i = 0; i <= 28; i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2c:	e00a      	b.n	8000d44 <setDataToBeTransmitted+0x108>
		_HK_SUM += txBuffer[i];
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d3a:	4413      	add	r3, r2
 8000d3c:	857b      	strh	r3, [r7, #42]	; 0x2a
	for (int i = 0; i <= 28; i++) {
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	3301      	adds	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	2b1c      	cmp	r3, #28
 8000d48:	ddf1      	ble.n	8000d2e <setDataToBeTransmitted+0xf2>
	}
	txBuffer[29] = _HK_SUM >> 8;
 8000d4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d54:	775a      	strb	r2, [r3, #29]
	txBuffer[30] = _HK_SUM;
 8000d56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d5c:	779a      	strb	r2, [r3, #30]
	txBuffer[31] = 0xFE;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d60:	22fe      	movs	r2, #254	; 0xfe
 8000d62:	77da      	strb	r2, [r3, #31]
	myDebug("### Data to be transmitted:\n");
 8000d64:	4812      	ldr	r0, [pc, #72]	; (8000db0 <setDataToBeTransmitted+0x174>)
 8000d66:	f7ff fd9f 	bl	80008a8 <myDebug>
	for (int i = 0; i < PayLoadLength; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
 8000d6e:	e00a      	b.n	8000d86 <setDataToBeTransmitted+0x14a>
		myDebug("%x ", txBuffer[i]);
 8000d70:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <setDataToBeTransmitted+0x164>)
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	4413      	add	r3, r2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <setDataToBeTransmitted+0x178>)
 8000d7c:	f7ff fd94 	bl	80008a8 <myDebug>
	for (int i = 0; i < PayLoadLength; i++) {
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	3301      	adds	r3, #1
 8000d84:	623b      	str	r3, [r7, #32]
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	2b1f      	cmp	r3, #31
 8000d8a:	ddf1      	ble.n	8000d70 <setDataToBeTransmitted+0x134>
	}
	myDebug("\n");
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <setDataToBeTransmitted+0x17c>)
 8000d8e:	f7ff fd8b 	bl	80008a8 <myDebug>
}
 8000d92:	bf00      	nop
 8000d94:	3738      	adds	r7, #56	; 0x38
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200005f4 	.word	0x200005f4
 8000da0:	2000059c 	.word	0x2000059c
 8000da4:	20000581 	.word	0x20000581
 8000da8:	20000638 	.word	0x20000638
 8000dac:	20000624 	.word	0x20000624
 8000db0:	0800d6a0 	.word	0x0800d6a0
 8000db4:	0800d6c0 	.word	0x0800d6c0
 8000db8:	0800d6c4 	.word	0x0800d6c4

08000dbc <EOM>:

void EOM() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	//add ACK and Latest mission FM address
	END_MSN[0] = 0xBA;
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <EOM+0xc8>)
 8000dc4:	22ba      	movs	r2, #186	; 0xba
 8000dc6:	701a      	strb	r2, [r3, #0]
	END_MSN[1] = MSN_CMP >> 24;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <EOM+0xcc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0e1b      	lsrs	r3, r3, #24
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <EOM+0xc8>)
 8000dd2:	705a      	strb	r2, [r3, #1]
	END_MSN[2] = MSN_CMP >> 16;
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <EOM+0xcc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	0c1b      	lsrs	r3, r3, #16
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <EOM+0xc8>)
 8000dde:	709a      	strb	r2, [r3, #2]

	END_MSN[3] = MSN_CMP >> 8;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <EOM+0xcc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <EOM+0xc8>)
 8000dea:	70da      	strb	r2, [r3, #3]

	END_MSN[4] = MSN_CMP;
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <EOM+0xcc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <EOM+0xc8>)
 8000df4:	711a      	strb	r2, [r3, #4]

	//SEND NEW FM ADDRESS;
	END_MSN[5] = MAIN_ADDR >> 24;
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <EOM+0xd0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	0e1b      	lsrs	r3, r3, #24
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <EOM+0xc8>)
 8000e00:	715a      	strb	r2, [r3, #5]
	END_MSN[6] = MAIN_ADDR >> 16;
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <EOM+0xd0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0c1b      	lsrs	r3, r3, #16
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <EOM+0xc8>)
 8000e0c:	719a      	strb	r2, [r3, #6]
	END_MSN[7] = MAIN_ADDR >> 8;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <EOM+0xd0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <EOM+0xc8>)
 8000e18:	71da      	strb	r2, [r3, #7]
	END_MSN[8] = MAIN_ADDR;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <EOM+0xd0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <EOM+0xc8>)
 8000e22:	721a      	strb	r2, [r3, #8]
	END_MSN[9] = 0xFE;
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <EOM+0xc8>)
 8000e26:	22fe      	movs	r2, #254	; 0xfe
 8000e28:	725a      	strb	r2, [r3, #9]

	// END of Mission
	HAL_UART_Transmit(&huart1, END_MSN, 10, 1000);
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	220a      	movs	r2, #10
 8000e30:	4914      	ldr	r1, [pc, #80]	; (8000e84 <EOM+0xc8>)
 8000e32:	4817      	ldr	r0, [pc, #92]	; (8000e90 <EOM+0xd4>)
 8000e34:	f006 fd6b 	bl	800790e <HAL_UART_Transmit>
	myDebug("### Sent End of mission data: ");
 8000e38:	4816      	ldr	r0, [pc, #88]	; (8000e94 <EOM+0xd8>)
 8000e3a:	f7ff fd35 	bl	80008a8 <myDebug>
	for (int i = 0; i < 10; i++) {
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e00a      	b.n	8000e5a <EOM+0x9e>
		myDebug("%x", END_MSN[i]);
 8000e44:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <EOM+0xc8>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <EOM+0xdc>)
 8000e50:	f7ff fd2a 	bl	80008a8 <myDebug>
	for (int i = 0; i < 10; i++) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3301      	adds	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b09      	cmp	r3, #9
 8000e5e:	ddf1      	ble.n	8000e44 <EOM+0x88>
	}
	myDebug("\n");
 8000e60:	480e      	ldr	r0, [pc, #56]	; (8000e9c <EOM+0xe0>)
 8000e62:	f7ff fd21 	bl	80008a8 <myDebug>
	myDebug("--> LoRa_Mission_Execution Complete and Packet count is %x\r\n",
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <EOM+0xe4>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <EOM+0xe8>)
 8000e6e:	f7ff fd1b 	bl	80008a8 <myDebug>
			pkt_id);
	memset(END_MSN, '\0', 10);
 8000e72:	220a      	movs	r2, #10
 8000e74:	2100      	movs	r1, #0
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <EOM+0xc8>)
 8000e78:	f00b ff84 	bl	800cd84 <memset>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200005dc 	.word	0x200005dc
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000608 	.word	0x20000608
 8000e90:	200001e4 	.word	0x200001e4
 8000e94:	0800d6c8 	.word	0x0800d6c8
 8000e98:	0800d6e8 	.word	0x0800d6e8
 8000e9c:	0800d6c4 	.word	0x0800d6c4
 8000ea0:	20000581 	.word	0x20000581
 8000ea4:	0800d6ec 	.word	0x0800d6ec

08000ea8 <MSN_Error>:

void MSN_Error() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	MSN_ERR[0] = 0xBA;
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <MSN_Error+0xc8>)
 8000eb0:	22ba      	movs	r2, #186	; 0xba
 8000eb2:	701a      	strb	r2, [r3, #0]
	MSN_ERR[1] = NACK >> 24;
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <MSN_Error+0xcc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	0e1b      	lsrs	r3, r3, #24
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <MSN_Error+0xc8>)
 8000ebe:	705a      	strb	r2, [r3, #1]
	MSN_ERR[2] = NACK >> 16;
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <MSN_Error+0xcc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	0c1b      	lsrs	r3, r3, #16
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <MSN_Error+0xc8>)
 8000eca:	709a      	strb	r2, [r3, #2]

	MSN_ERR[3] = NACK >> 8;
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <MSN_Error+0xcc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <MSN_Error+0xc8>)
 8000ed6:	70da      	strb	r2, [r3, #3]

	MSN_ERR[4] = NACK;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MSN_Error+0xcc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <MSN_Error+0xc8>)
 8000ee0:	711a      	strb	r2, [r3, #4]

//SEND NEW FM ADDRESS;
	MSN_ERR[5] = MAIN_ADDR >> 24;
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <MSN_Error+0xd0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0e1b      	lsrs	r3, r3, #24
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MSN_Error+0xc8>)
 8000eec:	715a      	strb	r2, [r3, #5]
	MSN_ERR[6] = MAIN_ADDR >> 16;
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <MSN_Error+0xd0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	0c1b      	lsrs	r3, r3, #16
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MSN_Error+0xc8>)
 8000ef8:	719a      	strb	r2, [r3, #6]
	MSN_ERR[7] = MAIN_ADDR >> 8;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MSN_Error+0xd0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MSN_Error+0xc8>)
 8000f04:	71da      	strb	r2, [r3, #7]
	MSN_ERR[8] = MAIN_ADDR;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MSN_Error+0xd0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MSN_Error+0xc8>)
 8000f0e:	721a      	strb	r2, [r3, #8]
	MSN_ERR[9] = 0xFE;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MSN_Error+0xc8>)
 8000f12:	22fe      	movs	r2, #254	; 0xfe
 8000f14:	725a      	strb	r2, [r3, #9]

// Error of Mission
	myDebug("###  Mission error occurred! ");
 8000f16:	4819      	ldr	r0, [pc, #100]	; (8000f7c <MSN_Error+0xd4>)
 8000f18:	f7ff fcc6 	bl	80008a8 <myDebug>
	HAL_UART_Transmit(&huart1, MSN_ERR, 10, 1000);
 8000f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f20:	220a      	movs	r2, #10
 8000f22:	4913      	ldr	r1, [pc, #76]	; (8000f70 <MSN_Error+0xc8>)
 8000f24:	4816      	ldr	r0, [pc, #88]	; (8000f80 <MSN_Error+0xd8>)
 8000f26:	f006 fcf2 	bl	800790e <HAL_UART_Transmit>
	myDebug("### Sent Mission error data: ");
 8000f2a:	4816      	ldr	r0, [pc, #88]	; (8000f84 <MSN_Error+0xdc>)
 8000f2c:	f7ff fcbc 	bl	80008a8 <myDebug>
	for (int i = 0; i < 10; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e00a      	b.n	8000f4c <MSN_Error+0xa4>
		myDebug("%x", MSN_ERR[i]);
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <MSN_Error+0xc8>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MSN_Error+0xe0>)
 8000f42:	f7ff fcb1 	bl	80008a8 <myDebug>
	for (int i = 0; i < 10; i++) {
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b09      	cmp	r3, #9
 8000f50:	ddf1      	ble.n	8000f36 <MSN_Error+0x8e>
	}
	myDebug("\n");
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <MSN_Error+0xe4>)
 8000f54:	f7ff fca8 	bl	80008a8 <myDebug>
	myDebug("#### MAIN and LoRa MCU ACK FAILED___ Please RESET #### \n ");
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <MSN_Error+0xe8>)
 8000f5a:	f7ff fca5 	bl	80008a8 <myDebug>
	memset(MSN_ERR, '\0', 10);
 8000f5e:	220a      	movs	r2, #10
 8000f60:	2100      	movs	r1, #0
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <MSN_Error+0xc8>)
 8000f64:	f00b ff0e 	bl	800cd84 <memset>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200005e8 	.word	0x200005e8
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000608 	.word	0x20000608
 8000f7c:	0800d72c 	.word	0x0800d72c
 8000f80:	200001e4 	.word	0x200001e4
 8000f84:	0800d74c 	.word	0x0800d74c
 8000f88:	0800d6e8 	.word	0x0800d6e8
 8000f8c:	0800d6c4 	.word	0x0800d6c4
 8000f90:	0800d76c 	.word	0x0800d76c

08000f94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a56      	ldr	r2, [pc, #344]	; (80010f8 <HAL_UART_RxCpltCallback+0x164>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	f040 80a5 	bne.w	80010f0 <HAL_UART_RxCpltCallback+0x15c>

		uint16_t _HK_SUM_Check = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	83fb      	strh	r3, [r7, #30]
		for (int i = 0; i <= 28; i++) {
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	e00a      	b.n	8000fc6 <HAL_UART_RxCpltCallback+0x32>
			_HK_SUM_Check += rxData[i];
 8000fb0:	4a52      	ldr	r2, [pc, #328]	; (80010fc <HAL_UART_RxCpltCallback+0x168>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	8bfb      	ldrh	r3, [r7, #30]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	83fb      	strh	r3, [r7, #30]
		for (int i = 0; i <= 28; i++) {
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	2b1c      	cmp	r3, #28
 8000fca:	ddf1      	ble.n	8000fb0 <HAL_UART_RxCpltCallback+0x1c>
		}

		uint8_t crc[2];
		crc[0] = _HK_SUM_Check >> 8;
 8000fcc:	8bfb      	ldrh	r3, [r7, #30]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
		crc[1] = _HK_SUM_Check;
 8000fd6:	8bfb      	ldrh	r3, [r7, #30]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]

		if (crc[0] == txBuffer[29] && crc[1] == txBuffer[30]) {
 8000fdc:	7b3a      	ldrb	r2, [r7, #12]
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <HAL_UART_RxCpltCallback+0x16c>)
 8000fe0:	7f5b      	ldrb	r3, [r3, #29]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d16b      	bne.n	80010be <HAL_UART_RxCpltCallback+0x12a>
 8000fe6:	7b7a      	ldrb	r2, [r7, #13]
 8000fe8:	4b45      	ldr	r3, [pc, #276]	; (8001100 <HAL_UART_RxCpltCallback+0x16c>)
 8000fea:	7f9b      	ldrb	r3, [r3, #30]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d166      	bne.n	80010be <HAL_UART_RxCpltCallback+0x12a>
			Read_ID(&hspi2, &FM_ID);
 8000ff0:	4944      	ldr	r1, [pc, #272]	; (8001104 <HAL_UART_RxCpltCallback+0x170>)
 8000ff2:	4845      	ldr	r0, [pc, #276]	; (8001108 <HAL_UART_RxCpltCallback+0x174>)
 8000ff4:	f7ff fcb0 	bl	8000958 <Read_ID>
			delay_us(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff fc8f 	bl	800091c <delay_us>

			present_address = MAIN_ADDR;
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <HAL_UART_RxCpltCallback+0x178>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a43      	ldr	r2, [pc, #268]	; (8001110 <HAL_UART_RxCpltCallback+0x17c>)
 8001004:	6013      	str	r3, [r2, #0]

			myDebug("### Storing HK Data in : 0x%x \n", present_address);
 8001006:	4b42      	ldr	r3, [pc, #264]	; (8001110 <HAL_UART_RxCpltCallback+0x17c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	4841      	ldr	r0, [pc, #260]	; (8001114 <HAL_UART_RxCpltCallback+0x180>)
 800100e:	f7ff fc4b 	bl	80008a8 <myDebug>
			Page_Write(&hspi2, present_address, txBuffer, PayLoadLength);
 8001012:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <HAL_UART_RxCpltCallback+0x17c>)
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	2320      	movs	r3, #32
 8001018:	4a39      	ldr	r2, [pc, #228]	; (8001100 <HAL_UART_RxCpltCallback+0x16c>)
 800101a:	483b      	ldr	r0, [pc, #236]	; (8001108 <HAL_UART_RxCpltCallback+0x174>)
 800101c:	f7ff fcf5 	bl	8000a0a <Page_Write>
			delay_us(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fc7b 	bl	800091c <delay_us>
			myDebug("### Checking if data is stored or not, in : 0x%x \n",
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <HAL_UART_RxCpltCallback+0x17c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	483a      	ldr	r0, [pc, #232]	; (8001118 <HAL_UART_RxCpltCallback+0x184>)
 800102e:	f7ff fc3b 	bl	80008a8 <myDebug>
					present_address);
			myDebug("--> Stored Data : \n");
 8001032:	483a      	ldr	r0, [pc, #232]	; (800111c <HAL_UART_RxCpltCallback+0x188>)
 8001034:	f7ff fc38 	bl	80008a8 <myDebug>
			Bulk_Read(&hspi2, present_address, rxData, PayLoadLength);
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <HAL_UART_RxCpltCallback+0x17c>)
 800103a:	6819      	ldr	r1, [r3, #0]
 800103c:	2320      	movs	r3, #32
 800103e:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <HAL_UART_RxCpltCallback+0x168>)
 8001040:	4831      	ldr	r0, [pc, #196]	; (8001108 <HAL_UART_RxCpltCallback+0x174>)
 8001042:	f7ff fd7b 	bl	8000b3c <Bulk_Read>
			delay_us(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff fc68 	bl	800091c <delay_us>
			for (int i = 0; i < PayLoadLength; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e00a      	b.n	8001068 <HAL_UART_RxCpltCallback+0xd4>
				myDebug("%x ", rxData[i]);
 8001052:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <HAL_UART_RxCpltCallback+0x168>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	4830      	ldr	r0, [pc, #192]	; (8001120 <HAL_UART_RxCpltCallback+0x18c>)
 800105e:	f7ff fc23 	bl	80008a8 <myDebug>
			for (int i = 0; i < PayLoadLength; i++) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b1f      	cmp	r3, #31
 800106c:	ddf1      	ble.n	8001052 <HAL_UART_RxCpltCallback+0xbe>
			}
			myDebug("\n");
 800106e:	482d      	ldr	r0, [pc, #180]	; (8001124 <HAL_UART_RxCpltCallback+0x190>)
 8001070:	f7ff fc1a 	bl	80008a8 <myDebug>
			MAIN_ADDR += 32;
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_UART_RxCpltCallback+0x178>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3320      	adds	r3, #32
 800107a:	4a24      	ldr	r2, [pc, #144]	; (800110c <HAL_UART_RxCpltCallback+0x178>)
 800107c:	6013      	str	r3, [r2, #0]
			pkt_id++;
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_UART_RxCpltCallback+0x194>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <HAL_UART_RxCpltCallback+0x194>)
 8001088:	701a      	strb	r2, [r3, #0]
			EOM();
 800108a:	f7ff fe97 	bl	8000dbc <EOM>
			memset(txBuffer, '\0', PayLoadLength);
 800108e:	2220      	movs	r2, #32
 8001090:	2100      	movs	r1, #0
 8001092:	481b      	ldr	r0, [pc, #108]	; (8001100 <HAL_UART_RxCpltCallback+0x16c>)
 8001094:	f00b fe76 	bl	800cd84 <memset>
			memset(rxData, '\0', PayLoadLength);
 8001098:	2220      	movs	r2, #32
 800109a:	2100      	movs	r1, #0
 800109c:	4817      	ldr	r0, [pc, #92]	; (80010fc <HAL_UART_RxCpltCallback+0x168>)
 800109e:	f00b fe71 	bl	800cd84 <memset>
			memset(MAIN_CMD, '\0', 15);
 80010a2:	220f      	movs	r2, #15
 80010a4:	2100      	movs	r1, #0
 80010a6:	4821      	ldr	r0, [pc, #132]	; (800112c <HAL_UART_RxCpltCallback+0x198>)
 80010a8:	f00b fe6c 	bl	800cd84 <memset>
			delay_us(999);
 80010ac:	f240 30e7 	movw	r0, #999	; 0x3e7
 80010b0:	f7ff fc34 	bl	800091c <delay_us>
			delay_us(999);
 80010b4:	f240 30e7 	movw	r0, #999	; 0x3e7
 80010b8:	f7ff fc30 	bl	800091c <delay_us>
			}
			myDebug("\n");
			Error_Handler();
		}
	}
}
 80010bc:	e018      	b.n	80010f0 <HAL_UART_RxCpltCallback+0x15c>
			myDebug("### Data error occurred:\n");
 80010be:	481c      	ldr	r0, [pc, #112]	; (8001130 <HAL_UART_RxCpltCallback+0x19c>)
 80010c0:	f7ff fbf2 	bl	80008a8 <myDebug>
			for (int i = 0; i < PayLoadLength; i++) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	e00a      	b.n	80010e0 <HAL_UART_RxCpltCallback+0x14c>
				myDebug("%x ", rxData[i]);
 80010ca:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <HAL_UART_RxCpltCallback+0x168>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4812      	ldr	r0, [pc, #72]	; (8001120 <HAL_UART_RxCpltCallback+0x18c>)
 80010d6:	f7ff fbe7 	bl	80008a8 <myDebug>
			for (int i = 0; i < PayLoadLength; i++) {
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	3301      	adds	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	2b1f      	cmp	r3, #31
 80010e4:	ddf1      	ble.n	80010ca <HAL_UART_RxCpltCallback+0x136>
			myDebug("\n");
 80010e6:	480f      	ldr	r0, [pc, #60]	; (8001124 <HAL_UART_RxCpltCallback+0x190>)
 80010e8:	f7ff fbde 	bl	80008a8 <myDebug>
			Error_Handler();
 80010ec:	f000 fcc4 	bl	8001a78 <Error_Handler>
}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000150 	.word	0x20000150
 80010fc:	200005bc 	.word	0x200005bc
 8001100:	2000059c 	.word	0x2000059c
 8001104:	20000584 	.word	0x20000584
 8001108:	200004c4 	.word	0x200004c4
 800110c:	20000608 	.word	0x20000608
 8001110:	20000598 	.word	0x20000598
 8001114:	0800d7a8 	.word	0x0800d7a8
 8001118:	0800d7c8 	.word	0x0800d7c8
 800111c:	0800d7fc 	.word	0x0800d7fc
 8001120:	0800d6c0 	.word	0x0800d6c0
 8001124:	0800d6c4 	.word	0x0800d6c4
 8001128:	20000581 	.word	0x20000581
 800112c:	200005f4 	.word	0x200005f4
 8001130:	0800d810 	.word	0x0800d810

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b092      	sub	sp, #72	; 0x48
 8001138:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f001 fa7d 	bl	8002638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f927 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f000 fc0b 	bl	800195c <MX_GPIO_Init>
  MX_DMA_Init();
 8001146:	f000 fbdf 	bl	8001908 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800114a:	f000 fa89 	bl	8001660 <MX_USART2_UART_Init>
  MX_SubGHz_Phy_Init();
 800114e:	f00b fa6e 	bl	800c62e <MX_SubGHz_Phy_Init>
  MX_USART1_UART_Init();
 8001152:	f000 fa39 	bl	80015c8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001156:	f000 fb83 	bl	8001860 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 800115a:	f000 f9e9 	bl	8001530 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800115e:	f000 facb 	bl	80016f8 <MX_RTC_Init>
  MX_ADC_Init();
 8001162:	f000 f97d 	bl	8001460 <MX_ADC_Init>
  MX_SPI2_Init();
 8001166:	f000 fb2b 	bl	80017c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim1);
 800116a:	486e      	ldr	r0, [pc, #440]	; (8001324 <main+0x1f0>)
 800116c:	f006 f8f8 	bl	8007360 <HAL_TIM_Base_Start>

	myDebug("\n########## Wait for Handshake ##########\r\n");
 8001170:	486d      	ldr	r0, [pc, #436]	; (8001328 <main+0x1f4>)
 8001172:	f7ff fb99 	bl	80008a8 <myDebug>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8001176:	e001      	b.n	800117c <main+0x48>
		WAIT_FOR_HANDSHAKE();
 8001178:	f000 fc86 	bl	8001a88 <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 800117c:	4b6b      	ldr	r3, [pc, #428]	; (800132c <main+0x1f8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f9      	beq.n	8001178 <main+0x44>
	}

	myDebug("__________LoRa Starting.......###\r\n\n");
 8001184:	486a      	ldr	r0, [pc, #424]	; (8001330 <main+0x1fc>)
 8001186:	f7ff fb8f 	bl	80008a8 <myDebug>
	pkt_id = 0;
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <main+0x200>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8001190:	f00b fa55 	bl	800c63e <MX_SubGHz_Phy_Process>

    /* USER CODE BEGIN 3 */

		if (OBC_HANDSHAKE_FLAG == 1) {
 8001194:	4b65      	ldr	r3, [pc, #404]	; (800132c <main+0x1f8>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d1f9      	bne.n	8001190 <main+0x5c>
			myDebug("### Waiting to receive CMD from OBC.....\n");
 800119c:	4866      	ldr	r0, [pc, #408]	; (8001338 <main+0x204>)
 800119e:	f7ff fb83 	bl	80008a8 <myDebug>
			Receive_MAIN_CMD();
 80011a2:	f000 fd1f 	bl	8001be4 <Receive_MAIN_CMD>
			delay_us(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff fbb8 	bl	800091c <delay_us>
			Execute_MAIN_CMD();
 80011ac:	f000 fd72 	bl	8001c94 <Execute_MAIN_CMD>
			delay_us(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff fbb3 	bl	800091c <delay_us>
			myDebug("--> MCU_ID: 0x%x\n", MCU_ID);
 80011b6:	4b61      	ldr	r3, [pc, #388]	; (800133c <main+0x208>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4860      	ldr	r0, [pc, #384]	; (8001340 <main+0x20c>)
 80011be:	f7ff fb73 	bl	80008a8 <myDebug>
			myDebug("--> Flash address: 0x%x\n", MAIN_ADDR);
 80011c2:	4b60      	ldr	r3, [pc, #384]	; (8001344 <main+0x210>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	485f      	ldr	r0, [pc, #380]	; (8001348 <main+0x214>)
 80011ca:	f7ff fb6d 	bl	80008a8 <myDebug>
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011ce:	4b5f      	ldr	r3, [pc, #380]	; (800134c <main+0x218>)
 80011d0:	7a1b      	ldrb	r3, [r3, #8]
 80011d2:	4618      	mov	r0, r3
					MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 80011d4:	4b5d      	ldr	r3, [pc, #372]	; (800134c <main+0x218>)
 80011d6:	7a5b      	ldrb	r3, [r3, #9]
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011d8:	461c      	mov	r4, r3
					MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 80011da:	4b5c      	ldr	r3, [pc, #368]	; (800134c <main+0x218>)
 80011dc:	7a9b      	ldrb	r3, [r3, #10]
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011de:	461d      	mov	r5, r3
					MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 80011e0:	4b5a      	ldr	r3, [pc, #360]	; (800134c <main+0x218>)
 80011e2:	7adb      	ldrb	r3, [r3, #11]
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011e4:	461a      	mov	r2, r3
					MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 80011e6:	4b59      	ldr	r3, [pc, #356]	; (800134c <main+0x218>)
 80011e8:	7b1b      	ldrb	r3, [r3, #12]
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011ea:	4619      	mov	r1, r3
					MAIN_CMD[13]);
 80011ec:	4b57      	ldr	r3, [pc, #348]	; (800134c <main+0x218>)
 80011ee:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	9101      	str	r1, [sp, #4]
 80011f4:	9200      	str	r2, [sp, #0]
 80011f6:	462b      	mov	r3, r5
 80011f8:	4622      	mov	r2, r4
 80011fa:	4601      	mov	r1, r0
 80011fc:	4854      	ldr	r0, [pc, #336]	; (8001350 <main+0x21c>)
 80011fe:	f7ff fb53 	bl	80008a8 <myDebug>

			setDataToBeTransmitted();
 8001202:	f7ff fd1b 	bl	8000c3c <setDataToBeTransmitted>

			PacketParams_t pkt_params;
			pkt_params.PacketType = PACKET_TYPE_LORA;
 8001206:	2301      	movs	r3, #1
 8001208:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			pkt_params.Params.LoRa.PayloadLength = PayLoadLength;
 800120c:	2320      	movs	r3, #32
 800120e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			pkt_params.Params.LoRa.PreambleLength = 8;
 8001212:	2308      	movs	r3, #8
 8001214:	867b      	strh	r3, [r7, #50]	; 0x32
			pkt_params.Params.LoRa.HeaderType = LORA_PACKET_IMPLICIT;
 8001216:	2301      	movs	r3, #1
 8001218:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			pkt_params.Params.LoRa.CrcMode = LORA_CRC_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			pkt_params.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001222:	2300      	movs	r3, #0
 8001224:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			ModulationParams_t mod_params;
			mod_params.PacketType = PACKET_TYPE_LORA;
 8001228:	2301      	movs	r3, #1
 800122a:	723b      	strb	r3, [r7, #8]
			mod_params.Params.LoRa.Bandwidth = LORA_BW_031;
 800122c:	2302      	movs	r3, #2
 800122e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			mod_params.Params.LoRa.SpreadingFactor = LORA_SF10;
 8001232:	230a      	movs	r3, #10
 8001234:	f887 3020 	strb.w	r3, [r7, #32]
			mod_params.Params.LoRa.CodingRate = LORA_CR_4_8;
 8001238:	2304      	movs	r3, #4
 800123a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			mod_params.Params.LoRa.LowDatarateOptimize = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			SUBGRF_Init(DioIrqHndlr);
 8001244:	4843      	ldr	r0, [pc, #268]	; (8001354 <main+0x220>)
 8001246:	f009 ffa9 	bl	800b19c <SUBGRF_Init>
			SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800124a:	2100      	movs	r1, #0
 800124c:	2000      	movs	r0, #0
 800124e:	f00a fe11 	bl	800be74 <SUBGRF_SetBufferBaseAddress>
			SUBGRF_SetPayload(txBuffer, PayLoadLength);
 8001252:	2120      	movs	r1, #32
 8001254:	4840      	ldr	r0, [pc, #256]	; (8001358 <main+0x224>)
 8001256:	f009 fff3 	bl	800b240 <SUBGRF_SetPayload>
			SUBGRF_SetPacketParams(&pkt_params);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4618      	mov	r0, r3
 8001260:	f00a fd6a 	bl	800bd38 <SUBGRF_SetPacketParams>
			SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 8001264:	4a3d      	ldr	r2, [pc, #244]	; (800135c <main+0x228>)
 8001266:	463b      	mov	r3, r7
 8001268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001270:	463b      	mov	r3, r7
 8001272:	4618      	mov	r0, r3
 8001274:	f00a f829 	bl	800b2ca <SUBGRF_SetSyncWord>
							0x00, 0x00, 0x00 });
			SUBGRF_SetWhiteningSeed(0x01FF);
 8001278:	f240 10ff 	movw	r0, #511	; 0x1ff
 800127c:	f00a f874 	bl	800b368 <SUBGRF_SetWhiteningSeed>
			SUBGRF_SetRfFrequency(FREQ_433_MHZ);
 8001280:	4837      	ldr	r0, [pc, #220]	; (8001360 <main+0x22c>)
 8001282:	f00a fb4d 	bl	800b920 <SUBGRF_SetRfFrequency>
			SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8001286:	2301      	movs	r3, #1
 8001288:	2200      	movs	r2, #0
 800128a:	2107      	movs	r1, #7
 800128c:	2004      	movs	r0, #4
 800128e:	f00a fac9 	bl	800b824 <SUBGRF_SetPaConfig>
			SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
 8001292:	2206      	movs	r2, #6
 8001294:	2116      	movs	r1, #22
 8001296:	2002      	movs	r0, #2
 8001298:	f00a fbae 	bl	800b9f8 <SUBGRF_SetTxParams>
			SUBGRF_SetModulationParams(&mod_params);
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00a fc77 	bl	800bb94 <SUBGRF_SetModulationParams>
			SUBGRF_SetDioIrqParams(
 80012a6:	2300      	movs	r3, #0
 80012a8:	2200      	movs	r2, #0
 80012aa:	f240 210f 	movw	r1, #527	; 0x20f
 80012ae:	f240 200f 	movw	r0, #527	; 0x20f
 80012b2:	f00a fad9 	bl	800b868 <SUBGRF_SetDioIrqParams>
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_RADIO_NONE, IRQ_RADIO_NONE);

			myDebug("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 80012b6:	482b      	ldr	r0, [pc, #172]	; (8001364 <main+0x230>)
 80012b8:	f7ff faf6 	bl	80008a8 <myDebug>
			myDebug("Modulation: LoRa PACKET\r\n");
 80012bc:	482a      	ldr	r0, [pc, #168]	; (8001368 <main+0x234>)
 80012be:	f7ff faf3 	bl	80008a8 <myDebug>
			myDebug("FREQUENCY : %lu\r\n", FREQ_433_MHZ);
 80012c2:	4927      	ldr	r1, [pc, #156]	; (8001360 <main+0x22c>)
 80012c4:	4829      	ldr	r0, [pc, #164]	; (800136c <main+0x238>)
 80012c6:	f7ff faef 	bl	80008a8 <myDebug>
			myDebug(
 80012ca:	2316      	movs	r3, #22
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2300      	movs	r3, #0
 80012d0:	2207      	movs	r2, #7
 80012d2:	2104      	movs	r1, #4
 80012d4:	4826      	ldr	r0, [pc, #152]	; (8001370 <main+0x23c>)
 80012d6:	f7ff fae7 	bl	80008a8 <myDebug>
					"POWER CONFIG:\r\n    PA_DUTY_CYCLE : %x,    HP_MAX: %x,\n\r    PA_SEL : %x,    POWER TX: %u dBm\n\r",
					PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.LoRa.Bandwidth);
 80012da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80012de:	4619      	mov	r1, r3
 80012e0:	4824      	ldr	r0, [pc, #144]	; (8001374 <main+0x240>)
 80012e2:	f7ff fae1 	bl	80008a8 <myDebug>
			myDebug("Packet Type: 			%d\n\r", pkt_params.PacketType);
 80012e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4822      	ldr	r0, [pc, #136]	; (8001378 <main+0x244>)
 80012ee:	f7ff fadb 	bl	80008a8 <myDebug>
			myDebug("PayloadLength: 		%d\n\r",
					pkt_params.Params.LoRa.PayloadLength);
 80012f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
			myDebug("PayloadLength: 		%d\n\r",
 80012f6:	4619      	mov	r1, r3
 80012f8:	4820      	ldr	r0, [pc, #128]	; (800137c <main+0x248>)
 80012fa:	f7ff fad5 	bl	80008a8 <myDebug>
			myDebug("PreambleLength: 		%d\n\r",
					pkt_params.Params.LoRa.PreambleLength);
 80012fe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
			myDebug("PreambleLength: 		%d\n\r",
 8001300:	4619      	mov	r1, r3
 8001302:	481f      	ldr	r0, [pc, #124]	; (8001380 <main+0x24c>)
 8001304:	f7ff fad0 	bl	80008a8 <myDebug>
			myDebug("HeaderType: 			%d\n\r", pkt_params.Params.LoRa.HeaderType);
 8001308:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800130c:	4619      	mov	r1, r3
 800130e:	481d      	ldr	r0, [pc, #116]	; (8001384 <main+0x250>)
 8001310:	f7ff faca 	bl	80008a8 <myDebug>
			myDebug("__________________________________________________\r\n");
 8001314:	481c      	ldr	r0, [pc, #112]	; (8001388 <main+0x254>)
 8001316:	f7ff fac7 	bl	80008a8 <myDebug>
			myDebug(
 800131a:	481c      	ldr	r0, [pc, #112]	; (800138c <main+0x258>)
 800131c:	f7ff fac4 	bl	80008a8 <myDebug>
    MX_SubGHz_Phy_Process();
 8001320:	e736      	b.n	8001190 <main+0x5c>
 8001322:	bf00      	nop
 8001324:	20000534 	.word	0x20000534
 8001328:	0800d82c 	.word	0x0800d82c
 800132c:	20000580 	.word	0x20000580
 8001330:	0800d858 	.word	0x0800d858
 8001334:	20000581 	.word	0x20000581
 8001338:	0800d880 	.word	0x0800d880
 800133c:	20000603 	.word	0x20000603
 8001340:	0800d8ac 	.word	0x0800d8ac
 8001344:	20000608 	.word	0x20000608
 8001348:	0800d8c0 	.word	0x0800d8c0
 800134c:	200005f4 	.word	0x200005f4
 8001350:	0800d8dc 	.word	0x0800d8dc
 8001354:	08001a11 	.word	0x08001a11
 8001358:	2000059c 	.word	0x2000059c
 800135c:	0800dab4 	.word	0x0800dab4
 8001360:	19cf0e40 	.word	0x19cf0e40
 8001364:	0800d904 	.word	0x0800d904
 8001368:	0800d938 	.word	0x0800d938
 800136c:	0800d954 	.word	0x0800d954
 8001370:	0800d968 	.word	0x0800d968
 8001374:	0800d9c8 	.word	0x0800d9c8
 8001378:	0800d9e4 	.word	0x0800d9e4
 800137c:	0800d9fc 	.word	0x0800d9fc
 8001380:	0800da14 	.word	0x0800da14
 8001384:	0800da2c 	.word	0x0800da2c
 8001388:	0800da40 	.word	0x0800da40
 800138c:	0800da78 	.word	0x0800da78

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b09a      	sub	sp, #104	; 0x68
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	2248      	movs	r2, #72	; 0x48
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f00b fcf0 	bl	800cd84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
 80013b4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <SystemClock_Config+0xcc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <SystemClock_Config+0xcc>)
 80013c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <SystemClock_Config+0xcc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80013d2:	230b      	movs	r3, #11
 80013d4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80013d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e2:	2340      	movs	r3, #64	; 0x40
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013ee:	2301      	movs	r3, #1
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f2:	2302      	movs	r3, #2
 80013f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f6:	2303      	movs	r3, #3
 80013f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80013fa:	2310      	movs	r3, #16
 80013fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 80013fe:	2306      	movs	r3, #6
 8001400:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001408:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800140c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800140e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001412:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fe1f 	bl	800405c <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001424:	f000 fb28 	bl	8001a78 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001428:	234f      	movs	r3, #79	; 0x4f
 800142a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2303      	movs	r3, #3
 800142e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2102      	movs	r1, #2
 8001444:	4618      	mov	r0, r3
 8001446:	f003 f98b 	bl	8004760 <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001450:	f000 fb12 	bl	8001a78 <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	3768      	adds	r7, #104	; 0x68
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58000400 	.word	0x58000400

08001460 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <MX_ADC_Init+0xc4>)
 8001472:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <MX_ADC_Init+0xc8>)
 8001474:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001476:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_ADC_Init+0xc4>)
 8001478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800147c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_ADC_Init+0xc4>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <MX_ADC_Init+0xc4>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_ADC_Init+0xc4>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <MX_ADC_Init+0xc4>)
 8001492:	2204      	movs	r2, #4
 8001494:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001496:	4b23      	ldr	r3, [pc, #140]	; (8001524 <MX_ADC_Init+0xc4>)
 8001498:	2200      	movs	r2, #0
 800149a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <MX_ADC_Init+0xc4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <MX_ADC_Init+0xc4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <MX_ADC_Init+0xc4>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MX_ADC_Init+0xc4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <MX_ADC_Init+0xc4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <MX_ADC_Init+0xc4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_ADC_Init+0xc4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <MX_ADC_Init+0xc4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_ADC_Init+0xc4>)
 80014d2:	2207      	movs	r2, #7
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_ADC_Init+0xc4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_ADC_Init+0xc4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_ADC_Init+0xc4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014ea:	480e      	ldr	r0, [pc, #56]	; (8001524 <MX_ADC_Init+0xc4>)
 80014ec:	f001 fa12 	bl	8002914 <HAL_ADC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC_Init+0x9a>
  {
    Error_Handler();
 80014f6:	f000 fabf 	bl	8001a78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_ADC_Init+0xcc>)
 80014fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_ADC_Init+0xc4>)
 800150c:	f001 fb96 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC_Init+0xba>
  {
    Error_Handler();
 8001516:	f000 faaf 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000ec 	.word	0x200000ec
 8001528:	40012400 	.word	0x40012400
 800152c:	b0001000 	.word	0xb0001000

08001530 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 8001536:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <MX_LPUART1_UART_Init+0x94>)
 8001538:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001578:	4811      	ldr	r0, [pc, #68]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 800157a:	f006 f978 	bl	800786e <HAL_UART_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001584:	f000 fa78 	bl	8001a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	480d      	ldr	r0, [pc, #52]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 800158c:	f007 fda0 	bl	80090d0 <HAL_UARTEx_SetTxFifoThreshold>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001596:	f000 fa6f 	bl	8001a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159a:	2100      	movs	r1, #0
 800159c:	4808      	ldr	r0, [pc, #32]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 800159e:	f007 fdd5 	bl	800914c <HAL_UARTEx_SetRxFifoThreshold>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015a8:	f000 fa66 	bl	8001a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_LPUART1_UART_Init+0x90>)
 80015ae:	f007 fd57 	bl	8009060 <HAL_UARTEx_DisableFifoMode>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015b8:	f000 fa5e 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000150 	.word	0x20000150
 80015c4:	40008000 	.word	0x40008000

080015c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <MX_USART1_UART_Init+0x90>)
 80015ce:	4a23      	ldr	r2, [pc, #140]	; (800165c <MX_USART1_UART_Init+0x94>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <MX_USART1_UART_Init+0x90>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_USART1_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_USART1_UART_Init+0x90>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_USART1_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_USART1_UART_Init+0x90>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_USART1_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_USART1_UART_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_USART1_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_USART1_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001610:	4811      	ldr	r0, [pc, #68]	; (8001658 <MX_USART1_UART_Init+0x90>)
 8001612:	f006 f92c 	bl	800786e <HAL_UART_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800161c:	f000 fa2c 	bl	8001a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001620:	2100      	movs	r1, #0
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_USART1_UART_Init+0x90>)
 8001624:	f007 fd54 	bl	80090d0 <HAL_UARTEx_SetTxFifoThreshold>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800162e:	f000 fa23 	bl	8001a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001632:	2100      	movs	r1, #0
 8001634:	4808      	ldr	r0, [pc, #32]	; (8001658 <MX_USART1_UART_Init+0x90>)
 8001636:	f007 fd89 	bl	800914c <HAL_UARTEx_SetRxFifoThreshold>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001640:	f000 fa1a 	bl	8001a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_USART1_UART_Init+0x90>)
 8001646:	f007 fd0b 	bl	8009060 <HAL_UARTEx_DisableFifoMode>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001650:	f000 fa12 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200001e4 	.word	0x200001e4
 800165c:	40013800 	.word	0x40013800

08001660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 8001666:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <MX_USART2_UART_Init+0x94>)
 8001668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a8:	4811      	ldr	r0, [pc, #68]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 80016aa:	f006 f8e0 	bl	800786e <HAL_UART_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016b4:	f000 f9e0 	bl	8001a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b8:	2100      	movs	r1, #0
 80016ba:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 80016bc:	f007 fd08 	bl	80090d0 <HAL_UARTEx_SetTxFifoThreshold>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016c6:	f000 f9d7 	bl	8001a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 80016ce:	f007 fd3d 	bl	800914c <HAL_UARTEx_SetRxFifoThreshold>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016d8:	f000 f9ce 	bl	8001a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_USART2_UART_Init+0x90>)
 80016de:	f007 fcbf 	bl	8009060 <HAL_UARTEx_DisableFifoMode>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016e8:	f000 f9c6 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000278 	.word	0x20000278
 80016f4:	40004400 	.word	0x40004400

080016f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800170c:	2300      	movs	r3, #0
 800170e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <MX_RTC_Init+0xc0>)
 8001712:	4a2a      	ldr	r2, [pc, #168]	; (80017bc <MX_RTC_Init+0xc4>)
 8001714:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <MX_RTC_Init+0xc0>)
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800171c:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <MX_RTC_Init+0xc0>)
 800171e:	227f      	movs	r2, #127	; 0x7f
 8001720:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <MX_RTC_Init+0xc0>)
 8001724:	22ff      	movs	r2, #255	; 0xff
 8001726:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <MX_RTC_Init+0xc0>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <MX_RTC_Init+0xc0>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001734:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MX_RTC_Init+0xc0>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <MX_RTC_Init+0xc0>)
 800173c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001740:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MX_RTC_Init+0xc0>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <MX_RTC_Init+0xc0>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800174e:	481a      	ldr	r0, [pc, #104]	; (80017b8 <MX_RTC_Init+0xc0>)
 8001750:	f003 fce0 	bl	8005114 <HAL_RTC_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800175a:	f000 f98d 	bl	8001a78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800175e:	2300      	movs	r3, #0
 8001760:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001762:	2300      	movs	r3, #0
 8001764:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001766:	2300      	movs	r3, #0
 8001768:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2201      	movs	r2, #1
 8001776:	4619      	mov	r1, r3
 8001778:	480f      	ldr	r0, [pc, #60]	; (80017b8 <MX_RTC_Init+0xc0>)
 800177a:	f003 fd4d 	bl	8005218 <HAL_RTC_SetTime>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_RTC_Init+0x90>
  {
    Error_Handler();
 8001784:	f000 f978 	bl	8001a78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001788:	2301      	movs	r3, #1
 800178a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800178c:	2301      	movs	r3, #1
 800178e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001790:	2301      	movs	r3, #1
 8001792:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001794:	2300      	movs	r3, #0
 8001796:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001798:	463b      	mov	r3, r7
 800179a:	2201      	movs	r2, #1
 800179c:	4619      	mov	r1, r3
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <MX_RTC_Init+0xc0>)
 80017a0:	f003 fe38 	bl	8005414 <HAL_RTC_SetDate>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 80017aa:	f000 f965 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000048c 	.word	0x2000048c
 80017bc:	40002800 	.word	0x40002800

080017c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_SPI2_Init+0x74>)
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <MX_SPI2_Init+0x78>)
 80017c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_SPI2_Init+0x74>)
 80017cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_SPI2_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_SPI2_Init+0x74>)
 80017da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_SPI2_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_SPI2_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_SPI2_Init+0x74>)
 80017ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_SPI2_Init+0x74>)
 80017f6:	2238      	movs	r2, #56	; 0x38
 80017f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_SPI2_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_SPI2_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_SPI2_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_SPI2_Init+0x74>)
 800180e:	2207      	movs	r2, #7
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_SPI2_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_SPI2_Init+0x74>)
 800181a:	2208      	movs	r2, #8
 800181c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_SPI2_Init+0x74>)
 8001820:	f003 ff9e 	bl	8005760 <HAL_SPI_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800182a:	f000 f925 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200004c4 	.word	0x200004c4
 8001838:	40003800 	.word	0x40003800

0800183c <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_SUBGHZ_Init+0x20>)
 8001842:	2210      	movs	r2, #16
 8001844:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_SUBGHZ_Init+0x20>)
 8001848:	f005 f912 	bl	8006a70 <HAL_SUBGHZ_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001852:	f000 f911 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000528 	.word	0x20000528

08001860 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <MX_TIM1_Init+0xa0>)
 8001880:	4a20      	ldr	r2, [pc, #128]	; (8001904 <MX_TIM1_Init+0xa4>)
 8001882:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <MX_TIM1_Init+0xa0>)
 8001886:	222f      	movs	r2, #47	; 0x2f
 8001888:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <MX_TIM1_Init+0xa0>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <MX_TIM1_Init+0xa0>)
 8001892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001896:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <MX_TIM1_Init+0xa0>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_TIM1_Init+0xa0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <MX_TIM1_Init+0xa0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018aa:	4815      	ldr	r0, [pc, #84]	; (8001900 <MX_TIM1_Init+0xa0>)
 80018ac:	f005 fd00 	bl	80072b0 <HAL_TIM_Base_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018b6:	f000 f8df 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	480e      	ldr	r0, [pc, #56]	; (8001900 <MX_TIM1_Init+0xa0>)
 80018c8:	f005 fd8e 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018d2:	f000 f8d1 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_TIM1_Init+0xa0>)
 80018e8:	f005 ff42 	bl	8007770 <HAL_TIMEx_MasterConfigSynchronization>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018f2:	f000 f8c1 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000534 	.word	0x20000534
 8001904:	40012c00 	.word	0x40012c00

08001908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800190c:	2004      	movs	r0, #4
 800190e:	f7ff f965 	bl	8000bdc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff f962 	bl	8000bdc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	200b      	movs	r0, #11
 800191e:	f001 fb9c 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001922:	200b      	movs	r0, #11
 8001924:	f001 fbb3 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	200c      	movs	r0, #12
 800192e:	f001 fb94 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001932:	200c      	movs	r0, #12
 8001934:	f001 fbab 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	200d      	movs	r0, #13
 800193e:	f001 fb8c 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001942:	200d      	movs	r0, #13
 8001944:	f001 fba3 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	200e      	movs	r0, #14
 800194e:	f001 fb84 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001952:	200e      	movs	r0, #14
 8001954:	f001 fb9b 	bl	800308e <HAL_NVIC_EnableIRQ>

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	2001      	movs	r0, #1
 8001972:	f7ff f94b 	bl	8000c0c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff f948 	bl	8000c0c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197c:	2004      	movs	r0, #4
 800197e:	f7ff f945 	bl	8000c0c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001988:	481f      	ldr	r0, [pc, #124]	; (8001a08 <MX_GPIO_Init+0xac>)
 800198a:	f002 f87d 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	2138      	movs	r1, #56	; 0x38
 8001992:	481e      	ldr	r0, [pc, #120]	; (8001a0c <MX_GPIO_Init+0xb0>)
 8001994:	f002 f878 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8001998:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800199c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a6:	2302      	movs	r3, #2
 80019a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4816      	ldr	r0, [pc, #88]	; (8001a08 <MX_GPIO_Init+0xac>)
 80019b0:	f001 ff0a 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80019b4:	2338      	movs	r3, #56	; 0x38
 80019b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4810      	ldr	r0, [pc, #64]	; (8001a0c <MX_GPIO_Init+0xb0>)
 80019ca:	f001 fefd 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80019ce:	2303      	movs	r3, #3
 80019d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d8:	2301      	movs	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e4:	f001 fef0 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 80019e8:	2340      	movs	r3, #64	; 0x40
 80019ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <MX_GPIO_Init+0xb0>)
 80019fc:	f001 fee4 	bl	80037c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	48000400 	.word	0x48000400
 8001a0c:	48000800 	.word	0x48000800

08001a10 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_TX_DONE) {
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d11b      	bne.n	8001a58 <DioIrqHndlr+0x48>
		myDebug("\n\r LoRa Transmitted Successful to SSOC_2:  \r");
 8001a20:	480f      	ldr	r0, [pc, #60]	; (8001a60 <DioIrqHndlr+0x50>)
 8001a22:	f7fe ff41 	bl	80008a8 <myDebug>
		for (int i = 0; i < 32; i++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e00a      	b.n	8001a42 <DioIrqHndlr+0x32>
			myDebug(" %02x", txBuffer[i]);
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <DioIrqHndlr+0x54>)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4413      	add	r3, r2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	480c      	ldr	r0, [pc, #48]	; (8001a68 <DioIrqHndlr+0x58>)
 8001a38:	f7fe ff36 	bl	80008a8 <myDebug>
		for (int i = 0; i < 32; i++) {
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b1f      	cmp	r3, #31
 8001a46:	ddf1      	ble.n	8001a2c <DioIrqHndlr+0x1c>
		}
		myDebug("\n\n");
 8001a48:	4808      	ldr	r0, [pc, #32]	; (8001a6c <DioIrqHndlr+0x5c>)
 8001a4a:	f7fe ff2d 	bl	80008a8 <myDebug>

		HAL_UART_Receive_DMA(&hlpuart1, rxData, PayLoadLength);
 8001a4e:	2220      	movs	r2, #32
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <DioIrqHndlr+0x60>)
 8001a52:	4808      	ldr	r0, [pc, #32]	; (8001a74 <DioIrqHndlr+0x64>)
 8001a54:	f006 f8a6 	bl	8007ba4 <HAL_UART_Receive_DMA>
	}
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	0800dabc 	.word	0x0800dabc
 8001a64:	2000059c 	.word	0x2000059c
 8001a68:	0800daec 	.word	0x0800daec
 8001a6c:	0800daf4 	.word	0x0800daf4
 8001a70:	200005bc 	.word	0x200005bc
 8001a74:	20000150 	.word	0x20000150

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	MSN_Error();
 8001a7c:	f7ff fa14 	bl	8000ea8 <MSN_Error>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
	__disable_irq();
	while (1) {
 8001a84:	e7fe      	b.n	8001a84 <Error_Handler+0xc>
	...

08001a88 <WAIT_FOR_HANDSHAKE>:
uint32_t MSN_CMD;
uint32_t MAIN_ADDR;

extern uint8_t OBC_HANDSHAKE_FLAG;

void WAIT_FOR_HANDSHAKE() {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
	uint8_t MainCMDHs[5];
	if (HAL_UART_Receive(&huart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8001a8e:	4639      	mov	r1, r7
 8001a90:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001a94:	2205      	movs	r2, #5
 8001a96:	4848      	ldr	r0, [pc, #288]	; (8001bb8 <WAIT_FOR_HANDSHAKE+0x130>)
 8001a98:	f005 ffbf 	bl	8007a1a <HAL_UART_Receive>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d17e      	bne.n	8001ba0 <WAIT_FOR_HANDSHAKE+0x118>
		myDebug("--> HandShake command received from OBC!");
 8001aa2:	4846      	ldr	r0, [pc, #280]	; (8001bbc <WAIT_FOR_HANDSHAKE+0x134>)
 8001aa4:	f7fe ff00 	bl	80008a8 <myDebug>
		for (int i = 0; i < 5; i++) {
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	e00a      	b.n	8001ac4 <WAIT_FOR_HANDSHAKE+0x3c>
			myDebug("%x", MainCMDHs[i]);
 8001aae:	463a      	mov	r2, r7
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4841      	ldr	r0, [pc, #260]	; (8001bc0 <WAIT_FOR_HANDSHAKE+0x138>)
 8001aba:	f7fe fef5 	bl	80008a8 <myDebug>
		for (int i = 0; i < 5; i++) {
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	ddf1      	ble.n	8001aae <WAIT_FOR_HANDSHAKE+0x26>
		}
		myDebug("\n");
 8001aca:	483e      	ldr	r0, [pc, #248]	; (8001bc4 <WAIT_FOR_HANDSHAKE+0x13c>)
 8001acc:	f7fe feec 	bl	80008a8 <myDebug>
		delay_us(1);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7fe ff23 	bl	800091c <delay_us>
		if (MainCMDHs[0] == 0x04 && MainCMDHs[4] == 0xFE) {
 8001ad6:	783b      	ldrb	r3, [r7, #0]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d158      	bne.n	8001b8e <WAIT_FOR_HANDSHAKE+0x106>
 8001adc:	793b      	ldrb	r3, [r7, #4]
 8001ade:	2bfe      	cmp	r3, #254	; 0xfe
 8001ae0:	d155      	bne.n	8001b8e <WAIT_FOR_HANDSHAKE+0x106>
			myDebug("--> Command Acknowledged!\n");
 8001ae2:	4839      	ldr	r0, [pc, #228]	; (8001bc8 <WAIT_FOR_HANDSHAKE+0x140>)
 8001ae4:	f7fe fee0 	bl	80008a8 <myDebug>

			if (HAL_UART_Transmit(&hlpuart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8001ae8:	4639      	mov	r1, r7
 8001aea:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001aee:	2205      	movs	r2, #5
 8001af0:	4836      	ldr	r0, [pc, #216]	; (8001bcc <WAIT_FOR_HANDSHAKE+0x144>)
 8001af2:	f005 ff0c 	bl	800790e <HAL_UART_Transmit>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d157      	bne.n	8001bac <WAIT_FOR_HANDSHAKE+0x124>

				if (HAL_UART_Receive(&hlpuart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8001afc:	4639      	mov	r1, r7
 8001afe:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001b02:	2205      	movs	r2, #5
 8001b04:	4831      	ldr	r0, [pc, #196]	; (8001bcc <WAIT_FOR_HANDSHAKE+0x144>)
 8001b06:	f005 ff88 	bl	8007a1a <HAL_UART_Receive>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d14d      	bne.n	8001bac <WAIT_FOR_HANDSHAKE+0x124>
					myDebug("--> HandShake command received from ssoc2!");
 8001b10:	482f      	ldr	r0, [pc, #188]	; (8001bd0 <WAIT_FOR_HANDSHAKE+0x148>)
 8001b12:	f7fe fec9 	bl	80008a8 <myDebug>
					for (int i = 0; i < 5; i++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	e00a      	b.n	8001b32 <WAIT_FOR_HANDSHAKE+0xaa>
						myDebug("%x", MainCMDHs[i]);
 8001b1c:	463a      	mov	r2, r7
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	4413      	add	r3, r2
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4826      	ldr	r0, [pc, #152]	; (8001bc0 <WAIT_FOR_HANDSHAKE+0x138>)
 8001b28:	f7fe febe 	bl	80008a8 <myDebug>
					for (int i = 0; i < 5; i++) {
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	ddf1      	ble.n	8001b1c <WAIT_FOR_HANDSHAKE+0x94>
					}
					myDebug("\n");
 8001b38:	4822      	ldr	r0, [pc, #136]	; (8001bc4 <WAIT_FOR_HANDSHAKE+0x13c>)
 8001b3a:	f7fe feb5 	bl	80008a8 <myDebug>
					delay_us(1);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7fe feec 	bl	800091c <delay_us>
					if (MainCMDHs[0] == 0x04 && MainCMDHs[4] == 0xFE) {
 8001b44:	783b      	ldrb	r3, [r7, #0]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d119      	bne.n	8001b7e <WAIT_FOR_HANDSHAKE+0xf6>
 8001b4a:	793b      	ldrb	r3, [r7, #4]
 8001b4c:	2bfe      	cmp	r3, #254	; 0xfe
 8001b4e:	d116      	bne.n	8001b7e <WAIT_FOR_HANDSHAKE+0xf6>
						myDebug("--> Command Acknowledged!\n");
 8001b50:	481d      	ldr	r0, [pc, #116]	; (8001bc8 <WAIT_FOR_HANDSHAKE+0x140>)
 8001b52:	f7fe fea9 	bl	80008a8 <myDebug>

						if (HAL_UART_Transmit(&huart1, MainCMDHs, 5, 7000)
 8001b56:	4639      	mov	r1, r7
 8001b58:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	4816      	ldr	r0, [pc, #88]	; (8001bb8 <WAIT_FOR_HANDSHAKE+0x130>)
 8001b60:	f005 fed5 	bl	800790e <HAL_UART_Transmit>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d110      	bne.n	8001b8c <WAIT_FOR_HANDSHAKE+0x104>
								== HAL_OK) {
							myDebug("--> HandShake ACK sent to MAIN\n");
 8001b6a:	481a      	ldr	r0, [pc, #104]	; (8001bd4 <WAIT_FOR_HANDSHAKE+0x14c>)
 8001b6c:	f7fe fe9c 	bl	80008a8 <myDebug>
							OBC_HANDSHAKE_FLAG = 1;
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <WAIT_FOR_HANDSHAKE+0x150>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
							delay_us(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7fe fed0 	bl	800091c <delay_us>
						if (HAL_UART_Transmit(&huart1, MainCMDHs, 5, 7000)
 8001b7c:	e006      	b.n	8001b8c <WAIT_FOR_HANDSHAKE+0x104>
						}
					}else{
						myDebug("*** Unknown handshake command received from ssoc2!\n");
 8001b7e:	4817      	ldr	r0, [pc, #92]	; (8001bdc <WAIT_FOR_HANDSHAKE+0x154>)
 8001b80:	f7fe fe92 	bl	80008a8 <myDebug>
						delay_us(1);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7fe fec9 	bl	800091c <delay_us>
			if (HAL_UART_Transmit(&hlpuart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8001b8a:	e00f      	b.n	8001bac <WAIT_FOR_HANDSHAKE+0x124>
 8001b8c:	e00e      	b.n	8001bac <WAIT_FOR_HANDSHAKE+0x124>
					}
				}
			}
		} else {
			myDebug("*** Unknown handshake command received\n");
 8001b8e:	4814      	ldr	r0, [pc, #80]	; (8001be0 <WAIT_FOR_HANDSHAKE+0x158>)
 8001b90:	f7fe fe8a 	bl	80008a8 <myDebug>
			delay_us(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f7fe fec1 	bl	800091c <delay_us>
			WAIT_FOR_HANDSHAKE();
 8001b9a:	f7ff ff75 	bl	8001a88 <WAIT_FOR_HANDSHAKE>
		}
	} else {
		delay_us(1);
		WAIT_FOR_HANDSHAKE();
	}
}
 8001b9e:	e006      	b.n	8001bae <WAIT_FOR_HANDSHAKE+0x126>
		delay_us(1);
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7fe febb 	bl	800091c <delay_us>
		WAIT_FOR_HANDSHAKE();
 8001ba6:	f7ff ff6f 	bl	8001a88 <WAIT_FOR_HANDSHAKE>
}
 8001baa:	e000      	b.n	8001bae <WAIT_FOR_HANDSHAKE+0x126>
			if (HAL_UART_Transmit(&hlpuart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8001bac:	bf00      	nop
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200001e4 	.word	0x200001e4
 8001bbc:	0800daf8 	.word	0x0800daf8
 8001bc0:	0800db24 	.word	0x0800db24
 8001bc4:	0800db28 	.word	0x0800db28
 8001bc8:	0800db2c 	.word	0x0800db2c
 8001bcc:	20000150 	.word	0x20000150
 8001bd0:	0800db48 	.word	0x0800db48
 8001bd4:	0800db74 	.word	0x0800db74
 8001bd8:	20000580 	.word	0x20000580
 8001bdc:	0800db94 	.word	0x0800db94
 8001be0:	0800dbc8 	.word	0x0800dbc8

08001be4 <Receive_MAIN_CMD>:

void Receive_MAIN_CMD() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive(&huart1, MAIN_CMD, 15, 7000) == HAL_OK) {
 8001bea:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001bee:	220f      	movs	r2, #15
 8001bf0:	4920      	ldr	r1, [pc, #128]	; (8001c74 <Receive_MAIN_CMD+0x90>)
 8001bf2:	4821      	ldr	r0, [pc, #132]	; (8001c78 <Receive_MAIN_CMD+0x94>)
 8001bf4:	f005 ff11 	bl	8007a1a <HAL_UART_Receive>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d12e      	bne.n	8001c5c <Receive_MAIN_CMD+0x78>
		myDebug("--> Command received from OBC: 0x");
 8001bfe:	481f      	ldr	r0, [pc, #124]	; (8001c7c <Receive_MAIN_CMD+0x98>)
 8001c00:	f7fe fe52 	bl	80008a8 <myDebug>
		for (int i = 0; i < 15; i++) {
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	e00a      	b.n	8001c20 <Receive_MAIN_CMD+0x3c>
			myDebug("%x\r", MAIN_CMD[i]);
 8001c0a:	4a1a      	ldr	r2, [pc, #104]	; (8001c74 <Receive_MAIN_CMD+0x90>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	481a      	ldr	r0, [pc, #104]	; (8001c80 <Receive_MAIN_CMD+0x9c>)
 8001c16:	f7fe fe47 	bl	80008a8 <myDebug>
		for (int i = 0; i < 15; i++) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b0e      	cmp	r3, #14
 8001c24:	ddf1      	ble.n	8001c0a <Receive_MAIN_CMD+0x26>
		}
		myDebug("\n");
 8001c26:	4817      	ldr	r0, [pc, #92]	; (8001c84 <Receive_MAIN_CMD+0xa0>)
 8001c28:	f7fe fe3e 	bl	80008a8 <myDebug>
		delay_us(1);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7fe fe75 	bl	800091c <delay_us>
		if (MAIN_CMD[0] == 0x01 && MAIN_CMD[14] == 0xFE) {
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <Receive_MAIN_CMD+0x90>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d107      	bne.n	8001c4a <Receive_MAIN_CMD+0x66>
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <Receive_MAIN_CMD+0x90>)
 8001c3c:	7b9b      	ldrb	r3, [r3, #14]
 8001c3e:	2bfe      	cmp	r3, #254	; 0xfe
 8001c40:	d103      	bne.n	8001c4a <Receive_MAIN_CMD+0x66>
			myDebug("--> Correct command received from OBC\n");
 8001c42:	4811      	ldr	r0, [pc, #68]	; (8001c88 <Receive_MAIN_CMD+0xa4>)
 8001c44:	f7fe fe30 	bl	80008a8 <myDebug>
	} else {
		myDebug("*** Command receive failed\n");
		delay_us(1);
		Receive_MAIN_CMD();
	}
}
 8001c48:	e010      	b.n	8001c6c <Receive_MAIN_CMD+0x88>
			myDebug("*** Incorrect command received from OBC\n");
 8001c4a:	4810      	ldr	r0, [pc, #64]	; (8001c8c <Receive_MAIN_CMD+0xa8>)
 8001c4c:	f7fe fe2c 	bl	80008a8 <myDebug>
			delay_us(1);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f7fe fe63 	bl	800091c <delay_us>
			Receive_MAIN_CMD();
 8001c56:	f7ff ffc5 	bl	8001be4 <Receive_MAIN_CMD>
}
 8001c5a:	e007      	b.n	8001c6c <Receive_MAIN_CMD+0x88>
		myDebug("*** Command receive failed\n");
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <Receive_MAIN_CMD+0xac>)
 8001c5e:	f7fe fe23 	bl	80008a8 <myDebug>
		delay_us(1);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7fe fe5a 	bl	800091c <delay_us>
		Receive_MAIN_CMD();
 8001c68:	f7ff ffbc 	bl	8001be4 <Receive_MAIN_CMD>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200005f4 	.word	0x200005f4
 8001c78:	200001e4 	.word	0x200001e4
 8001c7c:	0800dbf0 	.word	0x0800dbf0
 8001c80:	0800dc14 	.word	0x0800dc14
 8001c84:	0800db28 	.word	0x0800db28
 8001c88:	0800dc18 	.word	0x0800dc18
 8001c8c:	0800dc40 	.word	0x0800dc40
 8001c90:	0800dc6c 	.word	0x0800dc6c

08001c94 <Execute_MAIN_CMD>:

void Execute_MAIN_CMD() {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	myDebug("### Fetching received CMD from OBC.....\n");
 8001c98:	4815      	ldr	r0, [pc, #84]	; (8001cf0 <Execute_MAIN_CMD+0x5c>)
 8001c9a:	f7fe fe05 	bl	80008a8 <myDebug>
	MCU_ID = MAIN_CMD[0];
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <Execute_MAIN_CMD+0x60>)
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <Execute_MAIN_CMD+0x64>)
 8001ca4:	701a      	strb	r2, [r3, #0]
	MSN_CMD = MAIN_CMD[0] << 24 | MAIN_CMD[1] << 16 | MAIN_CMD[2] << 8
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <Execute_MAIN_CMD+0x60>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	061a      	lsls	r2, r3, #24
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <Execute_MAIN_CMD+0x60>)
 8001cae:	785b      	ldrb	r3, [r3, #1]
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <Execute_MAIN_CMD+0x60>)
 8001cb6:	789b      	ldrb	r3, [r3, #2]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	4313      	orrs	r3, r2
			| MAIN_CMD[3];
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <Execute_MAIN_CMD+0x60>)
 8001cbe:	78d2      	ldrb	r2, [r2, #3]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	461a      	mov	r2, r3
	MSN_CMD = MAIN_CMD[0] << 24 | MAIN_CMD[1] << 16 | MAIN_CMD[2] << 8
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <Execute_MAIN_CMD+0x68>)
 8001cc6:	601a      	str	r2, [r3, #0]
	MAIN_ADDR = MAIN_CMD[4] << 24 | MAIN_CMD[5] << 16 | MAIN_CMD[6] << 8
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <Execute_MAIN_CMD+0x60>)
 8001cca:	791b      	ldrb	r3, [r3, #4]
 8001ccc:	061a      	lsls	r2, r3, #24
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <Execute_MAIN_CMD+0x60>)
 8001cd0:	795b      	ldrb	r3, [r3, #5]
 8001cd2:	041b      	lsls	r3, r3, #16
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <Execute_MAIN_CMD+0x60>)
 8001cd8:	799b      	ldrb	r3, [r3, #6]
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	4313      	orrs	r3, r2
			| MAIN_CMD[7];
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <Execute_MAIN_CMD+0x60>)
 8001ce0:	79d2      	ldrb	r2, [r2, #7]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	461a      	mov	r2, r3
	MAIN_ADDR = MAIN_CMD[4] << 24 | MAIN_CMD[5] << 16 | MAIN_CMD[6] << 8
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <Execute_MAIN_CMD+0x6c>)
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	0800dc88 	.word	0x0800dc88
 8001cf4:	200005f4 	.word	0x200005f4
 8001cf8:	20000603 	.word	0x20000603
 8001cfc:	20000604 	.word	0x20000604
 8001d00:	20000608 	.word	0x20000608

08001d04 <setTime>:

RTC_TimeTypeDef gTime;
RTC_DateTypeDef gDate;

void setTime(uint8_t year, uint8_t month, uint8_t weekDay, uint8_t hour,
		uint8_t min, uint8_t sec) {
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	4603      	mov	r3, r0
 8001d18:	71bb      	strb	r3, [r7, #6]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	717b      	strb	r3, [r7, #5]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	713b      	strb	r3, [r7, #4]

	sTime.Hours = hour;
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <setTime+0x80>)
 8001d24:	793b      	ldrb	r3, [r7, #4]
 8001d26:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001d28:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <setTime+0x80>)
 8001d2a:	7e3b      	ldrb	r3, [r7, #24]
 8001d2c:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 8001d2e:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <setTime+0x80>)
 8001d30:	7f3b      	ldrb	r3, [r7, #28]
 8001d32:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <setTime+0x80>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <setTime+0x80>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d40:	2201      	movs	r2, #1
 8001d42:	4910      	ldr	r1, [pc, #64]	; (8001d84 <setTime+0x80>)
 8001d44:	4810      	ldr	r0, [pc, #64]	; (8001d88 <setTime+0x84>)
 8001d46:	f003 fa67 	bl	8005218 <HAL_RTC_SetTime>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <setTime+0x50>
		Error_Handler();
 8001d50:	f7ff fe92 	bl	8001a78 <Error_Handler>

	sDate.Month = month;
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <setTime+0x88>)
 8001d56:	79bb      	ldrb	r3, [r7, #6]
 8001d58:	7053      	strb	r3, [r2, #1]
	sDate.Year = year;
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <setTime+0x88>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	70d3      	strb	r3, [r2, #3]
	sDate.WeekDay = weekDay;
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <setTime+0x88>)
 8001d62:	797b      	ldrb	r3, [r7, #5]
 8001d64:	7013      	strb	r3, [r2, #0]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d66:	2201      	movs	r2, #1
 8001d68:	4908      	ldr	r1, [pc, #32]	; (8001d8c <setTime+0x88>)
 8001d6a:	4807      	ldr	r0, [pc, #28]	; (8001d88 <setTime+0x84>)
 8001d6c:	f003 fb52 	bl	8005414 <HAL_RTC_SetDate>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <setTime+0x76>
		Error_Handler();
 8001d76:	f7ff fe7f 	bl	8001a78 <Error_Handler>

	//HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);

}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000060c 	.word	0x2000060c
 8001d88:	2000048c 	.word	0x2000048c
 8001d8c:	20000620 	.word	0x20000620

08001d90 <getTime>:

void getTime() {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001d94:	2200      	movs	r2, #0
 8001d96:	4905      	ldr	r1, [pc, #20]	; (8001dac <getTime+0x1c>)
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <getTime+0x20>)
 8001d9a:	f003 fad9 	bl	8005350 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	4904      	ldr	r1, [pc, #16]	; (8001db4 <getTime+0x24>)
 8001da2:	4803      	ldr	r0, [pc, #12]	; (8001db0 <getTime+0x20>)
 8001da4:	f003 fbbc 	bl	8005520 <HAL_RTC_GetDate>

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000624 	.word	0x20000624
 8001db0:	2000048c 	.word	0x2000048c
 8001db4:	20000638 	.word	0x20000638

08001db8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <LL_AHB2_GRP1_EnableClock>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <HAL_ADC_MspInit+0x24>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d103      	bne.n	8001eee <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ee6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eea:	f7ff ffbd 	bl	8001e68 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40012400 	.word	0x40012400

08001efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b096      	sub	sp, #88	; 0x58
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2238      	movs	r2, #56	; 0x38
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00a ff31 	bl	800cd84 <memset>
  if(huart->Instance==LPUART1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a99      	ldr	r2, [pc, #612]	; (800218c <HAL_UART_MspInit+0x290>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	f040 8092 	bne.w	8002052 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 ffd0 	bl	8004ee0 <HAL_RCCEx_PeriphCLKConfig>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f46:	f7ff fd97 	bl	8001a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff ff74 	bl	8001e38 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f50:	2004      	movs	r0, #4
 8001f52:	f7ff ff41 	bl	8001dd8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001f56:	2303      	movs	r3, #3
 8001f58:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001f66:	2308      	movs	r3, #8
 8001f68:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4887      	ldr	r0, [pc, #540]	; (8002190 <HAL_UART_MspInit+0x294>)
 8001f72:	f001 fc29 	bl	80037c8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8001f76:	4b87      	ldr	r3, [pc, #540]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001f78:	4a87      	ldr	r2, [pc, #540]	; (8002198 <HAL_UART_MspInit+0x29c>)
 8001f7a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001f7c:	4b85      	ldr	r3, [pc, #532]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001f7e:	2215      	movs	r2, #21
 8001f80:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f82:	4b84      	ldr	r3, [pc, #528]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f88:	4b82      	ldr	r3, [pc, #520]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f8e:	4b81      	ldr	r3, [pc, #516]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f94:	4b7f      	ldr	r3, [pc, #508]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9a:	4b7e      	ldr	r3, [pc, #504]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001fa0:	4b7c      	ldr	r3, [pc, #496]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa6:	4b7b      	ldr	r3, [pc, #492]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001fac:	4879      	ldr	r0, [pc, #484]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001fae:	f001 f889 	bl	80030c4 <HAL_DMA_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001fb8:	f7ff fd5e 	bl	8001a78 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001fbc:	2110      	movs	r1, #16
 8001fbe:	4875      	ldr	r0, [pc, #468]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001fc0:	f001 fb2a 	bl	8003618 <HAL_DMA_ConfigChannelAttributes>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001fca:	f7ff fd55 	bl	8001a78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a70      	ldr	r2, [pc, #448]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001fd6:	4a6f      	ldr	r2, [pc, #444]	; (8002194 <HAL_UART_MspInit+0x298>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8001fdc:	4b6f      	ldr	r3, [pc, #444]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8001fde:	4a70      	ldr	r2, [pc, #448]	; (80021a0 <HAL_UART_MspInit+0x2a4>)
 8001fe0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001fe2:	4b6e      	ldr	r3, [pc, #440]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8001fe4:	2216      	movs	r2, #22
 8001fe6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fe8:	4b6c      	ldr	r3, [pc, #432]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8001fea:	2210      	movs	r2, #16
 8001fec:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fee:	4b6b      	ldr	r3, [pc, #428]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff4:	4b69      	ldr	r3, [pc, #420]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ffa:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002000:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002006:	4b65      	ldr	r3, [pc, #404]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8002008:	2200      	movs	r2, #0
 800200a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800200c:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_UART_MspInit+0x2a0>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002012:	4862      	ldr	r0, [pc, #392]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8002014:	f001 f856 	bl	80030c4 <HAL_DMA_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 800201e:	f7ff fd2b 	bl	8001a78 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002022:	2110      	movs	r1, #16
 8002024:	485d      	ldr	r0, [pc, #372]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8002026:	f001 faf7 	bl	8003618 <HAL_DMA_ConfigChannelAttributes>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002030:	f7ff fd22 	bl	8001a78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a59      	ldr	r2, [pc, #356]	; (800219c <HAL_UART_MspInit+0x2a0>)
 8002038:	67da      	str	r2, [r3, #124]	; 0x7c
 800203a:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_UART_MspInit+0x2a0>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2026      	movs	r0, #38	; 0x26
 8002046:	f001 f808 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800204a:	2026      	movs	r0, #38	; 0x26
 800204c:	f001 f81f 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002050:	e0de      	b.n	8002210 <HAL_UART_MspInit+0x314>
  else if(huart->Instance==USART1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a53      	ldr	r2, [pc, #332]	; (80021a4 <HAL_UART_MspInit+0x2a8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	f040 80ad 	bne.w	80021b8 <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800205e:	2301      	movs	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002062:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002066:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	4618      	mov	r0, r3
 800206e:	f002 ff37 	bl	8004ee0 <HAL_RCCEx_PeriphCLKConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8002078:	f7ff fcfe 	bl	8001a78 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800207c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002080:	f7ff fef2 	bl	8001e68 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff fea7 	bl	8001dd8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800208a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800208e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800209c:	2307      	movs	r3, #7
 800209e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020a4:	4619      	mov	r1, r3
 80020a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020aa:	f001 fb8d 	bl	80037c8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80020ae:	4b3e      	ldr	r3, [pc, #248]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020b0:	4a3e      	ldr	r2, [pc, #248]	; (80021ac <HAL_UART_MspInit+0x2b0>)
 80020b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80020b4:	4b3c      	ldr	r3, [pc, #240]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020b6:	2211      	movs	r2, #17
 80020b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ba:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c0:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020c6:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020cc:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020d2:	4b35      	ldr	r3, [pc, #212]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020d8:	4b33      	ldr	r3, [pc, #204]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020de:	4b32      	ldr	r3, [pc, #200]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020e4:	4830      	ldr	r0, [pc, #192]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020e6:	f000 ffed 	bl	80030c4 <HAL_DMA_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 80020f0:	f7ff fcc2 	bl	8001a78 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80020f4:	2110      	movs	r1, #16
 80020f6:	482c      	ldr	r0, [pc, #176]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 80020f8:	f001 fa8e 	bl	8003618 <HAL_DMA_ConfigChannelAttributes>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8002102:	f7ff fcb9 	bl	8001a78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a27      	ldr	r2, [pc, #156]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 800210a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800210e:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <HAL_UART_MspInit+0x2ac>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002114:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 8002116:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <HAL_UART_MspInit+0x2b8>)
 8002118:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 800211c:	2212      	movs	r2, #18
 800211e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 8002122:	2210      	movs	r2, #16
 8002124:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002132:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800213e:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 8002146:	2200      	movs	r2, #0
 8002148:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800214a:	4819      	ldr	r0, [pc, #100]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 800214c:	f000 ffba 	bl	80030c4 <HAL_DMA_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8002156:	f7ff fc8f 	bl	8001a78 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800215a:	2110      	movs	r1, #16
 800215c:	4814      	ldr	r0, [pc, #80]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 800215e:	f001 fa5b 	bl	8003618 <HAL_DMA_ConfigChannelAttributes>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_UART_MspInit+0x270>
      Error_Handler();
 8002168:	f7ff fc86 	bl	8001a78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 8002170:	67da      	str	r2, [r3, #124]	; 0x7c
 8002172:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <HAL_UART_MspInit+0x2b4>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2024      	movs	r0, #36	; 0x24
 800217e:	f000 ff6c 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002182:	2024      	movs	r0, #36	; 0x24
 8002184:	f000 ff83 	bl	800308e <HAL_NVIC_EnableIRQ>
}
 8002188:	e042      	b.n	8002210 <HAL_UART_MspInit+0x314>
 800218a:	bf00      	nop
 800218c:	40008000 	.word	0x40008000
 8002190:	48000800 	.word	0x48000800
 8002194:	2000030c 	.word	0x2000030c
 8002198:	40020030 	.word	0x40020030
 800219c:	2000036c 	.word	0x2000036c
 80021a0:	40020044 	.word	0x40020044
 80021a4:	40013800 	.word	0x40013800
 80021a8:	200003cc 	.word	0x200003cc
 80021ac:	40020008 	.word	0x40020008
 80021b0:	2000042c 	.word	0x2000042c
 80021b4:	4002001c 	.word	0x4002001c
  else if(huart->Instance==USART2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a16      	ldr	r2, [pc, #88]	; (8002218 <HAL_UART_MspInit+0x31c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d126      	bne.n	8002210 <HAL_UART_MspInit+0x314>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021c2:	2302      	movs	r3, #2
 80021c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021c6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80021ca:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	4618      	mov	r0, r3
 80021d2:	f002 fe85 	bl	8004ee0 <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_UART_MspInit+0x2e4>
      Error_Handler();
 80021dc:	f7ff fc4c 	bl	8001a78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021e4:	f7ff fe10 	bl	8001e08 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7ff fdf5 	bl	8001dd8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80021ee:	230c      	movs	r3, #12
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fe:	2307      	movs	r3, #7
 8002200:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220c:	f001 fadc 	bl	80037c8 <HAL_GPIO_Init>
}
 8002210:	bf00      	nop
 8002212:	3758      	adds	r7, #88	; 0x58
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40004400 	.word	0x40004400

0800221c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b090      	sub	sp, #64	; 0x40
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002224:	f107 0308 	add.w	r3, r7, #8
 8002228:	2238      	movs	r2, #56	; 0x38
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f00a fda9 	bl	800cd84 <memset>
  if(hrtc->Instance==RTC)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <HAL_RTC_MspInit+0x54>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d115      	bne.n	8002268 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800223c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002240:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fe47 	bl	8004ee0 <HAL_RCCEx_PeriphCLKConfig>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002258:	f7ff fc0e 	bl	8001a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800225c:	f7ff fdac 	bl	8001db8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002260:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002264:	f7ff fdd0 	bl	8001e08 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3740      	adds	r7, #64	; 0x40
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40002800 	.word	0x40002800

08002274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b096      	sub	sp, #88	; 0x58
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	2238      	movs	r2, #56	; 0x38
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00a fd75 	bl	800cd84 <memset>
  if(hspi->Instance==SPI2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_SPI_MspInit+0x88>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d126      	bne.n	80022f2 <HAL_SPI_MspInit+0x7e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80022a4:	2310      	movs	r3, #16
 80022a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80022a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 fe14 	bl	8004ee0 <HAL_RCCEx_PeriphCLKConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80022be:	f7ff fbdb 	bl	8001a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022c6:	f7ff fd9f 	bl	8001e08 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	2002      	movs	r0, #2
 80022cc:	f7ff fd84 	bl	8001dd8 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 80022d0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022e2:	2305      	movs	r3, #5
 80022e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022ea:	4619      	mov	r1, r3
 80022ec:	4804      	ldr	r0, [pc, #16]	; (8002300 <HAL_SPI_MspInit+0x8c>)
 80022ee:	f001 fa6b 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022f2:	bf00      	nop
 80022f4:	3758      	adds	r7, #88	; 0x58
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40003800 	.word	0x40003800
 8002300:	48000400 	.word	0x48000400

08002304 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff fdc3 	bl	8001e98 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	2032      	movs	r0, #50	; 0x32
 8002318:	f000 fe9f 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800231c:	2032      	movs	r0, #50	; 0x32
 800231e:	f000 feb6 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a05      	ldr	r2, [pc, #20]	; (8002350 <HAL_TIM_Base_MspInit+0x24>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d103      	bne.n	8002346 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800233e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002342:	f7ff fd91 	bl	8001e68 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40012c00 	.word	0x40012c00

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <NMI_Handler+0x4>

0800235a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <MemManage_Handler+0x4>

08002366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <UsageFault_Handler+0x4>

08002372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239a:	f000 f9a7 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <DMA1_Channel1_IRQHandler+0x10>)
 80023aa:	f001 f86f 	bl	800348c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200003cc 	.word	0x200003cc

080023b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <DMA1_Channel2_IRQHandler+0x10>)
 80023be:	f001 f865 	bl	800348c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000042c 	.word	0x2000042c

080023cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <DMA1_Channel3_IRQHandler+0x10>)
 80023d2:	f001 f85b 	bl	800348c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	2000030c 	.word	0x2000030c

080023e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <DMA1_Channel4_IRQHandler+0x10>)
 80023e6:	f001 f851 	bl	800348c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000036c 	.word	0x2000036c

080023f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <USART1_IRQHandler+0x10>)
 80023fa:	f005 fc1f 	bl	8007c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200001e4 	.word	0x200001e4

08002408 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <LPUART1_IRQHandler+0x10>)
 800240e:	f005 fc15 	bl	8007c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000150 	.word	0x20000150

0800241c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <SUBGHZ_Radio_IRQHandler+0x10>)
 8002422:	f004 fda7 	bl	8006f74 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000528 	.word	0x20000528

08002430 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_GetTick+0x24>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800244e:	f000 f892 	bl	8002576 <TIMER_IF_GetTimerValue>
 8002452:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002454:	687b      	ldr	r3, [r7, #4]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000063c 	.word	0x2000063c

08002464 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f8af 	bl	80025d2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <_sbrk+0x5c>)
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <_sbrk+0x60>)
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002490:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <_sbrk+0x64>)
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <_sbrk+0x68>)
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d207      	bcs.n	80024bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ac:	f00a fc72 	bl	800cd94 <__errno>
 80024b0:	4603      	mov	r3, r0
 80024b2:	220c      	movs	r2, #12
 80024b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ba:	e009      	b.n	80024d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <_sbrk+0x64>)
 80024cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20010000 	.word	0x20010000
 80024dc:	00000400 	.word	0x00000400
 80024e0:	20000640 	.word	0x20000640
 80024e4:	20000958 	.word	0x20000958

080024e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80024fe:	79fb      	ldrb	r3, [r7, #7]
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800250a:	b480      	push	{r7}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8002516:	7bfb      	ldrb	r3, [r7, #15]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 800252c:	79fb      	ldrb	r3, [r7, #7]
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 800253c:	4b02      	ldr	r3, [pc, #8]	; (8002548 <TIMER_IF_SetTimerContext+0x10>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	20000644 	.word	0x20000644

0800254c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002550:	4b02      	ldr	r3, [pc, #8]	; (800255c <TIMER_IF_GetTimerContext+0x10>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	20000644 	.word	0x20000644

08002560 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 800256a:	687b      	ldr	r3, [r7, #4]
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8002596:	687b      	ldr	r3, [r7, #4]
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80025ae:	68fb      	ldr	r3, [r7, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025e8:	f7ff ff7e 	bl	80024e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ee:	490d      	ldr	r1, [pc, #52]	; (8002624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <LoopForever+0xe>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002604:	4c0a      	ldr	r4, [pc, #40]	; (8002630 <LoopForever+0x16>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002612:	f00a fbc5 	bl	800cda0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002616:	f7fe fd8d 	bl	8001134 <main>

0800261a <LoopForever>:

LoopForever:
    b LoopForever
 800261a:	e7fe      	b.n	800261a <LoopForever>
  ldr   r0, =_estack
 800261c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002628:	0800df6c 	.word	0x0800df6c
  ldr r2, =_sbss
 800262c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002630:	20000954 	.word	0x20000954

08002634 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC_IRQHandler>
	...

08002638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002642:	2003      	movs	r0, #3
 8002644:	f000 fcfe 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002648:	f002 fa6c 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 800264c:	4603      	mov	r3, r0
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_Init+0x3c>)
 8002650:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002652:	2000      	movs	r0, #0
 8002654:	f000 f810 	bl	8002678 <HAL_InitTick>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	71fb      	strb	r3, [r7, #7]
 8002662:	e001      	b.n	8002668 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002664:	f7ff fc30 	bl	8001ec8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002668:	79fb      	ldrb	r3, [r7, #7]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000000c 	.word	0x2000000c

08002678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <HAL_InitTick+0x6c>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d024      	beq.n	80026d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800268c:	f002 fa4a 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_InitTick+0x6c>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4619      	mov	r1, r3
 8002698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269c:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fd00 	bl	80030aa <HAL_SYSTICK_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10f      	bne.n	80026d0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b0f      	cmp	r3, #15
 80026b4:	d809      	bhi.n	80026ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b6:	2200      	movs	r2, #0
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026be:	f000 fccc 	bl	800305a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_InitTick+0x70>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e007      	b.n	80026da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e004      	b.n	80026da <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e001      	b.n	80026da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000014 	.word	0x20000014
 80026e8:	20000010 	.word	0x20000010

080026ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_IncTick+0x1c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_IncTick+0x20>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a03      	ldr	r2, [pc, #12]	; (800270c <HAL_IncTick+0x20>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	20000014 	.word	0x20000014
 800270c:	20000648 	.word	0x20000648

08002710 <LL_ADC_SetCommonPathInternalCh>:
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	601a      	str	r2, [r3, #0]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <LL_ADC_GetCommonPathInternalCh>:
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <LL_ADC_SetSamplingTimeCommonChannels>:
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2107      	movs	r1, #7
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	401a      	ands	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	431a      	orrs	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	615a      	str	r2, [r3, #20]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <LL_ADC_GetSamplingTimeCommonChannels>:
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2107      	movs	r1, #7
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <LL_ADC_REG_SetSequencerRanks>:
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	210f      	movs	r1, #15
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	401a      	ands	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 010f 	and.w	r1, r3, #15
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_REG_SetSequencerChAdd>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <LL_ADC_REG_SetSequencerChRem>:
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <LL_ADC_SetChannelSamplingTime>:
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	43db      	mvns	r3, r3
 800285c:	401a      	ands	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	0219      	lsls	r1, r3, #8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	400b      	ands	r3, r1
 8002866:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800286a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800286e:	431a      	orrs	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	615a      	str	r2, [r3, #20]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <LL_ADC_EnableInternalRegulator>:
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800288e:	f023 0317 	bic.w	r3, r3, #23
 8002892:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	609a      	str	r2, [r3, #8]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_IsInternalRegulatorEnabled>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028b8:	d101      	bne.n	80028be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <LL_ADC_IsEnabled>:
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <LL_ADC_IsEnabled+0x18>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <LL_ADC_IsEnabled+0x1a>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <LL_ADC_REG_IsConversionOngoing>:
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d101      	bne.n	8002906 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
	...

08002914 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002920:	2300      	movs	r3, #0
 8002922:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e17e      	b.n	8002c34 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff fac5 	bl	8001ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ffa1 	bl	80028a4 <LL_ADC_IsInternalRegulatorEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d115      	bne.n	8002994 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff86 	bl	800287e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002972:	4b9e      	ldr	r3, [pc, #632]	; (8002bec <HAL_ADC_Init+0x2d8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	099b      	lsrs	r3, r3, #6
 8002978:	4a9d      	ldr	r2, [pc, #628]	; (8002bf0 <HAL_ADC_Init+0x2dc>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	3301      	adds	r3, #1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002986:	e002      	b.n	800298e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3b01      	subs	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f9      	bne.n	8002988 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff83 	bl	80028a4 <LL_ADC_IsInternalRegulatorEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10d      	bne.n	80029c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f043 0210 	orr.w	r2, r3, #16
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff92 	bl	80028ee <LL_ADC_REG_IsConversionOngoing>
 80029ca:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 8124 	bne.w	8002c22 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f040 8120 	bne.w	8002c22 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029ea:	f043 0202 	orr.w	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff67 	bl	80028ca <LL_ADC_IsEnabled>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 80a7 	bne.w	8002b52 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7e1b      	ldrb	r3, [r3, #24]
 8002a0c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a0e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7e5b      	ldrb	r3, [r3, #25]
 8002a14:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a16:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7e9b      	ldrb	r3, [r3, #26]
 8002a1c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a1e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a24:	2a00      	cmp	r2, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_ADC_Init+0x11a>
 8002a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a2c:	e000      	b.n	8002a30 <HAL_ADC_Init+0x11c>
 8002a2e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a30:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a36:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da04      	bge.n	8002a4a <HAL_ADC_Init+0x136>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a48:	e001      	b.n	8002a4e <HAL_ADC_Init+0x13a>
 8002a4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002a4e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a56:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a58:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d114      	bne.n	8002a94 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7e9b      	ldrb	r3, [r3, #26]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d104      	bne.n	8002a7c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	e00b      	b.n	8002a94 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002aba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	69b9      	ldr	r1, [r7, #24]
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d111      	bne.n	8002b0a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002af2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002af8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002afe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <HAL_ADC_Init+0x2e0>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	6979      	ldr	r1, [r7, #20]
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002b26:	d014      	beq.n	8002b52 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d00f      	beq.n	8002b52 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b3a:	d00a      	beq.n	8002b52 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002b3c:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <HAL_ADC_Init+0x2e4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b4c:	492a      	ldr	r1, [pc, #168]	; (8002bf8 <HAL_ADC_Init+0x2e4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f7ff fdf6 	bl	800274e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4923      	ldr	r1, [pc, #140]	; (8002bfc <HAL_ADC_Init+0x2e8>)
 8002b6e:	f7ff fdee 	bl	800274e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d108      	bne.n	8002b8c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f062 020f 	orn	r2, r2, #15
 8002b88:	629a      	str	r2, [r3, #40]	; 0x28
 8002b8a:	e017      	b.n	8002bbc <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b94:	d112      	bne.n	8002bbc <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f003 031c 	and.w	r3, r3, #28
 8002ba8:	f06f 020f 	mvn.w	r2, #15
 8002bac:	fa02 f103 	lsl.w	r1, r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fde1 	bl	800278a <LL_ADC_GetSamplingTimeCommonChannels>
 8002bc8:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d116      	bne.n	8002c00 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f023 0303 	bic.w	r3, r3, #3
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002be8:	e023      	b.n	8002c32 <HAL_ADC_Init+0x31e>
 8002bea:	bf00      	nop
 8002bec:	2000000c 	.word	0x2000000c
 8002bf0:	053e2d63 	.word	0x053e2d63
 8002bf4:	1ffffc02 	.word	0x1ffffc02
 8002bf8:	40012708 	.word	0x40012708
 8002bfc:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	f023 0312 	bic.w	r3, r3, #18
 8002c08:	f043 0210 	orr.w	r2, r3, #16
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c20:	e007      	b.n	8002c32 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	f043 0210 	orr.w	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002c32:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x28>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e110      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x24a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fe3c 	bl	80028ee <LL_ADC_REG_IsConversionOngoing>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 80f7 	bne.w	8002e6c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	f000 80b1 	beq.w	8002dea <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c90:	d004      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c96:	4a7e      	ldr	r2, [pc, #504]	; (8002e90 <HAL_ADC_ConfigChannel+0x254>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d108      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f7ff fda8 	bl	80027fc <LL_ADC_REG_SetSequencerChAdd>
 8002cac:	e041      	b.n	8002d32 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	210f      	movs	r1, #15
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0xa0>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0e9b      	lsrs	r3, r3, #26
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	e011      	b.n	8002d00 <HAL_ADC_ConfigChannel+0xc4>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e003      	b.n	8002d00 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	6839      	ldr	r1, [r7, #0]
 8002d02:	6849      	ldr	r1, [r1, #4]
 8002d04:	f001 011f 	and.w	r1, r1, #31
 8002d08:	408b      	lsls	r3, r1
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d808      	bhi.n	8002d32 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f7ff fd44 	bl	80027ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f7ff fd81 	bl	8002846 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f280 8097 	bge.w	8002e7c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d4e:	4851      	ldr	r0, [pc, #324]	; (8002e94 <HAL_ADC_ConfigChannel+0x258>)
 8002d50:	f7ff fcf0 	bl	8002734 <LL_ADC_GetCommonPathInternalCh>
 8002d54:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a4f      	ldr	r2, [pc, #316]	; (8002e98 <HAL_ADC_ConfigChannel+0x25c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d120      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11b      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d70:	4619      	mov	r1, r3
 8002d72:	4848      	ldr	r0, [pc, #288]	; (8002e94 <HAL_ADC_ConfigChannel+0x258>)
 8002d74:	f7ff fccc 	bl	8002710 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d78:	4b48      	ldr	r3, [pc, #288]	; (8002e9c <HAL_ADC_ConfigChannel+0x260>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	4a48      	ldr	r2, [pc, #288]	; (8002ea0 <HAL_ADC_ConfigChannel+0x264>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d92:	e002      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002da0:	e06c      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a3f      	ldr	r2, [pc, #252]	; (8002ea4 <HAL_ADC_ConfigChannel+0x268>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d10c      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d107      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4835      	ldr	r0, [pc, #212]	; (8002e94 <HAL_ADC_ConfigChannel+0x258>)
 8002dc0:	f7ff fca6 	bl	8002710 <LL_ADC_SetCommonPathInternalCh>
 8002dc4:	e05a      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a37      	ldr	r2, [pc, #220]	; (8002ea8 <HAL_ADC_ConfigChannel+0x26c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d155      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d150      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002de0:	4619      	mov	r1, r3
 8002de2:	482c      	ldr	r0, [pc, #176]	; (8002e94 <HAL_ADC_ConfigChannel+0x258>)
 8002de4:	f7ff fc94 	bl	8002710 <LL_ADC_SetCommonPathInternalCh>
 8002de8:	e048      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002df2:	d004      	beq.n	8002dfe <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002df8:	4a25      	ldr	r2, [pc, #148]	; (8002e90 <HAL_ADC_ConfigChannel+0x254>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d107      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f7ff fd09 	bl	8002820 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da32      	bge.n	8002e7c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e16:	481f      	ldr	r0, [pc, #124]	; (8002e94 <HAL_ADC_ConfigChannel+0x258>)
 8002e18:	f7ff fc8c 	bl	8002734 <LL_ADC_GetCommonPathInternalCh>
 8002e1c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <HAL_ADC_ConfigChannel+0x25c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d107      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4818      	ldr	r0, [pc, #96]	; (8002e94 <HAL_ADC_ConfigChannel+0x258>)
 8002e32:	f7ff fc6d 	bl	8002710 <LL_ADC_SetCommonPathInternalCh>
 8002e36:	e021      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <HAL_ADC_ConfigChannel+0x268>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d107      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4812      	ldr	r0, [pc, #72]	; (8002e94 <HAL_ADC_ConfigChannel+0x258>)
 8002e4c:	f7ff fc60 	bl	8002710 <LL_ADC_SetCommonPathInternalCh>
 8002e50:	e014      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <HAL_ADC_ConfigChannel+0x26c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d10f      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e62:	4619      	mov	r1, r3
 8002e64:	480b      	ldr	r0, [pc, #44]	; (8002e94 <HAL_ADC_ConfigChannel+0x258>)
 8002e66:	f7ff fc53 	bl	8002710 <LL_ADC_SetCommonPathInternalCh>
 8002e6a:	e007      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f043 0220 	orr.w	r2, r3, #32
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	80000004 	.word	0x80000004
 8002e94:	40012708 	.word	0x40012708
 8002e98:	b0001000 	.word	0xb0001000
 8002e9c:	2000000c 	.word	0x2000000c
 8002ea0:	053e2d63 	.word	0x053e2d63
 8002ea4:	b8004000 	.word	0xb8004000
 8002ea8:	b4002000 	.word	0xb4002000

08002eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ede:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	60d3      	str	r3, [r2, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <__NVIC_GetPriorityGrouping+0x18>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 0307 	and.w	r3, r3, #7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db0b      	blt.n	8002f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4906      	ldr	r1, [pc, #24]	; (8002f44 <__NVIC_EnableIRQ+0x34>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2001      	movs	r0, #1
 8002f32:	fa00 f202 	lsl.w	r2, r0, r2
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	; (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003024:	f7ff ff90 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff2d 	bl	8002eac <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003068:	f7ff ff44 	bl	8002ef4 <__NVIC_GetPriorityGrouping>
 800306c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	6978      	ldr	r0, [r7, #20]
 8003074:	f7ff ff92 	bl	8002f9c <NVIC_EncodePriority>
 8003078:	4602      	mov	r2, r0
 800307a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff61 	bl	8002f48 <__NVIC_SetPriority>
}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff37 	bl	8002f10 <__NVIC_EnableIRQ>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ffa4 	bl	8003000 <SysTick_Config>
 80030b8:	4603      	mov	r3, r0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e08e      	b.n	80031f4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_DMA_Init+0x138>)
 80030de:	429a      	cmp	r2, r3
 80030e0:	d80f      	bhi.n	8003102 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b45      	ldr	r3, [pc, #276]	; (8003200 <HAL_DMA_Init+0x13c>)
 80030ea:	4413      	add	r3, r2
 80030ec:	4a45      	ldr	r2, [pc, #276]	; (8003204 <HAL_DMA_Init+0x140>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	009a      	lsls	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a42      	ldr	r2, [pc, #264]	; (8003208 <HAL_DMA_Init+0x144>)
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003100:	e00e      	b.n	8003120 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	4b40      	ldr	r3, [pc, #256]	; (800320c <HAL_DMA_Init+0x148>)
 800310a:	4413      	add	r3, r2
 800310c:	4a3d      	ldr	r2, [pc, #244]	; (8003204 <HAL_DMA_Init+0x140>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	009a      	lsls	r2, r3, #2
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a3c      	ldr	r2, [pc, #240]	; (8003210 <HAL_DMA_Init+0x14c>)
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fabc 	bl	80036f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003180:	d102      	bne.n	8003188 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003190:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003194:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800319e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_DMA_Init+0x106>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d80c      	bhi.n	80031ca <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fae5 	bl	8003780 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	e008      	b.n	80031dc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40020407 	.word	0x40020407
 8003200:	bffdfff8 	.word	0xbffdfff8
 8003204:	cccccccd 	.word	0xcccccccd
 8003208:	40020000 	.word	0x40020000
 800320c:	bffdfbf8 	.word	0xbffdfbf8
 8003210:	40020400 	.word	0x40020400

08003214 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_DMA_Start_IT+0x20>
 8003230:	2302      	movs	r3, #2
 8003232:	e069      	b.n	8003308 <HAL_DMA_Start_IT+0xf4>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d155      	bne.n	80032f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fa02 	bl	8003676 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 020e 	orr.w	r2, r2, #14
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e00f      	b.n	80032ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0204 	bic.w	r2, r2, #4
 800329a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 020a 	orr.w	r2, r2, #10
 80032aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e008      	b.n	8003306 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003306:	7dfb      	ldrb	r3, [r7, #23]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e04f      	b.n	80033c2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d008      	beq.n	8003340 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2204      	movs	r2, #4
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e040      	b.n	80033c2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 020e 	bic.w	r2, r2, #14
 800334e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800335e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f003 021c 	and.w	r2, r3, #28
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	2101      	movs	r1, #1
 800337e:	fa01 f202 	lsl.w	r2, r1, r2
 8003382:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800338c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00c      	beq.n	80033b0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d005      	beq.n	80033f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2204      	movs	r2, #4
 80033e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	e047      	b.n	8003480 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 020e 	bic.w	r2, r2, #14
 80033fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800341e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	f003 021c 	and.w	r2, r3, #28
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800343c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003454:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800345e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
    }
  }
  return status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f003 031c 	and.w	r3, r3, #28
 80034ac:	2204      	movs	r2, #4
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d027      	beq.n	8003508 <HAL_DMA_IRQHandler+0x7c>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d022      	beq.n	8003508 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0204 	bic.w	r2, r2, #4
 80034de:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f003 021c 	and.w	r2, r3, #28
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2104      	movs	r1, #4
 80034ee:	fa01 f202 	lsl.w	r2, r1, r2
 80034f2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8081 	beq.w	8003600 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003506:	e07b      	b.n	8003600 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f003 031c 	and.w	r3, r3, #28
 8003510:	2202      	movs	r2, #2
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d03d      	beq.n	8003598 <HAL_DMA_IRQHandler+0x10c>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d038      	beq.n	8003598 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 020a 	bic.w	r2, r2, #10
 8003542:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	4b2e      	ldr	r3, [pc, #184]	; (800360c <HAL_DMA_IRQHandler+0x180>)
 8003554:	429a      	cmp	r2, r3
 8003556:	d909      	bls.n	800356c <HAL_DMA_IRQHandler+0xe0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f003 031c 	and.w	r3, r3, #28
 8003560:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <HAL_DMA_IRQHandler+0x184>)
 8003562:	2102      	movs	r1, #2
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	6053      	str	r3, [r2, #4]
 800356a:	e008      	b.n	800357e <HAL_DMA_IRQHandler+0xf2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f003 031c 	and.w	r3, r3, #28
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <HAL_DMA_IRQHandler+0x188>)
 8003576:	2102      	movs	r1, #2
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d038      	beq.n	8003600 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003596:	e033      	b.n	8003600 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	f003 031c 	and.w	r3, r3, #28
 80035a0:	2208      	movs	r2, #8
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d02a      	beq.n	8003602 <HAL_DMA_IRQHandler+0x176>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d025      	beq.n	8003602 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 020e 	bic.w	r2, r2, #14
 80035c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f003 021c 	and.w	r2, r3, #28
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d004      	beq.n	8003602 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003600:	bf00      	nop
 8003602:	bf00      	nop
}
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40020080 	.word	0x40020080
 8003610:	40020400 	.word	0x40020400
 8003614:	40020000 	.word	0x40020000

08003618 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d103      	bne.n	8003634 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	72fb      	strb	r3, [r7, #11]
    return status;
 8003630:	7afb      	ldrb	r3, [r7, #11]
 8003632:	e01b      	b.n	800366c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	e003      	b.n	8003662 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003660:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	601a      	str	r2, [r3, #0]

  return status;
 800366a:	7afb      	ldrb	r3, [r7, #11]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800368c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800369e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	f003 021c 	and.w	r2, r3, #28
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f202 	lsl.w	r2, r1, r2
 80036b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d108      	bne.n	80036d6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036d4:	e007      	b.n	80036e6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	60da      	str	r2, [r3, #12]
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003700:	429a      	cmp	r2, r3
 8003702:	d813      	bhi.n	800372c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003710:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	3b08      	subs	r3, #8
 8003720:	4a14      	ldr	r2, [pc, #80]	; (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	e011      	b.n	8003750 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003736:	4413      	add	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	3b08      	subs	r3, #8
 8003744:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	3307      	adds	r3, #7
 800374e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003754:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	2201      	movs	r2, #1
 800375e:	409a      	lsls	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40020407 	.word	0x40020407
 8003774:	cccccccd 	.word	0xcccccccd
 8003778:	4002081c 	.word	0x4002081c
 800377c:	40020880 	.word	0x40020880

08003780 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003790:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	461a      	mov	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2201      	movs	r2, #1
 80037b0:	409a      	lsls	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	1000823f 	.word	0x1000823f
 80037c4:	40020940 	.word	0x40020940

080037c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d6:	e140      	b.n	8003a5a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8132 	beq.w	8003a54 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d005      	beq.n	8003808 <HAL_GPIO_Init+0x40>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d130      	bne.n	800386a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800383e:	2201      	movs	r2, #1
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 0201 	and.w	r2, r3, #1
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b03      	cmp	r3, #3
 8003874:	d017      	beq.n	80038a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	2203      	movs	r2, #3
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d123      	bne.n	80038fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	08da      	lsrs	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3208      	adds	r2, #8
 80038ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	6939      	ldr	r1, [r7, #16]
 80038f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0203 	and.w	r2, r3, #3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 808c 	beq.w	8003a54 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800393c:	4a4e      	ldr	r2, [pc, #312]	; (8003a78 <HAL_GPIO_Init+0x2b0>)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	3302      	adds	r3, #2
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	2207      	movs	r2, #7
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003966:	d00d      	beq.n	8003984 <HAL_GPIO_Init+0x1bc>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a44      	ldr	r2, [pc, #272]	; (8003a7c <HAL_GPIO_Init+0x2b4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <HAL_GPIO_Init+0x1b8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a43      	ldr	r2, [pc, #268]	; (8003a80 <HAL_GPIO_Init+0x2b8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_GPIO_Init+0x1b4>
 8003978:	2302      	movs	r3, #2
 800397a:	e004      	b.n	8003986 <HAL_GPIO_Init+0x1be>
 800397c:	2307      	movs	r3, #7
 800397e:	e002      	b.n	8003986 <HAL_GPIO_Init+0x1be>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_GPIO_Init+0x1be>
 8003984:	2300      	movs	r3, #0
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	f002 0203 	and.w	r2, r2, #3
 800398c:	0092      	lsls	r2, r2, #2
 800398e:	4093      	lsls	r3, r2
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003996:	4938      	ldr	r1, [pc, #224]	; (8003a78 <HAL_GPIO_Init+0x2b0>)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	3302      	adds	r3, #2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039a4:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <HAL_GPIO_Init+0x2bc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039c8:	4a2e      	ldr	r2, [pc, #184]	; (8003a84 <HAL_GPIO_Init+0x2bc>)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039ce:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <HAL_GPIO_Init+0x2bc>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039f2:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <HAL_GPIO_Init+0x2bc>)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80039f8:	4b22      	ldr	r3, [pc, #136]	; (8003a84 <HAL_GPIO_Init+0x2bc>)
 80039fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003a1e:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <HAL_GPIO_Init+0x2bc>)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_GPIO_Init+0x2bc>)
 8003a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003a4c:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <HAL_GPIO_Init+0x2bc>)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3301      	adds	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f47f aeb7 	bne.w	80037d8 <HAL_GPIO_Init+0x10>
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	48000400 	.word	0x48000400
 8003a80:	48000800 	.word	0x48000800
 8003a84:	58000800 	.word	0x58000800

08003a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	807b      	strh	r3, [r7, #2]
 8003a94:	4613      	mov	r3, r2
 8003a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a98:	787b      	ldrb	r3, [r7, #1]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aa4:	e002      	b.n	8003aac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a03      	ldr	r2, [pc, #12]	; (8003ad0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	58000400 	.word	0x58000400

08003ad4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_PWREx_GetVoltageRange+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	58000400 	.word	0x58000400

08003aec <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003afc:	d101      	bne.n	8003b02 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	58000400 	.word	0x58000400

08003b10 <LL_RCC_HSE_EnableTcxo>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <LL_RCC_HSE_DisableTcxo>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b3e:	6013      	str	r3, [r2, #0]
}
 8003b40:	bf00      	nop
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5a:	d101      	bne.n	8003b60 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr

08003b6a <LL_RCC_HSE_Enable>:
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <LL_RCC_HSE_Disable>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <LL_RCC_HSE_IsReady>:
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb4:	d101      	bne.n	8003bba <LL_RCC_HSE_IsReady+0x18>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <LL_RCC_HSE_IsReady+0x1a>
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <LL_RCC_HSI_Enable>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd6:	6013      	str	r3, [r2, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <LL_RCC_HSI_Disable>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <LL_RCC_HSI_IsReady>:
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d101      	bne.n	8003c14 <LL_RCC_HSI_IsReady+0x18>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <LL_RCC_HSI_IsReady+0x1a>
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <LL_RCC_HSI_SetCalibTrimming>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	061b      	lsls	r3, r3, #24
 8003c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <LL_RCC_LSE_IsReady>:
{
 8003c46:	b480      	push	{r7}
 8003c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d101      	bne.n	8003c5e <LL_RCC_LSE_IsReady+0x18>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <LL_RCC_LSE_IsReady+0x1a>
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <LL_RCC_LSI_Enable>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <LL_RCC_LSI_Disable>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <LL_RCC_LSI_IsReady>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d101      	bne.n	8003cc0 <LL_RCC_LSI_IsReady+0x18>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <LL_RCC_LSI_IsReady+0x1a>
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <LL_RCC_MSI_Enable>:
{
 8003cca:	b480      	push	{r7}
 8003ccc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6013      	str	r3, [r2, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <LL_RCC_MSI_Disable>:
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	6013      	str	r3, [r2, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <LL_RCC_MSI_IsReady>:
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d101      	bne.n	8003d18 <LL_RCC_MSI_IsReady+0x16>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <LL_RCC_MSI_IsReady+0x18>
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003d22:	b480      	push	{r7}
 8003d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d101      	bne.n	8003d38 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <LL_RCC_MSI_GetRange>:
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	604b      	str	r3, [r1, #4]
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <LL_RCC_SetSysClkSource>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f023 0203 	bic.w	r2, r3, #3
 8003daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	608b      	str	r3, [r1, #8]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <LL_RCC_GetSysClkSource>:
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 030c 	and.w	r3, r3, #12
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <LL_RCC_SetAHBPrescaler>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	608b      	str	r3, [r1, #8]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr

08003dfa <LL_C2_RCC_SetAHBPrescaler>:
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <LL_RCC_SetAHB3Prescaler>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e34:	f023 020f 	bic.w	r2, r3, #15
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	091b      	lsrs	r3, r3, #4
 8003e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <LL_RCC_SetAPB1Prescaler>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	608b      	str	r3, [r1, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr

08003e76 <LL_RCC_SetAPB2Prescaler>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <LL_RCC_GetAHBPrescaler>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <LL_RCC_GetAHB3Prescaler>:
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <LL_RCC_GetAPB1Prescaler>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_GetAPB2Prescaler>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f26:	6013      	str	r3, [r2, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f42:	d101      	bne.n	8003f48 <LL_RCC_PLL_IsReady+0x18>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <LL_RCC_PLL_IsReady+0x1a>
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	0a1b      	lsrs	r3, r3, #8
 8003f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbe:	d101      	bne.n	8003fc4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe2:	d101      	bne.n	8003fe8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004006:	d101      	bne.n	800400c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004028:	d101      	bne.n	800402e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004046:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800404a:	d101      	bne.n	8004050 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
	...

0800405c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e36f      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406e:	f7ff fea6 	bl	8003dbe <LL_RCC_GetSysClkSource>
 8004072:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004074:	f7ff ff8f 	bl	8003f96 <LL_RCC_PLL_GetMainSource>
 8004078:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80c4 	beq.w	8004210 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_RCC_OscConfig+0x3e>
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2b0c      	cmp	r3, #12
 8004092:	d176      	bne.n	8004182 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d173      	bne.n	8004182 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e353      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_OscConfig+0x68>
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c2:	e006      	b.n	80040d2 <HAL_RCC_OscConfig+0x76>
 80040c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d222      	bcs.n	800411c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fd5a 	bl	8004b94 <RCC_SetFlashLatencyFromMSIRange>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e331      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f4:	f043 0308 	orr.w	r3, r3, #8
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fe2b 	bl	8003d70 <LL_RCC_MSI_SetCalibTrimming>
 800411a:	e021      	b.n	8004160 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800411c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004126:	f043 0308 	orr.w	r3, r3, #8
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fe12 	bl	8003d70 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fd1f 	bl	8004b94 <RCC_SetFlashLatencyFromMSIRange>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e2f6      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004160:	f000 fce0 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004164:	4603      	mov	r3, r0
 8004166:	4aa7      	ldr	r2, [pc, #668]	; (8004404 <HAL_RCC_OscConfig+0x3a8>)
 8004168:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800416a:	4ba7      	ldr	r3, [pc, #668]	; (8004408 <HAL_RCC_OscConfig+0x3ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fa82 	bl	8002678 <HAL_InitTick>
 8004174:	4603      	mov	r3, r0
 8004176:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004178:	7cfb      	ldrb	r3, [r7, #19]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d047      	beq.n	800420e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800417e:	7cfb      	ldrb	r3, [r7, #19]
 8004180:	e2e5      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d02c      	beq.n	80041e4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800418a:	f7ff fd9e 	bl	8003cca <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800418e:	f7fe f955 	bl	800243c <HAL_GetTick>
 8004192:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004196:	f7fe f951 	bl	800243c <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e2d2      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80041a8:	f7ff fdab 	bl	8003d02 <LL_RCC_MSI_IsReady>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f1      	beq.n	8004196 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041bc:	f043 0308 	orr.w	r3, r3, #8
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d4:	4313      	orrs	r3, r2
 80041d6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fdc7 	bl	8003d70 <LL_RCC_MSI_SetCalibTrimming>
 80041e2:	e015      	b.n	8004210 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041e4:	f7ff fd7f 	bl	8003ce6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041e8:	f7fe f928 	bl	800243c <HAL_GetTick>
 80041ec:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f0:	f7fe f924 	bl	800243c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e2a5      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004202:	f7ff fd7e 	bl	8003d02 <LL_RCC_MSI_IsReady>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f1      	bne.n	80041f0 <HAL_RCC_OscConfig+0x194>
 800420c:	e000      	b.n	8004210 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800420e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d058      	beq.n	80042ce <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b08      	cmp	r3, #8
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x1d2>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b0c      	cmp	r3, #12
 8004226:	d108      	bne.n	800423a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2b03      	cmp	r3, #3
 800422c:	d105      	bne.n	800423a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d14b      	bne.n	80042ce <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e289      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004258:	d102      	bne.n	8004260 <HAL_RCC_OscConfig+0x204>
 800425a:	f7ff fc86 	bl	8003b6a <LL_RCC_HSE_Enable>
 800425e:	e00d      	b.n	800427c <HAL_RCC_OscConfig+0x220>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004268:	d104      	bne.n	8004274 <HAL_RCC_OscConfig+0x218>
 800426a:	f7ff fc51 	bl	8003b10 <LL_RCC_HSE_EnableTcxo>
 800426e:	f7ff fc7c 	bl	8003b6a <LL_RCC_HSE_Enable>
 8004272:	e003      	b.n	800427c <HAL_RCC_OscConfig+0x220>
 8004274:	f7ff fc87 	bl	8003b86 <LL_RCC_HSE_Disable>
 8004278:	f7ff fc58 	bl	8003b2c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d012      	beq.n	80042aa <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fe f8da 	bl	800243c <HAL_GetTick>
 8004288:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428c:	f7fe f8d6 	bl	800243c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e257      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800429e:	f7ff fc80 	bl	8003ba2 <LL_RCC_HSE_IsReady>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f1      	beq.n	800428c <HAL_RCC_OscConfig+0x230>
 80042a8:	e011      	b.n	80042ce <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042aa:	f7fe f8c7 	bl	800243c <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b2:	f7fe f8c3 	bl	800243c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b64      	cmp	r3, #100	; 0x64
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e244      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80042c4:	f7ff fc6d 	bl	8003ba2 <LL_RCC_HSE_IsReady>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f1      	bne.n	80042b2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d046      	beq.n	8004368 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d005      	beq.n	80042ec <HAL_RCC_OscConfig+0x290>
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b0c      	cmp	r3, #12
 80042e4:	d10e      	bne.n	8004304 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d10b      	bne.n	8004304 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e22a      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fc8e 	bl	8003c1e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004302:	e031      	b.n	8004368 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d019      	beq.n	8004340 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800430c:	f7ff fc5a 	bl	8003bc4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe f894 	bl	800243c <HAL_GetTick>
 8004314:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004318:	f7fe f890 	bl	800243c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e211      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800432a:	f7ff fc67 	bl	8003bfc <LL_RCC_HSI_IsReady>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f1      	beq.n	8004318 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fc70 	bl	8003c1e <LL_RCC_HSI_SetCalibTrimming>
 800433e:	e013      	b.n	8004368 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004340:	f7ff fc4e 	bl	8003be0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fe f87a 	bl	800243c <HAL_GetTick>
 8004348:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434c:	f7fe f876 	bl	800243c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1f7      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800435e:	f7ff fc4d 	bl	8003bfc <LL_RCC_HSI_IsReady>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f1      	bne.n	800434c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d06e      	beq.n	8004452 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d056      	beq.n	800442a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004384:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	429a      	cmp	r2, r3
 8004392:	d031      	beq.n	80043f8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e1d0      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d013      	beq.n	80043de <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80043b6:	f7ff fc67 	bl	8003c88 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043ba:	f7fe f83f 	bl	800243c <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c2:	f7fe f83b 	bl	800243c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b11      	cmp	r3, #17
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e1bc      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80043d4:	f7ff fc68 	bl	8003ca8 <LL_RCC_LSI_IsReady>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f1      	bne.n	80043c2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80043de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e6:	f023 0210 	bic.w	r2, r3, #16
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f8:	f7ff fc36 	bl	8003c68 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fc:	f7fe f81e 	bl	800243c <HAL_GetTick>
 8004400:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004402:	e00c      	b.n	800441e <HAL_RCC_OscConfig+0x3c2>
 8004404:	2000000c 	.word	0x2000000c
 8004408:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440c:	f7fe f816 	bl	800243c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b11      	cmp	r3, #17
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e197      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800441e:	f7ff fc43 	bl	8003ca8 <LL_RCC_LSI_IsReady>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f1      	beq.n	800440c <HAL_RCC_OscConfig+0x3b0>
 8004428:	e013      	b.n	8004452 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442a:	f7ff fc2d 	bl	8003c88 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fe f805 	bl	800243c <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004436:	f7fe f801 	bl	800243c <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b11      	cmp	r3, #17
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e182      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004448:	f7ff fc2e 	bl	8003ca8 <LL_RCC_LSI_IsReady>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f1      	bne.n	8004436 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80d8 	beq.w	8004610 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004460:	f7ff fb44 	bl	8003aec <LL_PWR_IsEnabledBkUpAccess>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d113      	bne.n	8004492 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800446a:	f7ff fb25 	bl	8003ab8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446e:	f7fd ffe5 	bl	800243c <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004476:	f7fd ffe1 	bl	800243c <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e162      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004488:	f7ff fb30 	bl	8003aec <LL_PWR_IsEnabledBkUpAccess>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f1      	beq.n	8004476 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d07b      	beq.n	8004592 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b85      	cmp	r3, #133	; 0x85
 80044a0:	d003      	beq.n	80044aa <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d109      	bne.n	80044be <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044b6:	f043 0304 	orr.w	r3, r3, #4
 80044ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044be:	f7fd ffbd 	bl	800243c <HAL_GetTick>
 80044c2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7fd ffaf 	bl	800243c <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e12e      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80044f0:	f7ff fba9 	bl	8003c46 <LL_RCC_LSE_IsReady>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0ef      	beq.n	80044da <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2b81      	cmp	r3, #129	; 0x81
 8004500:	d003      	beq.n	800450a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	2b85      	cmp	r3, #133	; 0x85
 8004508:	d121      	bne.n	800454e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450a:	f7fd ff97 	bl	800243c <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800451c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004524:	e00a      	b.n	800453c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fd ff89 	bl	800243c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	; 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e108      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800453c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ec      	beq.n	8004526 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800454c:	e060      	b.n	8004610 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fd ff75 	bl	800243c <HAL_GetTick>
 8004552:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd ff67 	bl	800243c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0e6      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ec      	bne.n	800456a <HAL_RCC_OscConfig+0x50e>
 8004590:	e03e      	b.n	8004610 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004592:	f7fd ff53 	bl	800243c <HAL_GetTick>
 8004596:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045ac:	e00a      	b.n	80045c4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fd ff45 	bl	800243c <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e0c4      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ec      	bne.n	80045ae <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d4:	f7fd ff32 	bl	800243c <HAL_GetTick>
 80045d8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e6:	f023 0301 	bic.w	r3, r3, #1
 80045ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fd ff24 	bl	800243c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0a3      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004606:	f7ff fb1e 	bl	8003c46 <LL_RCC_LSE_IsReady>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ef      	bne.n	80045f0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 8099 	beq.w	800474c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2b0c      	cmp	r3, #12
 800461e:	d06c      	beq.n	80046fa <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	2b02      	cmp	r3, #2
 8004626:	d14b      	bne.n	80046c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	f7ff fc74 	bl	8003f14 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fd ff06 	bl	800243c <HAL_GetTick>
 8004630:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fd ff02 	bl	800243c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b0a      	cmp	r3, #10
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e083      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004646:	f7ff fc73 	bl	8003f30 <LL_RCC_PLL_IsReady>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f1      	bne.n	8004634 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	4b40      	ldr	r3, [pc, #256]	; (8004758 <HAL_RCC_OscConfig+0x6fc>)
 8004658:	4013      	ands	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004662:	4311      	orrs	r1, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004668:	0212      	lsls	r2, r2, #8
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004670:	4311      	orrs	r1, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004676:	4311      	orrs	r1, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800467c:	430a      	orrs	r2, r1
 800467e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004682:	4313      	orrs	r3, r2
 8004684:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004686:	f7ff fc37 	bl	8003ef8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800468a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004698:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fd fecf 	bl	800243c <HAL_GetTick>
 800469e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fd fecb 	bl	800243c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b0a      	cmp	r3, #10
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e04c      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80046b4:	f7ff fc3c 	bl	8003f30 <LL_RCC_PLL_IsReady>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f1      	beq.n	80046a2 <HAL_RCC_OscConfig+0x646>
 80046be:	e045      	b.n	800474c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c0:	f7ff fc28 	bl	8003f14 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fd feba 	bl	800243c <HAL_GetTick>
 80046c8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fd feb6 	bl	800243c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b0a      	cmp	r3, #10
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e037      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80046de:	f7ff fc27 	bl	8003f30 <LL_RCC_PLL_IsReady>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f1      	bne.n	80046cc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80046e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046f2:	4b1a      	ldr	r3, [pc, #104]	; (800475c <HAL_RCC_OscConfig+0x700>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	60cb      	str	r3, [r1, #12]
 80046f8:	e028      	b.n	800474c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e023      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f003 0203 	and.w	r2, r3, #3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	429a      	cmp	r2, r3
 800471a:	d115      	bne.n	8004748 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	429a      	cmp	r2, r3
 8004728:	d10e      	bne.n	8004748 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	429a      	cmp	r2, r3
 8004738:	d106      	bne.n	8004748 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	11c1808c 	.word	0x11c1808c
 800475c:	eefefffc 	.word	0xeefefffc

08004760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e12c      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004774:	4b98      	ldr	r3, [pc, #608]	; (80049d8 <HAL_RCC_ClockConfig+0x278>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d91b      	bls.n	80047ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b95      	ldr	r3, [pc, #596]	; (80049d8 <HAL_RCC_ClockConfig+0x278>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 0207 	bic.w	r2, r3, #7
 800478a:	4993      	ldr	r1, [pc, #588]	; (80049d8 <HAL_RCC_ClockConfig+0x278>)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004792:	f7fd fe53 	bl	800243c <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004798:	e008      	b.n	80047ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800479a:	f7fd fe4f 	bl	800243c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e110      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ac:	4b8a      	ldr	r3, [pc, #552]	; (80049d8 <HAL_RCC_ClockConfig+0x278>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d1ef      	bne.n	800479a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fb02 	bl	8003dd4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047d0:	f7fd fe34 	bl	800243c <HAL_GetTick>
 80047d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047d8:	f7fd fe30 	bl	800243c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0f1      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80047ea:	f7ff fbdf 	bl	8003fac <LL_RCC_IsActiveFlag_HPRE>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f1      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d016      	beq.n	800482e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff faf8 	bl	8003dfa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800480a:	f7fd fe17 	bl	800243c <HAL_GetTick>
 800480e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004812:	f7fd fe13 	bl	800243c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e0d4      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004824:	f7ff fbd3 	bl	8003fce <LL_RCC_IsActiveFlag_C2HPRE>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f1      	beq.n	8004812 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff faf0 	bl	8003e24 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004844:	f7fd fdfa 	bl	800243c <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800484c:	f7fd fdf6 	bl	800243c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0b7      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800485e:	f7ff fbc8 	bl	8003ff2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f1      	beq.n	800484c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d016      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fae9 	bl	8003e50 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800487e:	f7fd fddd 	bl	800243c <HAL_GetTick>
 8004882:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004886:	f7fd fdd9 	bl	800243c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e09a      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004898:	f7ff fbbd 	bl	8004016 <LL_RCC_IsActiveFlag_PPRE1>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f1      	beq.n	8004886 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d017      	beq.n	80048de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff fade 	bl	8003e76 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048ba:	f7fd fdbf 	bl	800243c <HAL_GetTick>
 80048be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048c2:	f7fd fdbb 	bl	800243c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e07c      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80048d4:	f7ff fbb0 	bl	8004038 <LL_RCC_IsActiveFlag_PPRE2>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f1      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d043      	beq.n	8004972 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d106      	bne.n	8004900 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80048f2:	f7ff f956 	bl	8003ba2 <LL_RCC_HSE_IsReady>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11e      	bne.n	800493a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e066      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d106      	bne.n	8004916 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004908:	f7ff fb12 	bl	8003f30 <LL_RCC_PLL_IsReady>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d113      	bne.n	800493a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e05b      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800491e:	f7ff f9f0 	bl	8003d02 <LL_RCC_MSI_IsReady>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d108      	bne.n	800493a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e050      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800492c:	f7ff f966 	bl	8003bfc <LL_RCC_HSI_IsReady>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e049      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fa2a 	bl	8003d98 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004944:	f7fd fd7a 	bl	800243c <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	e00a      	b.n	8004962 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494c:	f7fd fd76 	bl	800243c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	; 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e035      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	f7ff fa2c 	bl	8003dbe <LL_RCC_GetSysClkSource>
 8004966:	4602      	mov	r2, r0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	429a      	cmp	r2, r3
 8004970:	d1ec      	bne.n	800494c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004972:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_RCC_ClockConfig+0x278>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d21b      	bcs.n	80049b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_RCC_ClockConfig+0x278>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 0207 	bic.w	r2, r3, #7
 8004988:	4913      	ldr	r1, [pc, #76]	; (80049d8 <HAL_RCC_ClockConfig+0x278>)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004990:	f7fd fd54 	bl	800243c <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	e008      	b.n	80049aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004998:	f7fd fd50 	bl	800243c <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e011      	b.n	80049ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <HAL_RCC_ClockConfig+0x278>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d1ef      	bne.n	8004998 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049b8:	f000 f8b4 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 80049bc:	4603      	mov	r3, r0
 80049be:	4a07      	ldr	r2, [pc, #28]	; (80049dc <HAL_RCC_ClockConfig+0x27c>)
 80049c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <HAL_RCC_ClockConfig+0x280>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fd fe56 	bl	8002678 <HAL_InitTick>
 80049cc:	4603      	mov	r3, r0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	58004000 	.word	0x58004000
 80049dc:	2000000c 	.word	0x2000000c
 80049e0:	20000010 	.word	0x20000010

080049e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f2:	f7ff f9e4 	bl	8003dbe <LL_RCC_GetSysClkSource>
 80049f6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049f8:	f7ff facd 	bl	8003f96 <LL_RCC_PLL_GetMainSource>
 80049fc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x2c>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d139      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d136      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004a10:	f7ff f987 	bl	8003d22 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d115      	bne.n	8004a46 <HAL_RCC_GetSysClockFreq+0x62>
 8004a1a:	f7ff f982 	bl	8003d22 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_GetSysClockFreq+0x4e>
 8004a24:	f7ff f98d 	bl	8003d42 <LL_RCC_MSI_GetRange>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	e005      	b.n	8004a3e <HAL_RCC_GetSysClockFreq+0x5a>
 8004a32:	f7ff f991 	bl	8003d58 <LL_RCC_MSI_GetRangeAfterStandby>
 8004a36:	4603      	mov	r3, r0
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	4a36      	ldr	r2, [pc, #216]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a44:	e014      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x8c>
 8004a46:	f7ff f96c 	bl	8003d22 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCC_GetSysClockFreq+0x7a>
 8004a50:	f7ff f977 	bl	8003d42 <LL_RCC_MSI_GetRange>
 8004a54:	4603      	mov	r3, r0
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	e005      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x86>
 8004a5e:	f7ff f97b 	bl	8003d58 <LL_RCC_MSI_GetRangeAfterStandby>
 8004a62:	4603      	mov	r3, r0
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a70:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d115      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a7c:	e012      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d102      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e00c      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d109      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a90:	f7ff f85a 	bl	8003b48 <LL_RCC_HSE_IsEnabledDiv2>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d102      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004a9a:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	e001      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004aa0:	4b1f      	ldr	r3, [pc, #124]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004aa2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa4:	f7ff f98b 	bl	8003dbe <LL_RCC_GetSysClkSource>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d12f      	bne.n	8004b0e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004aae:	f7ff fa72 	bl	8003f96 <LL_RCC_PLL_GetMainSource>
 8004ab2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0xde>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d003      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xe4>
 8004ac0:	e00d      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004ac2:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8004ac4:	60fb      	str	r3, [r7, #12]
        break;
 8004ac6:	e00d      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ac8:	f7ff f83e 	bl	8003b48 <LL_RCC_HSE_IsEnabledDiv2>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d102      	bne.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8004ad4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ad6:	e005      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004ada:	60fb      	str	r3, [r7, #12]
        break;
 8004adc:	e002      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	60fb      	str	r3, [r7, #12]
        break;
 8004ae2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004ae4:	f7ff fa35 	bl	8003f52 <LL_RCC_PLL_GetN>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	fb03 f402 	mul.w	r4, r3, r2
 8004af0:	f7ff fa46 	bl	8003f80 <LL_RCC_PLL_GetDivider>
 8004af4:	4603      	mov	r3, r0
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	3301      	adds	r3, #1
 8004afa:	fbb4 f4f3 	udiv	r4, r4, r3
 8004afe:	f7ff fa34 	bl	8003f6a <LL_RCC_PLL_GetR>
 8004b02:	4603      	mov	r3, r0
 8004b04:	0f5b      	lsrs	r3, r3, #29
 8004b06:	3301      	adds	r3, #1
 8004b08:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b0c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b0e:	697b      	ldr	r3, [r7, #20]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd90      	pop	{r4, r7, pc}
 8004b18:	0800dd54 	.word	0x0800dd54
 8004b1c:	00f42400 	.word	0x00f42400
 8004b20:	01e84800 	.word	0x01e84800

08004b24 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b24:	b598      	push	{r3, r4, r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b28:	f7ff ff5c 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	f7ff f9b5 	bl	8003e9c <LL_RCC_GetAHBPrescaler>
 8004b32:	4603      	mov	r3, r0
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	4a03      	ldr	r2, [pc, #12]	; (8004b48 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd98      	pop	{r3, r4, r7, pc}
 8004b48:	0800dcf4 	.word	0x0800dcf4

08004b4c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b4c:	b598      	push	{r3, r4, r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b50:	f7ff ffe8 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b54:	4604      	mov	r4, r0
 8004b56:	f7ff f9b9 	bl	8003ecc <LL_RCC_GetAPB1Prescaler>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	0a1b      	lsrs	r3, r3, #8
 8004b5e:	4a03      	ldr	r2, [pc, #12]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd98      	pop	{r3, r4, r7, pc}
 8004b6c:	0800dd34 	.word	0x0800dd34

08004b70 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b70:	b598      	push	{r3, r4, r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b74:	f7ff ffd6 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b78:	4604      	mov	r4, r0
 8004b7a:	f7ff f9b2 	bl	8003ee2 <LL_RCC_GetAPB2Prescaler>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	0adb      	lsrs	r3, r3, #11
 8004b82:	4a03      	ldr	r2, [pc, #12]	; (8004b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd98      	pop	{r3, r4, r7, pc}
 8004b90:	0800dd34 	.word	0x0800dd34

08004b94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004b94:	b590      	push	{r4, r7, lr}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	4a10      	ldr	r2, [pc, #64]	; (8004be8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004baa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004bac:	f7ff f981 	bl	8003eb2 <LL_RCC_GetAHB3Prescaler>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	4a0c      	ldr	r2, [pc, #48]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	0c9c      	lsrs	r4, r3, #18
 8004bd0:	f7fe ff80 	bl	8003ad4 <HAL_PWREx_GetVoltageRange>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f000 f80b 	bl	8004bf4 <RCC_SetFlashLatency>
 8004bde:	4603      	mov	r3, r0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd90      	pop	{r4, r7, pc}
 8004be8:	0800dd54 	.word	0x0800dd54
 8004bec:	0800dcf4 	.word	0x0800dcf4
 8004bf0:	431bde83 	.word	0x431bde83

08004bf4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08e      	sub	sp, #56	; 0x38
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004bfe:	4a3a      	ldr	r2, [pc, #232]	; (8004ce8 <RCC_SetFlashLatency+0xf4>)
 8004c00:	f107 0320 	add.w	r3, r7, #32
 8004c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c08:	6018      	str	r0, [r3, #0]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004c0e:	4a37      	ldr	r2, [pc, #220]	; (8004cec <RCC_SetFlashLatency+0xf8>)
 8004c10:	f107 0318 	add.w	r3, r7, #24
 8004c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c18:	6018      	str	r0, [r3, #0]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004c1e:	4a34      	ldr	r2, [pc, #208]	; (8004cf0 <RCC_SetFlashLatency+0xfc>)
 8004c20:	f107 030c 	add.w	r3, r7, #12
 8004c24:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c26:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c34:	d11b      	bne.n	8004c6e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c36:	2300      	movs	r3, #0
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	e014      	b.n	8004c66 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	3338      	adds	r3, #56	; 0x38
 8004c42:	443b      	add	r3, r7
 8004c44:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d807      	bhi.n	8004c60 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	3338      	adds	r3, #56	; 0x38
 8004c56:	443b      	add	r3, r7
 8004c58:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c5e:	e021      	b.n	8004ca4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	3301      	adds	r3, #1
 8004c64:	633b      	str	r3, [r7, #48]	; 0x30
 8004c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d9e7      	bls.n	8004c3c <RCC_SetFlashLatency+0x48>
 8004c6c:	e01a      	b.n	8004ca4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c72:	e014      	b.n	8004c9e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	3338      	adds	r3, #56	; 0x38
 8004c7a:	443b      	add	r3, r7
 8004c7c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004c80:	461a      	mov	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d807      	bhi.n	8004c98 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	3338      	adds	r3, #56	; 0x38
 8004c8e:	443b      	add	r3, r7
 8004c90:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c96:	e005      	b.n	8004ca4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d9e7      	bls.n	8004c74 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ca4:	4b13      	ldr	r3, [pc, #76]	; (8004cf4 <RCC_SetFlashLatency+0x100>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f023 0207 	bic.w	r2, r3, #7
 8004cac:	4911      	ldr	r1, [pc, #68]	; (8004cf4 <RCC_SetFlashLatency+0x100>)
 8004cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cb4:	f7fd fbc2 	bl	800243c <HAL_GetTick>
 8004cb8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cba:	e008      	b.n	8004cce <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cbc:	f7fd fbbe 	bl	800243c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e007      	b.n	8004cde <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <RCC_SetFlashLatency+0x100>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d1ef      	bne.n	8004cbc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3738      	adds	r7, #56	; 0x38
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	0800dcb4 	.word	0x0800dcb4
 8004cec:	0800dcbc 	.word	0x0800dcbc
 8004cf0:	0800dcc4 	.word	0x0800dcc4
 8004cf4:	58004000 	.word	0x58004000

08004cf8 <LL_RCC_LSE_IsReady>:
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d101      	bne.n	8004d10 <LL_RCC_LSE_IsReady+0x18>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <LL_RCC_LSE_IsReady+0x1a>
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <LL_RCC_SetUSARTClockSource>:
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	0c1b      	lsrs	r3, r3, #16
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	401a      	ands	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr

08004d4a <LL_RCC_SetI2SClockSource>:
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <LL_RCC_SetLPUARTClockSource>:
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <LL_RCC_SetI2CClockSource>:
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004daa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004db6:	43db      	mvns	r3, r3
 8004db8:	401a      	ands	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr

08004dd6 <LL_RCC_SetLPTIMClockSource>:
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	43db      	mvns	r3, r3
 8004dee:	401a      	ands	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <LL_RCC_SetRNGClockSource>:
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e18:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <LL_RCC_SetADCClockSource>:
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <LL_RCC_SetRTCClockSource>:
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <LL_RCC_GetRTCClockSource>:
{
 8004e86:	b480      	push	{r7}
 8004e88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <LL_RCC_ForceBackupDomainReset>:
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004eb6:	bf00      	nop
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr

08004ebe <LL_RCC_ReleaseBackupDomainReset>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ed6:	bf00      	nop
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
	...

08004ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004eec:	2300      	movs	r3, #0
 8004eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d058      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004f00:	f7fe fdda 	bl	8003ab8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f04:	f7fd fa9a 	bl	800243c <HAL_GetTick>
 8004f08:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004f0a:	e009      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0c:	f7fd fa96 	bl	800243c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d902      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	74fb      	strb	r3, [r7, #19]
        break;
 8004f1e:	e006      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004f20:	4b7b      	ldr	r3, [pc, #492]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2c:	d1ee      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d13c      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004f34:	f7ff ffa7 	bl	8004e86 <LL_RCC_GetRTCClockSource>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d00f      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f50:	f7ff ffa5 	bl	8004e9e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f54:	f7ff ffb3 	bl	8004ebe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d014      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fd fa66 	bl	800243c <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004f72:	e00b      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f74:	f7fd fa62 	bl	800243c <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d902      	bls.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	74fb      	strb	r3, [r7, #19]
            break;
 8004f8a:	e004      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004f8c:	f7ff feb4 	bl	8004cf8 <LL_RCC_LSE_IsReady>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d1ee      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ff5b 	bl	8004e5c <LL_RCC_SetRTCClockSource>
 8004fa6:	e004      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	74bb      	strb	r3, [r7, #18]
 8004fac:	e001      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fea9 	bl	8004d1a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d004      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fe9e 	bl	8004d1a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d004      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fec0 	bl	8004d74 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d004      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fee6 	bl	8004dd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005012:	2b00      	cmp	r3, #0
 8005014:	d004      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fedb 	bl	8004dd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fed0 	bl	8004dd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fea9 	bl	8004d9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fe9e 	bl	8004d9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fe93 	bl	8004d9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d011      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fe5e 	bl	8004d4a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005096:	d107      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d010      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fea5 	bl	8004e08 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80050c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d011      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff fea3 	bl	8004e32 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f4:	d107      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005104:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005106:	7cbb      	ldrb	r3, [r7, #18]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	58000400 	.word	0x58000400

08005114 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d071      	beq.n	800520a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fd f86e 	bl	800221c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005148:	4b32      	ldr	r3, [pc, #200]	; (8005214 <HAL_RTC_Init+0x100>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b10      	cmp	r3, #16
 8005152:	d051      	beq.n	80051f8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005154:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <HAL_RTC_Init+0x100>)
 8005156:	22ca      	movs	r2, #202	; 0xca
 8005158:	625a      	str	r2, [r3, #36]	; 0x24
 800515a:	4b2e      	ldr	r3, [pc, #184]	; (8005214 <HAL_RTC_Init+0x100>)
 800515c:	2253      	movs	r2, #83	; 0x53
 800515e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fa51 	bl	8005608 <RTC_EnterInitMode>
 8005166:	4603      	mov	r3, r0
 8005168:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d13f      	bne.n	80051f0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <HAL_RTC_Init+0x100>)
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	4a27      	ldr	r2, [pc, #156]	; (8005214 <HAL_RTC_Init+0x100>)
 8005176:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800517a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <HAL_RTC_Init+0x100>)
 8005182:	699a      	ldr	r2, [r3, #24]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	4319      	orrs	r1, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	430b      	orrs	r3, r1
 8005194:	491f      	ldr	r1, [pc, #124]	; (8005214 <HAL_RTC_Init+0x100>)
 8005196:	4313      	orrs	r3, r2
 8005198:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	491b      	ldr	r1, [pc, #108]	; (8005214 <HAL_RTC_Init+0x100>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <HAL_RTC_Init+0x100>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	430b      	orrs	r3, r1
 80051bc:	4915      	ldr	r1, [pc, #84]	; (8005214 <HAL_RTC_Init+0x100>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fa54 	bl	8005670 <RTC_ExitInitMode>
 80051c8:	4603      	mov	r3, r0
 80051ca:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10e      	bne.n	80051f0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <HAL_RTC_Init+0x100>)
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a19      	ldr	r1, [r3, #32]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4319      	orrs	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	490a      	ldr	r1, [pc, #40]	; (8005214 <HAL_RTC_Init+0x100>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051f0:	4b08      	ldr	r3, [pc, #32]	; (8005214 <HAL_RTC_Init+0x100>)
 80051f2:	22ff      	movs	r2, #255	; 0xff
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24
 80051f6:	e001      	b.n	80051fc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40002800 	.word	0x40002800

08005218 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_RTC_SetTime+0x1a>
 800522e:	2302      	movs	r3, #2
 8005230:	e088      	b.n	8005344 <HAL_RTC_SetTime+0x12c>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2202      	movs	r2, #2
 800523e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005242:	4b42      	ldr	r3, [pc, #264]	; (800534c <HAL_RTC_SetTime+0x134>)
 8005244:	22ca      	movs	r2, #202	; 0xca
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
 8005248:	4b40      	ldr	r3, [pc, #256]	; (800534c <HAL_RTC_SetTime+0x134>)
 800524a:	2253      	movs	r2, #83	; 0x53
 800524c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f9da 	bl	8005608 <RTC_EnterInitMode>
 8005254:	4603      	mov	r3, r0
 8005256:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005258:	7cfb      	ldrb	r3, [r7, #19]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d15e      	bne.n	800531c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800525e:	4b3b      	ldr	r3, [pc, #236]	; (800534c <HAL_RTC_SetTime+0x134>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526a:	d057      	beq.n	800531c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d125      	bne.n	80052be <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005272:	4b36      	ldr	r3, [pc, #216]	; (800534c <HAL_RTC_SetTime+0x134>)
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2200      	movs	r2, #0
 8005282:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fa2f 	bl	80056ec <RTC_ByteToBcd2>
 800528e:	4603      	mov	r3, r0
 8005290:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fa28 	bl	80056ec <RTC_ByteToBcd2>
 800529c:	4603      	mov	r3, r0
 800529e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052a0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	789b      	ldrb	r3, [r3, #2]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fa20 	bl	80056ec <RTC_ByteToBcd2>
 80052ac:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052ae:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	78db      	ldrb	r3, [r3, #3]
 80052b6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e017      	b.n	80052ee <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80052be:	4b23      	ldr	r3, [pc, #140]	; (800534c <HAL_RTC_SetTime+0x134>)
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2200      	movs	r2, #0
 80052ce:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052dc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052e2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	78db      	ldrb	r3, [r3, #3]
 80052e8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80052ee:	4a17      	ldr	r2, [pc, #92]	; (800534c <HAL_RTC_SetTime+0x134>)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80052f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80052fa:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80052fc:	4b13      	ldr	r3, [pc, #76]	; (800534c <HAL_RTC_SetTime+0x134>)
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4a12      	ldr	r2, [pc, #72]	; (800534c <HAL_RTC_SetTime+0x134>)
 8005302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005306:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005308:	4b10      	ldr	r3, [pc, #64]	; (800534c <HAL_RTC_SetTime+0x134>)
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	68d9      	ldr	r1, [r3, #12]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	430b      	orrs	r3, r1
 8005316:	490d      	ldr	r1, [pc, #52]	; (800534c <HAL_RTC_SetTime+0x134>)
 8005318:	4313      	orrs	r3, r2
 800531a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f9a7 	bl	8005670 <RTC_ExitInitMode>
 8005322:	4603      	mov	r3, r0
 8005324:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_RTC_SetTime+0x134>)
 8005328:	22ff      	movs	r2, #255	; 0xff
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d103      	bne.n	800533a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005342:	7cfb      	ldrb	r3, [r7, #19]
}
 8005344:	4618      	mov	r0, r3
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	bd90      	pop	{r4, r7, pc}
 800534c:	40002800 	.word	0x40002800

08005350 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800535c:	4b2c      	ldr	r3, [pc, #176]	; (8005410 <HAL_RTC_GetTime+0xc0>)
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005364:	4b2a      	ldr	r3, [pc, #168]	; (8005410 <HAL_RTC_GetTime+0xc0>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005370:	d049      	beq.n	8005406 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8005372:	4b27      	ldr	r3, [pc, #156]	; (8005410 <HAL_RTC_GetTime+0xc0>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800537e:	4b24      	ldr	r3, [pc, #144]	; (8005410 <HAL_RTC_GetTime+0xc0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005386:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800538a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005396:	b2da      	uxtb	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	0d9b      	lsrs	r3, r3, #22
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d11a      	bne.n	8005406 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 f9a8 	bl	800572a <RTC_Bcd2ToByte>
 80053da:	4603      	mov	r3, r0
 80053dc:	461a      	mov	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 f99f 	bl	800572a <RTC_Bcd2ToByte>
 80053ec:	4603      	mov	r3, r0
 80053ee:	461a      	mov	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	789b      	ldrb	r3, [r3, #2]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 f996 	bl	800572a <RTC_Bcd2ToByte>
 80053fe:	4603      	mov	r3, r0
 8005400:	461a      	mov	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40002800 	.word	0x40002800

08005414 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_RTC_SetDate+0x1a>
 800542a:	2302      	movs	r3, #2
 800542c:	e071      	b.n	8005512 <HAL_RTC_SetDate+0xfe>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2202      	movs	r2, #2
 800543a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10e      	bne.n	8005462 <HAL_RTC_SetDate+0x4e>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	f023 0310 	bic.w	r3, r3, #16
 8005458:	b2db      	uxtb	r3, r3
 800545a:	330a      	adds	r3, #10
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11c      	bne.n	80054a2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	78db      	ldrb	r3, [r3, #3]
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f93d 	bl	80056ec <RTC_ByteToBcd2>
 8005472:	4603      	mov	r3, r0
 8005474:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f936 	bl	80056ec <RTC_ByteToBcd2>
 8005480:	4603      	mov	r3, r0
 8005482:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005484:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	789b      	ldrb	r3, [r3, #2]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f92e 	bl	80056ec <RTC_ByteToBcd2>
 8005490:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005492:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e00e      	b.n	80054c0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	78db      	ldrb	r3, [r3, #3]
 80054a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80054ae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80054b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054c0:	4b16      	ldr	r3, [pc, #88]	; (800551c <HAL_RTC_SetDate+0x108>)
 80054c2:	22ca      	movs	r2, #202	; 0xca
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24
 80054c6:	4b15      	ldr	r3, [pc, #84]	; (800551c <HAL_RTC_SetDate+0x108>)
 80054c8:	2253      	movs	r2, #83	; 0x53
 80054ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f89b 	bl	8005608 <RTC_EnterInitMode>
 80054d2:	4603      	mov	r3, r0
 80054d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80054dc:	4a0f      	ldr	r2, [pc, #60]	; (800551c <HAL_RTC_SetDate+0x108>)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f8c0 	bl	8005670 <RTC_ExitInitMode>
 80054f0:	4603      	mov	r3, r0
 80054f2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054f4:	4b09      	ldr	r3, [pc, #36]	; (800551c <HAL_RTC_SetDate+0x108>)
 80054f6:	22ff      	movs	r2, #255	; 0xff
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80054fa:	7cfb      	ldrb	r3, [r7, #19]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d103      	bne.n	8005508 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005510:	7cfb      	ldrb	r3, [r7, #19]
}
 8005512:	4618      	mov	r0, r3
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd90      	pop	{r4, r7, pc}
 800551a:	bf00      	nop
 800551c:	40002800 	.word	0x40002800

08005520 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800552c:	4b22      	ldr	r3, [pc, #136]	; (80055b8 <HAL_RTC_GetDate+0x98>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005534:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005538:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	b2da      	uxtb	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	b2db      	uxtb	r3, r3
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	b2da      	uxtb	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800555c:	b2da      	uxtb	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	0b5b      	lsrs	r3, r3, #13
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11a      	bne.n	80055ae <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	78db      	ldrb	r3, [r3, #3]
 800557c:	4618      	mov	r0, r3
 800557e:	f000 f8d4 	bl	800572a <RTC_Bcd2ToByte>
 8005582:	4603      	mov	r3, r0
 8005584:	461a      	mov	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f8cb 	bl	800572a <RTC_Bcd2ToByte>
 8005594:	4603      	mov	r3, r0
 8005596:	461a      	mov	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	789b      	ldrb	r3, [r3, #2]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f8c2 	bl	800572a <RTC_Bcd2ToByte>
 80055a6:	4603      	mov	r3, r0
 80055a8:	461a      	mov	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40002800 	.word	0x40002800

080055bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80055c4:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <HAL_RTC_WaitForSynchro+0x48>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4a0e      	ldr	r2, [pc, #56]	; (8005604 <HAL_RTC_WaitForSynchro+0x48>)
 80055ca:	f023 0320 	bic.w	r3, r3, #32
 80055ce:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80055d0:	f7fc ff34 	bl	800243c <HAL_GetTick>
 80055d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80055d6:	e009      	b.n	80055ec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055d8:	f7fc ff30 	bl	800243c <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055e6:	d901      	bls.n	80055ec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e006      	b.n	80055fa <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <HAL_RTC_WaitForSynchro+0x48>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0ef      	beq.n	80055d8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40002800 	.word	0x40002800

08005608 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005614:	4b15      	ldr	r3, [pc, #84]	; (800566c <RTC_EnterInitMode+0x64>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d120      	bne.n	8005662 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005620:	4b12      	ldr	r3, [pc, #72]	; (800566c <RTC_EnterInitMode+0x64>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	4a11      	ldr	r2, [pc, #68]	; (800566c <RTC_EnterInitMode+0x64>)
 8005626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800562c:	f7fc ff06 	bl	800243c <HAL_GetTick>
 8005630:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005632:	e00d      	b.n	8005650 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005634:	f7fc ff02 	bl	800243c <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005642:	d905      	bls.n	8005650 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2203      	movs	r2, #3
 800564c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <RTC_EnterInitMode+0x64>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <RTC_EnterInitMode+0x5a>
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b03      	cmp	r3, #3
 8005660:	d1e8      	bne.n	8005634 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40002800 	.word	0x40002800

08005670 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <RTC_ExitInitMode+0x78>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4a19      	ldr	r2, [pc, #100]	; (80056e8 <RTC_ExitInitMode+0x78>)
 8005682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005686:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005688:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <RTC_ExitInitMode+0x78>)
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10c      	bne.n	80056ae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff ff91 	bl	80055bc <HAL_RTC_WaitForSynchro>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01e      	beq.n	80056de <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2203      	movs	r2, #3
 80056a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	73fb      	strb	r3, [r7, #15]
 80056ac:	e017      	b.n	80056de <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <RTC_ExitInitMode+0x78>)
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	4a0d      	ldr	r2, [pc, #52]	; (80056e8 <RTC_ExitInitMode+0x78>)
 80056b4:	f023 0320 	bic.w	r3, r3, #32
 80056b8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff ff7e 	bl	80055bc <HAL_RTC_WaitForSynchro>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2203      	movs	r2, #3
 80056ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <RTC_ExitInitMode+0x78>)
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <RTC_ExitInitMode+0x78>)
 80056d8:	f043 0320 	orr.w	r3, r3, #32
 80056dc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40002800 	.word	0x40002800

080056ec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80056fe:	e005      	b.n	800570c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	3b0a      	subs	r3, #10
 800570a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800570c:	7afb      	ldrb	r3, [r7, #11]
 800570e:	2b09      	cmp	r3, #9
 8005710:	d8f6      	bhi.n	8005700 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	b2da      	uxtb	r2, r3
 800571a:	7afb      	ldrb	r3, [r7, #11]
 800571c:	4313      	orrs	r3, r2
 800571e:	b2db      	uxtb	r3, r3
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr

0800572a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	4603      	mov	r3, r0
 8005732:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	091b      	lsrs	r3, r3, #4
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	b2db      	uxtb	r3, r3
 8005752:	4413      	add	r3, r2
 8005754:	b2db      	uxtb	r3, r3
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr

08005760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e0c6      	b.n	8005900 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005782:	d009      	beq.n	8005798 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	61da      	str	r2, [r3, #28]
 800578a:	e005      	b.n	8005798 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fc fd61 	bl	8002274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2202      	movs	r2, #2
 80057b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057d2:	d902      	bls.n	80057da <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e002      	b.n	80057e0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80057e8:	d007      	beq.n	80057fa <HAL_SPI_Init+0x9a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057f2:	d002      	beq.n	80057fa <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583c:	ea42 0103 	orr.w	r1, r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005858:	d11b      	bne.n	8005892 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800586a:	d903      	bls.n	8005874 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	631a      	str	r2, [r3, #48]	; 0x30
 8005872:	e002      	b.n	800587a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	2b02      	cmp	r3, #2
 8005880:	d107      	bne.n	8005892 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005890:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	0c1b      	lsrs	r3, r3, #16
 8005898:	f003 0204 	and.w	r2, r3, #4
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058b8:	ea42 0103 	orr.w	r1, r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d2:	d105      	bne.n	80058e0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	b292      	uxth	r2, r2
 80058de:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_SPI_Transmit+0x22>
 8005926:	2302      	movs	r3, #2
 8005928:	e17a      	b.n	8005c20 <HAL_SPI_Transmit+0x318>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005932:	f7fc fd83 	bl	800243c <HAL_GetTick>
 8005936:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d002      	beq.n	800594e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005948:	2302      	movs	r3, #2
 800594a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800594c:	e15f      	b.n	8005c0e <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_SPI_Transmit+0x52>
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800595e:	e156      	b.n	8005c0e <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2203      	movs	r2, #3
 8005964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	88fa      	ldrh	r2, [r7, #6]
 8005978:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059aa:	d10f      	bne.n	80059cc <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ca:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d4:	d10f      	bne.n	80059f6 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059f4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d007      	beq.n	8005a14 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a1c:	d94b      	bls.n	8005ab6 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_SPI_Transmit+0x124>
 8005a26:	8afb      	ldrh	r3, [r7, #22]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d13e      	bne.n	8005aaa <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	881a      	ldrh	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	1c9a      	adds	r2, r3, #2
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a50:	e02b      	b.n	8005aaa <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d112      	bne.n	8005a86 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	881a      	ldrh	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a84:	e011      	b.n	8005aaa <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a86:	f7fc fcd9 	bl	800243c <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d803      	bhi.n	8005a9e <HAL_SPI_Transmit+0x196>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a9c:	d102      	bne.n	8005aa4 <HAL_SPI_Transmit+0x19c>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005aa8:	e0b1      	b.n	8005c0e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1ce      	bne.n	8005a52 <HAL_SPI_Transmit+0x14a>
 8005ab4:	e07c      	b.n	8005bb0 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_SPI_Transmit+0x1bc>
 8005abe:	8afb      	ldrh	r3, [r7, #22]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d170      	bne.n	8005ba6 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d912      	bls.n	8005af4 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	881a      	ldrh	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	1c9a      	adds	r2, r3, #2
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b02      	subs	r3, #2
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005af2:	e058      	b.n	8005ba6 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	7812      	ldrb	r2, [r2, #0]
 8005b00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b1a:	e044      	b.n	8005ba6 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d12b      	bne.n	8005b82 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d912      	bls.n	8005b5a <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	881a      	ldrh	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b02      	subs	r3, #2
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b58:	e025      	b.n	8005ba6 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	330c      	adds	r3, #12
 8005b64:	7812      	ldrb	r2, [r2, #0]
 8005b66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b80:	e011      	b.n	8005ba6 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b82:	f7fc fc5b 	bl	800243c <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d803      	bhi.n	8005b9a <HAL_SPI_Transmit+0x292>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b98:	d102      	bne.n	8005ba0 <HAL_SPI_Transmit+0x298>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ba4:	e033      	b.n	8005c0e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1b5      	bne.n	8005b1c <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb8:	d107      	bne.n	8005bca <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bc8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fe6e 	bl	80068b0 <SPI_EndRxTxTransaction>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be8:	2300      	movs	r3, #0
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	e000      	b.n	8005c0e <HAL_SPI_Transmit+0x306>
  }

error:
 8005c0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08c      	sub	sp, #48	; 0x30
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4e:	d112      	bne.n	8005c76 <HAL_SPI_Receive+0x4e>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10e      	bne.n	8005c76 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	4613      	mov	r3, r2
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f9c4 	bl	8005ffa <HAL_SPI_TransmitReceive>
 8005c72:	4603      	mov	r3, r0
 8005c74:	e1bd      	b.n	8005ff2 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_SPI_Receive+0x5c>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e1b6      	b.n	8005ff2 <HAL_SPI_Receive+0x3ca>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c8c:	f7fc fbd6 	bl	800243c <HAL_GetTick>
 8005c90:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d003      	beq.n	8005ca6 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8005ca4:	e19b      	b.n	8005fde <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_SPI_Receive+0x8a>
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d103      	bne.n	8005cba <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8005cb8:	e191      	b.n	8005fde <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	88fa      	ldrh	r2, [r7, #6]
 8005cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	88fa      	ldrh	r2, [r7, #6]
 8005cda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d04:	d118      	bne.n	8005d38 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d24:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d40:	d908      	bls.n	8005d54 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d50:	605a      	str	r2, [r3, #4]
 8005d52:	e007      	b.n	8005d64 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d62:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6c:	d10f      	bne.n	8005d8e <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d007      	beq.n	8005dac <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005daa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005db4:	d869      	bhi.n	8005e8a <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005db6:	e031      	b.n	8005e1c <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d117      	bne.n	8005df6 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f103 020c 	add.w	r2, r3, #12
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	7812      	ldrb	r2, [r2, #0]
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005df4:	e012      	b.n	8005e1c <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005df6:	f7fc fb21 	bl	800243c <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d803      	bhi.n	8005e0e <HAL_SPI_Receive+0x1e6>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0c:	d102      	bne.n	8005e14 <HAL_SPI_Receive+0x1ec>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d103      	bne.n	8005e1c <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005e1a:	e0e0      	b.n	8005fde <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1c7      	bne.n	8005db8 <HAL_SPI_Receive+0x190>
 8005e28:	e035      	b.n	8005e96 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d115      	bne.n	8005e64 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	b292      	uxth	r2, r2
 8005e44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	1c9a      	adds	r2, r3, #2
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e62:	e012      	b.n	8005e8a <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e64:	f7fc faea 	bl	800243c <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d803      	bhi.n	8005e7c <HAL_SPI_Receive+0x254>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e7a:	d102      	bne.n	8005e82 <HAL_SPI_Receive+0x25a>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005e88:	e0a9      	b.n	8005fde <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1c9      	bne.n	8005e2a <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e9e:	d178      	bne.n	8005f92 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005eae:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	2101      	movs	r1, #1
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fb82 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005ecc:	e087      	b.n	8005fde <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ed6:	d907      	bls.n	8005ee8 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	b292      	uxth	r2, r2
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	e008      	b.n	8005efa <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f103 020c 	add.w	r2, r3, #12
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	7812      	ldrb	r2, [r2, #0]
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2201      	movs	r2, #1
 8005f02:	2101      	movs	r1, #1
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 fb5d 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f14:	f043 0202 	orr.w	r2, r3, #2
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005f22:	e05c      	b.n	8005fde <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f2c:	d105      	bne.n	8005f3a <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	e02b      	b.n	8005f92 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	330c      	adds	r3, #12
 8005f40:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f54:	d11d      	bne.n	8005f92 <HAL_SPI_Receive+0x36a>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d119      	bne.n	8005f92 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2201      	movs	r2, #1
 8005f66:	2101      	movs	r1, #1
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fb2b 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	f043 0202 	orr.w	r2, r3, #2
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005f86:	e02a      	b.n	8005fde <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fc32 	bl	8006800 <SPI_EndRxTransaction>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d10a      	bne.n	8005fcc <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fba:	f043 0202 	orr.w	r2, r3, #2
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005fca:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005fda:	e000      	b.n	8005fde <HAL_SPI_Receive+0x3b6>
  }

error :
 8005fdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3728      	adds	r7, #40	; 0x28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b092      	sub	sp, #72	; 0x48
 8005ffe:	af02      	add	r7, sp, #8
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006010:	2301      	movs	r3, #1
 8006012:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_SPI_TransmitReceive+0x2e>
 8006024:	2302      	movs	r3, #2
 8006026:	e2c8      	b.n	80065ba <HAL_SPI_TransmitReceive+0x5c0>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006030:	f7fc fa04 	bl	800243c <HAL_GetTick>
 8006034:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800603c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8006046:	887b      	ldrh	r3, [r7, #2]
 8006048:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800604a:	887b      	ldrh	r3, [r7, #2]
 800604c:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800605e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006062:	2b01      	cmp	r3, #1
 8006064:	d00f      	beq.n	8006086 <HAL_SPI_TransmitReceive+0x8c>
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800606c:	d107      	bne.n	800607e <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d103      	bne.n	800607e <HAL_SPI_TransmitReceive+0x84>
 8006076:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800607a:	2b04      	cmp	r3, #4
 800607c:	d003      	beq.n	8006086 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 800607e:	2302      	movs	r3, #2
 8006080:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8006084:	e28f      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_SPI_TransmitReceive+0x9e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_SPI_TransmitReceive+0x9e>
 8006092:	887b      	ldrh	r3, [r7, #2]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d103      	bne.n	80060a0 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 800609e:	e282      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d003      	beq.n	80060b4 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2205      	movs	r2, #5
 80060b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	887a      	ldrh	r2, [r7, #2]
 80060c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	887a      	ldrh	r2, [r7, #2]
 80060cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	887a      	ldrh	r2, [r7, #2]
 80060da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	887a      	ldrh	r2, [r7, #2]
 80060e0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f6:	d10f      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006116:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006120:	d802      	bhi.n	8006128 <HAL_SPI_TransmitReceive+0x12e>
 8006122:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006124:	2b01      	cmp	r3, #1
 8006126:	d908      	bls.n	800613a <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006136:	605a      	str	r2, [r3, #4]
 8006138:	e007      	b.n	800614a <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006148:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d007      	beq.n	8006168 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006166:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006170:	f240 80a4 	bls.w	80062bc <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_SPI_TransmitReceive+0x18a>
 800617c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800617e:	2b01      	cmp	r3, #1
 8006180:	f040 808e 	bne.w	80062a0 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	881a      	ldrh	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	1c9a      	adds	r2, r3, #2
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061a8:	e07a      	b.n	80062a0 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d13f      	bne.n	8006238 <HAL_SPI_TransmitReceive+0x23e>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d03a      	beq.n	8006238 <HAL_SPI_TransmitReceive+0x23e>
 80061c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d137      	bne.n	8006238 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	881a      	ldrh	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	1c9a      	adds	r2, r3, #2
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d11e      	bne.n	8006238 <HAL_SPI_TransmitReceive+0x23e>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006202:	d119      	bne.n	8006238 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10c      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x22e>
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006226:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006236:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b01      	cmp	r3, #1
 8006244:	d11c      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x286>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d016      	beq.n	8006280 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	b292      	uxth	r2, r2
 800625e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	1c9a      	adds	r2, r3, #2
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800627c:	2301      	movs	r3, #1
 800627e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006280:	f7fc f8dc 	bl	800243c <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800628c:	429a      	cmp	r2, r3
 800628e:	d807      	bhi.n	80062a0 <HAL_SPI_TransmitReceive+0x2a6>
 8006290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006296:	d003      	beq.n	80062a0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800629e:	e182      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f47f af7f 	bne.w	80061aa <HAL_SPI_TransmitReceive+0x1b0>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f47f af78 	bne.w	80061aa <HAL_SPI_TransmitReceive+0x1b0>
 80062ba:	e103      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x2d2>
 80062c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	f040 80ef 	bne.w	80064aa <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d912      	bls.n	80062fc <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	881a      	ldrh	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	1c9a      	adds	r2, r3, #2
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b02      	subs	r3, #2
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062fa:	e0d6      	b.n	80064aa <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006322:	e0c2      	b.n	80064aa <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d158      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x3ea>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006336:	b29b      	uxth	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d053      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0x3ea>
 800633c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d150      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d912      	bls.n	8006372 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	881a      	ldrh	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	1c9a      	adds	r2, r3, #2
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b02      	subs	r3, #2
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006370:	e012      	b.n	8006398 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	330c      	adds	r3, #12
 800637c:	7812      	ldrb	r2, [r2, #0]
 800637e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d11e      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x3ea>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ae:	d119      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10c      	bne.n	80063d4 <HAL_SPI_TransmitReceive+0x3da>
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063d2:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063e2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d148      	bne.n	8006484 <HAL_SPI_TransmitReceive+0x48a>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d042      	beq.n	8006484 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	d923      	bls.n	8006452 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	b292      	uxth	r2, r2
 8006416:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	1c9a      	adds	r2, r3, #2
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b02      	subs	r3, #2
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d81f      	bhi.n	8006480 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800644e:	605a      	str	r2, [r3, #4]
 8006450:	e016      	b.n	8006480 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f103 020c 	add.w	r2, r3, #12
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	7812      	ldrb	r2, [r2, #0]
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006480:	2301      	movs	r3, #1
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006484:	f7fb ffda 	bl	800243c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006490:	429a      	cmp	r2, r3
 8006492:	d803      	bhi.n	800649c <HAL_SPI_TransmitReceive+0x4a2>
 8006494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800649a:	d102      	bne.n	80064a2 <HAL_SPI_TransmitReceive+0x4a8>
 800649c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80064a8:	e07d      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f47f af37 	bne.w	8006324 <HAL_SPI_TransmitReceive+0x32a>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f47f af30 	bne.w	8006324 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064cc:	d146      	bne.n	800655c <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80064ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d4:	2201      	movs	r2, #1
 80064d6:	2101      	movs	r1, #1
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f873 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d009      	beq.n	80064f8 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e8:	f043 0202 	orr.w	r2, r3, #2
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80064f6:	e056      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006500:	d105      	bne.n	800650e <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	e026      	b.n	800655c <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	330c      	adds	r3, #12
 8006514:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800651e:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	2b02      	cmp	r3, #2
 8006526:	d119      	bne.n	800655c <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800652e:	2201      	movs	r2, #1
 8006530:	2101      	movs	r1, #1
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f846 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006542:	f043 0202 	orr.w	r2, r3, #2
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8006550:	e029      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800655a:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0310 	and.w	r3, r3, #16
 8006566:	2b10      	cmp	r3, #16
 8006568:	d10d      	bne.n	8006586 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656e:	f043 0202 	orr.w	r2, r3, #2
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800657e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006588:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f990 	bl	80068b0 <SPI_EndRxTxTransaction>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d006      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	661a      	str	r2, [r3, #96]	; 0x60
 80065a2:	e000      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 80065a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3740      	adds	r7, #64	; 0x40
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065d4:	f7fb ff32 	bl	800243c <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4413      	add	r3, r2
 80065e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065e4:	f7fb ff2a 	bl	800243c <HAL_GetTick>
 80065e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065ea:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	015b      	lsls	r3, r3, #5
 80065f0:	0d1b      	lsrs	r3, r3, #20
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
 80065f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065fa:	e054      	b.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006602:	d050      	beq.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006604:	f7fb ff1a 	bl	800243c <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	429a      	cmp	r2, r3
 8006612:	d902      	bls.n	800661a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d13d      	bne.n	8006696 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006628:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006632:	d111      	bne.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663c:	d004      	beq.n	8006648 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006646:	d107      	bne.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006660:	d10f      	bne.n	8006682 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006680:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e017      	b.n	80066c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4013      	ands	r3, r2
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	bf0c      	ite	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	2300      	movne	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d19b      	bne.n	80065fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	2000000c 	.word	0x2000000c

080066d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066e6:	f7fb fea9 	bl	800243c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	1a9b      	subs	r3, r3, r2
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	4413      	add	r3, r2
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80066f6:	f7fb fea1 	bl	800243c <HAL_GetTick>
 80066fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006704:	4b3d      	ldr	r3, [pc, #244]	; (80067fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	00da      	lsls	r2, r3, #3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	0d1b      	lsrs	r3, r3, #20
 8006714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800671c:	e060      	b.n	80067e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006724:	d107      	bne.n	8006736 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006734:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800673c:	d050      	beq.n	80067e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800673e:	f7fb fe7d 	bl	800243c <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674a:	429a      	cmp	r2, r3
 800674c:	d902      	bls.n	8006754 <SPI_WaitFifoStateUntilTimeout+0x80>
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d13d      	bne.n	80067d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006762:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800676c:	d111      	bne.n	8006792 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006776:	d004      	beq.n	8006782 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006780:	d107      	bne.n	8006792 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006790:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800679a:	d10f      	bne.n	80067bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e010      	b.n	80067f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	3b01      	subs	r3, #1
 80067de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	4013      	ands	r3, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d196      	bne.n	800671e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3728      	adds	r7, #40	; 0x28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	2000000c 	.word	0x2000000c

08006800 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af02      	add	r7, sp, #8
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006814:	d111      	bne.n	800683a <SPI_EndRxTransaction+0x3a>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681e:	d004      	beq.n	800682a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006828:	d107      	bne.n	800683a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006838:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2200      	movs	r2, #0
 8006842:	2180      	movs	r1, #128	; 0x80
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f7ff febd 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006854:	f043 0220 	orr.w	r2, r3, #32
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e023      	b.n	80068a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006868:	d11d      	bne.n	80068a6 <SPI_EndRxTransaction+0xa6>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006872:	d004      	beq.n	800687e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687c:	d113      	bne.n	80068a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2200      	movs	r2, #0
 8006886:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff ff22 	bl	80066d4 <SPI_WaitFifoStateUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689a:	f043 0220 	orr.w	r2, r3, #32
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e000      	b.n	80068a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff ff03 	bl	80066d4 <SPI_WaitFifoStateUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d8:	f043 0220 	orr.w	r2, r3, #32
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e027      	b.n	8006934 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2200      	movs	r2, #0
 80068ec:	2180      	movs	r1, #128	; 0x80
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff fe68 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fe:	f043 0220 	orr.w	r2, r3, #32
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e014      	b.n	8006934 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7ff fedc 	bl	80066d4 <SPI_WaitFifoStateUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d007      	beq.n	8006932 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006926:	f043 0220 	orr.w	r2, r3, #32
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e000      	b.n	8006934 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800694c:	4904      	ldr	r1, [pc, #16]	; (8006960 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4313      	orrs	r3, r2
 8006952:	608b      	str	r3, [r1, #8]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	58000400 	.word	0x58000400

08006964 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006968:	4b05      	ldr	r3, [pc, #20]	; (8006980 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696e:	4a04      	ldr	r2, [pc, #16]	; (8006980 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006978:	bf00      	nop
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr
 8006980:	58000400 	.word	0x58000400

08006984 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800698a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698e:	4a04      	ldr	r2, [pc, #16]	; (80069a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006990:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006998:	bf00      	nop
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr
 80069a0:	58000400 	.word	0x58000400

080069a4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80069a8:	4b03      	ldr	r3, [pc, #12]	; (80069b8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80069aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ae:	619a      	str	r2, [r3, #24]
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	58000400 	.word	0x58000400

080069bc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d101      	bne.n	80069d0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	58000400 	.word	0x58000400

080069e0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d101      	bne.n	80069f4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	58000400 	.word	0x58000400

08006a04 <LL_RCC_RF_DisableReset>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006a1c:	bf00      	nop
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <LL_RCC_IsRFUnderReset>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a38:	d101      	bne.n	8006a3e <LL_RCC_IsRFUnderReset+0x1a>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <LL_RCC_IsRFUnderReset+0x1c>
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006a50:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <LL_EXTI_EnableIT_32_63+0x24>)
 8006a52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a56:	4905      	ldr	r1, [pc, #20]	; (8006a6c <LL_EXTI_EnableIT_32_63+0x24>)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	58000800 	.word	0x58000800

08006a70 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	73fb      	strb	r3, [r7, #15]
    return status;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	e052      	b.n	8006b2c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	799b      	ldrb	r3, [r3, #6]
 8006a8e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_SUBGHZ_Init+0x2c>
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d109      	bne.n	8006ab0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fb fc2e 	bl	8002304 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006aa8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006aac:	f7ff ffcc 	bl	8006a48 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d126      	bne.n	8006b04 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8006abc:	f7ff ffa2 	bl	8006a04 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006ac0:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <HAL_SUBGHZ_Init+0xc4>)
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	0cdb      	lsrs	r3, r3, #19
 8006ace:	2264      	movs	r2, #100	; 0x64
 8006ad0:	fb02 f303 	mul.w	r3, r2, r3
 8006ad4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d105      	bne.n	8006ae8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	609a      	str	r2, [r3, #8]
        break;
 8006ae6:	e007      	b.n	8006af8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006aee:	f7ff ff99 	bl	8006a24 <LL_RCC_IsRFUnderReset>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1ee      	bne.n	8006ad6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006af8:	f7ff ff34 	bl	8006964 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006afc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b00:	f7ff ff1c 	bl	800693c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006b04:	f7ff ff4e 	bl	80069a4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 faac 	bl	8007070 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	719a      	strb	r2, [r3, #6]

  return status;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	2000000c 	.word	0x2000000c

08006b38 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	461a      	mov	r2, r3
 8006b44:	460b      	mov	r3, r1
 8006b46:	817b      	strh	r3, [r7, #10]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	799b      	ldrb	r3, [r3, #6]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d14a      	bne.n	8006bec <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	795b      	ldrb	r3, [r3, #5]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e045      	b.n	8006bee <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 fb4c 	bl	800720c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006b74:	f7ff ff06 	bl	8006984 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006b78:	210d      	movs	r1, #13
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 fa98 	bl	80070b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006b80:	897b      	ldrh	r3, [r7, #10]
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fa90 	bl	80070b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006b90:	897b      	ldrh	r3, [r7, #10]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	4619      	mov	r1, r3
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fa8a 	bl	80070b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	82bb      	strh	r3, [r7, #20]
 8006ba0:	e00a      	b.n	8006bb8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006ba2:	8abb      	ldrh	r3, [r7, #20]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	4619      	mov	r1, r3
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fa7f 	bl	80070b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006bb2:	8abb      	ldrh	r3, [r7, #20]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	82bb      	strh	r3, [r7, #20]
 8006bb8:	8aba      	ldrh	r2, [r7, #20]
 8006bba:	893b      	ldrh	r3, [r7, #8]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d3f0      	bcc.n	8006ba2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006bc0:	f7ff fed0 	bl	8006964 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fb45 	bl	8007254 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	75fb      	strb	r3, [r7, #23]
 8006bd6:	e001      	b.n	8006bdc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	715a      	strb	r2, [r3, #5]

    return status;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	e000      	b.n	8006bee <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006bec:	2302      	movs	r3, #2
  }
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b088      	sub	sp, #32
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	461a      	mov	r2, r3
 8006c02:	460b      	mov	r3, r1
 8006c04:	817b      	strh	r3, [r7, #10]
 8006c06:	4613      	mov	r3, r2
 8006c08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	799b      	ldrb	r3, [r3, #6]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d14a      	bne.n	8006cae <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	795b      	ldrb	r3, [r3, #5]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e045      	b.n	8006cb0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2201      	movs	r2, #1
 8006c28:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 faee 	bl	800720c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006c30:	f7ff fea8 	bl	8006984 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006c34:	211d      	movs	r1, #29
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 fa3a 	bl	80070b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006c3c:	897b      	ldrh	r3, [r7, #10]
 8006c3e:	0a1b      	lsrs	r3, r3, #8
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	4619      	mov	r1, r3
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fa32 	bl	80070b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006c4c:	897b      	ldrh	r3, [r7, #10]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	4619      	mov	r1, r3
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fa2c 	bl	80070b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006c58:	2100      	movs	r1, #0
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 fa28 	bl	80070b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006c60:	2300      	movs	r3, #0
 8006c62:	82fb      	strh	r3, [r7, #22]
 8006c64:	e009      	b.n	8006c7a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006c66:	69b9      	ldr	r1, [r7, #24]
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 fa77 	bl	800715c <SUBGHZSPI_Receive>
      pData++;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	3301      	adds	r3, #1
 8006c72:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006c74:	8afb      	ldrh	r3, [r7, #22]
 8006c76:	3301      	adds	r3, #1
 8006c78:	82fb      	strh	r3, [r7, #22]
 8006c7a:	8afa      	ldrh	r2, [r7, #22]
 8006c7c:	893b      	ldrh	r3, [r7, #8]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d3f1      	bcc.n	8006c66 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006c82:	f7ff fe6f 	bl	8006964 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 fae4 	bl	8007254 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	e001      	b.n	8006c9e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	715a      	strb	r2, [r3, #5]

    return status;
 8006caa:	7ffb      	ldrb	r3, [r7, #31]
 8006cac:	e000      	b.n	8006cb0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006cae:	2302      	movs	r3, #2
  }
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3720      	adds	r7, #32
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	607a      	str	r2, [r7, #4]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	72fb      	strb	r3, [r7, #11]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	799b      	ldrb	r3, [r3, #6]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d14a      	bne.n	8006d6c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	795b      	ldrb	r3, [r3, #5]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e045      	b.n	8006d6e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 fa8f 	bl	800720c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006cee:	7afb      	ldrb	r3, [r7, #11]
 8006cf0:	2b84      	cmp	r3, #132	; 0x84
 8006cf2:	d002      	beq.n	8006cfa <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	2b94      	cmp	r3, #148	; 0x94
 8006cf8:	d103      	bne.n	8006d02 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	711a      	strb	r2, [r3, #4]
 8006d00:	e002      	b.n	8006d08 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006d08:	f7ff fe3c 	bl	8006984 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006d0c:	7afb      	ldrb	r3, [r7, #11]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f9cd 	bl	80070b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006d16:	2300      	movs	r3, #0
 8006d18:	82bb      	strh	r3, [r7, #20]
 8006d1a:	e00a      	b.n	8006d32 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006d1c:	8abb      	ldrh	r3, [r7, #20]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	4413      	add	r3, r2
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	4619      	mov	r1, r3
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 f9c2 	bl	80070b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d2c:	8abb      	ldrh	r3, [r7, #20]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	82bb      	strh	r3, [r7, #20]
 8006d32:	8aba      	ldrh	r2, [r7, #20]
 8006d34:	893b      	ldrh	r3, [r7, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d3f0      	bcc.n	8006d1c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d3a:	f7ff fe13 	bl	8006964 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	2b84      	cmp	r3, #132	; 0x84
 8006d42:	d002      	beq.n	8006d4a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fa85 	bl	8007254 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	75fb      	strb	r3, [r7, #23]
 8006d56:	e001      	b.n	8006d5c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	715a      	strb	r2, [r3, #5]

    return status;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	e000      	b.n	8006d6e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006d6c:	2302      	movs	r3, #2
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b088      	sub	sp, #32
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	461a      	mov	r2, r3
 8006d82:	460b      	mov	r3, r1
 8006d84:	72fb      	strb	r3, [r7, #11]
 8006d86:	4613      	mov	r3, r2
 8006d88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	799b      	ldrb	r3, [r3, #6]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d13d      	bne.n	8006e14 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	795b      	ldrb	r3, [r3, #5]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e038      	b.n	8006e16 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2201      	movs	r2, #1
 8006da8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fa2e 	bl	800720c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006db0:	f7ff fde8 	bl	8006984 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	4619      	mov	r1, r3
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 f979 	bl	80070b0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f975 	bl	80070b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	82fb      	strh	r3, [r7, #22]
 8006dca:	e009      	b.n	8006de0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006dcc:	69b9      	ldr	r1, [r7, #24]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 f9c4 	bl	800715c <SUBGHZSPI_Receive>
      pData++;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006dda:	8afb      	ldrh	r3, [r7, #22]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	82fb      	strh	r3, [r7, #22]
 8006de0:	8afa      	ldrh	r2, [r7, #22]
 8006de2:	893b      	ldrh	r3, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d3f1      	bcc.n	8006dcc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006de8:	f7ff fdbc 	bl	8006964 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fa31 	bl	8007254 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	77fb      	strb	r3, [r7, #31]
 8006dfe:	e001      	b.n	8006e04 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	715a      	strb	r2, [r3, #5]

    return status;
 8006e10:	7ffb      	ldrb	r3, [r7, #31]
 8006e12:	e000      	b.n	8006e16 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
  }
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b086      	sub	sp, #24
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	72fb      	strb	r3, [r7, #11]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	799b      	ldrb	r3, [r3, #6]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d13e      	bne.n	8006eba <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	795b      	ldrb	r3, [r3, #5]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e039      	b.n	8006ebc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 f9dc 	bl	800720c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006e54:	f7ff fd96 	bl	8006984 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006e58:	210e      	movs	r1, #14
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 f928 	bl	80070b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	4619      	mov	r1, r3
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 f923 	bl	80070b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	82bb      	strh	r3, [r7, #20]
 8006e6e:	e00a      	b.n	8006e86 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006e70:	8abb      	ldrh	r3, [r7, #20]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	4413      	add	r3, r2
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 f918 	bl	80070b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e80:	8abb      	ldrh	r3, [r7, #20]
 8006e82:	3301      	adds	r3, #1
 8006e84:	82bb      	strh	r3, [r7, #20]
 8006e86:	8aba      	ldrh	r2, [r7, #20]
 8006e88:	893b      	ldrh	r3, [r7, #8]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d3f0      	bcc.n	8006e70 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e8e:	f7ff fd69 	bl	8006964 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f9de 	bl	8007254 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
 8006ea4:	e001      	b.n	8006eaa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	715a      	strb	r2, [r3, #5]

    return status;
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	e000      	b.n	8006ebc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006eba:	2302      	movs	r3, #2
  }
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	72fb      	strb	r3, [r7, #11]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	799b      	ldrb	r3, [r3, #6]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d141      	bne.n	8006f6a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	795b      	ldrb	r3, [r3, #5]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e03c      	b.n	8006f6c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f987 	bl	800720c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006efe:	f7ff fd41 	bl	8006984 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006f02:	211e      	movs	r1, #30
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f8d3 	bl	80070b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006f0a:	7afb      	ldrb	r3, [r7, #11]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f8ce 	bl	80070b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006f14:	2100      	movs	r1, #0
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f8ca 	bl	80070b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	82fb      	strh	r3, [r7, #22]
 8006f20:	e009      	b.n	8006f36 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006f22:	69b9      	ldr	r1, [r7, #24]
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 f919 	bl	800715c <SUBGHZSPI_Receive>
      pData++;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006f30:	8afb      	ldrh	r3, [r7, #22]
 8006f32:	3301      	adds	r3, #1
 8006f34:	82fb      	strh	r3, [r7, #22]
 8006f36:	8afa      	ldrh	r2, [r7, #22]
 8006f38:	893b      	ldrh	r3, [r7, #8]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d3f1      	bcc.n	8006f22 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f3e:	f7ff fd11 	bl	8006964 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f986 	bl	8007254 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e001      	b.n	8006f5a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	715a      	strb	r2, [r3, #5]

    return status;
 8006f66:	7ffb      	ldrb	r3, [r7, #31]
 8006f68:	e000      	b.n	8006f6c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3720      	adds	r7, #32
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006f80:	f107 020c 	add.w	r2, r7, #12
 8006f84:	2302      	movs	r3, #2
 8006f86:	2112      	movs	r1, #18
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff fef4 	bl	8006d76 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006f8e:	7b3b      	ldrb	r3, [r7, #12]
 8006f90:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006f92:	89fb      	ldrh	r3, [r7, #14]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	b21a      	sxth	r2, r3
 8006f98:	7b7b      	ldrb	r3, [r7, #13]
 8006f9a:	b21b      	sxth	r3, r3
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	b21b      	sxth	r3, r3
 8006fa0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006fa2:	f107 020c 	add.w	r2, r7, #12
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	2102      	movs	r1, #2
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff fe84 	bl	8006cb8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006fb0:	89fb      	ldrh	r3, [r7, #14]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f005 f95c 	bl	800c278 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006fc0:	89fb      	ldrh	r3, [r7, #14]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f005 f962 	bl	800c294 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006fd0:	89fb      	ldrh	r3, [r7, #14]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f005 f9b2 	bl	800c344 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006fe0:	89fb      	ldrh	r3, [r7, #14]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f005 f9b8 	bl	800c360 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006ff0:	89fb      	ldrh	r3, [r7, #14]
 8006ff2:	f003 0310 	and.w	r3, r3, #16
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f005 f9be 	bl	800c37c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007000:	89fb      	ldrh	r3, [r7, #14]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f005 f98c 	bl	800c328 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007010:	89fb      	ldrh	r3, [r7, #14]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f005 f948 	bl	800c2b0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007020:	89fb      	ldrh	r3, [r7, #14]
 8007022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00d      	beq.n	8007046 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800702a:	89fb      	ldrh	r3, [r7, #14]
 800702c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007034:	2101      	movs	r1, #1
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f005 f948 	bl	800c2cc <HAL_SUBGHZ_CADStatusCallback>
 800703c:	e003      	b.n	8007046 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800703e:	2100      	movs	r1, #0
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f005 f943 	bl	800c2cc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007046:	89fb      	ldrh	r3, [r7, #14]
 8007048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f005 f959 	bl	800c308 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007056:	89fb      	ldrh	r3, [r7, #14]
 8007058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f005 f999 	bl	800c398 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007078:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <SUBGHZSPI_Init+0x3c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a0b      	ldr	r2, [pc, #44]	; (80070ac <SUBGHZSPI_Init+0x3c>)
 800707e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007082:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007084:	4a09      	ldr	r2, [pc, #36]	; (80070ac <SUBGHZSPI_Init+0x3c>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800708c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800708e:	4b07      	ldr	r3, [pc, #28]	; (80070ac <SUBGHZSPI_Init+0x3c>)
 8007090:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007094:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007096:	4b05      	ldr	r3, [pc, #20]	; (80070ac <SUBGHZSPI_Init+0x3c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a04      	ldr	r2, [pc, #16]	; (80070ac <SUBGHZSPI_Init+0x3c>)
 800709c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a0:	6013      	str	r3, [r2, #0]
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr
 80070ac:	58010000 	.word	0x58010000

080070b0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80070c0:	4b23      	ldr	r3, [pc, #140]	; (8007150 <SUBGHZSPI_Transmit+0xa0>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	4613      	mov	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	1a9b      	subs	r3, r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	0cdb      	lsrs	r3, r3, #19
 80070ce:	2264      	movs	r2, #100	; 0x64
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d105      	bne.n	80070e8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	609a      	str	r2, [r3, #8]
      break;
 80070e6:	e008      	b.n	80070fa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80070ee:	4b19      	ldr	r3, [pc, #100]	; (8007154 <SUBGHZSPI_Transmit+0xa4>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d1ed      	bne.n	80070d6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80070fa:	4b17      	ldr	r3, [pc, #92]	; (8007158 <SUBGHZSPI_Transmit+0xa8>)
 80070fc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	78fa      	ldrb	r2, [r7, #3]
 8007102:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007104:	4b12      	ldr	r3, [pc, #72]	; (8007150 <SUBGHZSPI_Transmit+0xa0>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	4613      	mov	r3, r2
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	0cdb      	lsrs	r3, r3, #19
 8007112:	2264      	movs	r2, #100	; 0x64
 8007114:	fb02 f303 	mul.w	r3, r2, r3
 8007118:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d105      	bne.n	800712c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	609a      	str	r2, [r3, #8]
      break;
 800712a:	e008      	b.n	800713e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3b01      	subs	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007132:	4b08      	ldr	r3, [pc, #32]	; (8007154 <SUBGHZSPI_Transmit+0xa4>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b01      	cmp	r3, #1
 800713c:	d1ed      	bne.n	800711a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <SUBGHZSPI_Transmit+0xa4>)
 8007140:	68db      	ldr	r3, [r3, #12]

  return status;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
}
 8007144:	4618      	mov	r0, r3
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	2000000c 	.word	0x2000000c
 8007154:	58010000 	.word	0x58010000
 8007158:	5801000c 	.word	0x5801000c

0800715c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800716a:	4b25      	ldr	r3, [pc, #148]	; (8007200 <SUBGHZSPI_Receive+0xa4>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4613      	mov	r3, r2
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	0cdb      	lsrs	r3, r3, #19
 8007178:	2264      	movs	r2, #100	; 0x64
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d105      	bne.n	8007192 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	609a      	str	r2, [r3, #8]
      break;
 8007190:	e008      	b.n	80071a4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3b01      	subs	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007198:	4b1a      	ldr	r3, [pc, #104]	; (8007204 <SUBGHZSPI_Receive+0xa8>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d1ed      	bne.n	8007180 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80071a4:	4b18      	ldr	r3, [pc, #96]	; (8007208 <SUBGHZSPI_Receive+0xac>)
 80071a6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	22ff      	movs	r2, #255	; 0xff
 80071ac:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80071ae:	4b14      	ldr	r3, [pc, #80]	; (8007200 <SUBGHZSPI_Receive+0xa4>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4613      	mov	r3, r2
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	0cdb      	lsrs	r3, r3, #19
 80071bc:	2264      	movs	r2, #100	; 0x64
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	609a      	str	r2, [r3, #8]
      break;
 80071d4:	e008      	b.n	80071e8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3b01      	subs	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80071dc:	4b09      	ldr	r3, [pc, #36]	; (8007204 <SUBGHZSPI_Receive+0xa8>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d1ed      	bne.n	80071c4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <SUBGHZSPI_Receive+0xa8>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	701a      	strb	r2, [r3, #0]

  return status;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	2000000c 	.word	0x2000000c
 8007204:	58010000 	.word	0x58010000
 8007208:	5801000c 	.word	0x5801000c

0800720c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	791b      	ldrb	r3, [r3, #4]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d111      	bne.n	8007240 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800721c:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <SUBGHZ_CheckDeviceReady+0x44>)
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	4613      	mov	r3, r2
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	4413      	add	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	0c1b      	lsrs	r3, r3, #16
 800722a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800722c:	f7ff fbaa 	bl	8006984 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3b01      	subs	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f9      	bne.n	8007230 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800723c:	f7ff fb92 	bl	8006964 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f807 	bl	8007254 <SUBGHZ_WaitOnBusy>
 8007246:	4603      	mov	r3, r0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	2000000c 	.word	0x2000000c

08007254 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007260:	4b12      	ldr	r3, [pc, #72]	; (80072ac <SUBGHZ_WaitOnBusy+0x58>)
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	4613      	mov	r3, r2
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	4413      	add	r3, r2
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	0d1b      	lsrs	r3, r3, #20
 800726e:	2264      	movs	r2, #100	; 0x64
 8007270:	fb02 f303 	mul.w	r3, r2, r3
 8007274:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007276:	f7ff fbb3 	bl	80069e0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800727a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d105      	bne.n	800728e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2202      	movs	r2, #2
 800728a:	609a      	str	r2, [r3, #8]
      break;
 800728c:	e009      	b.n	80072a2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3b01      	subs	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007294:	f7ff fb92 	bl	80069bc <LL_PWR_IsActiveFlag_RFBUSYS>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	4013      	ands	r3, r2
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d0e9      	beq.n	8007276 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2000000c 	.word	0x2000000c

080072b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e049      	b.n	8007356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7fb f828 	bl	800232c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f000 f944 	bl	800757c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	d001      	beq.n	8007378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e02e      	b.n	80073d6 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a16      	ldr	r2, [pc, #88]	; (80073e0 <HAL_TIM_Base_Start+0x80>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d004      	beq.n	8007394 <HAL_TIM_Base_Start+0x34>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d115      	bne.n	80073c0 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <HAL_TIM_Base_Start+0x84>)
 800739c:	4013      	ands	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b06      	cmp	r3, #6
 80073a4:	d015      	beq.n	80073d2 <HAL_TIM_Base_Start+0x72>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ac:	d011      	beq.n	80073d2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f042 0201 	orr.w	r2, r2, #1
 80073bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073be:	e008      	b.n	80073d2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	e000      	b.n	80073d4 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr
 80073e0:	40012c00 	.word	0x40012c00
 80073e4:	00010007 	.word	0x00010007

080073e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_TIM_ConfigClockSource+0x1c>
 8007400:	2302      	movs	r3, #2
 8007402:	e0b6      	b.n	8007572 <HAL_TIM_ConfigClockSource+0x18a>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800742e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007440:	d03e      	beq.n	80074c0 <HAL_TIM_ConfigClockSource+0xd8>
 8007442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007446:	f200 8087 	bhi.w	8007558 <HAL_TIM_ConfigClockSource+0x170>
 800744a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744e:	f000 8086 	beq.w	800755e <HAL_TIM_ConfigClockSource+0x176>
 8007452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007456:	d87f      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x170>
 8007458:	2b70      	cmp	r3, #112	; 0x70
 800745a:	d01a      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0xaa>
 800745c:	2b70      	cmp	r3, #112	; 0x70
 800745e:	d87b      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x170>
 8007460:	2b60      	cmp	r3, #96	; 0x60
 8007462:	d050      	beq.n	8007506 <HAL_TIM_ConfigClockSource+0x11e>
 8007464:	2b60      	cmp	r3, #96	; 0x60
 8007466:	d877      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x170>
 8007468:	2b50      	cmp	r3, #80	; 0x50
 800746a:	d03c      	beq.n	80074e6 <HAL_TIM_ConfigClockSource+0xfe>
 800746c:	2b50      	cmp	r3, #80	; 0x50
 800746e:	d873      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x170>
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	d058      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x13e>
 8007474:	2b40      	cmp	r3, #64	; 0x40
 8007476:	d86f      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x170>
 8007478:	2b30      	cmp	r3, #48	; 0x30
 800747a:	d064      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x15e>
 800747c:	2b30      	cmp	r3, #48	; 0x30
 800747e:	d86b      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x170>
 8007480:	2b20      	cmp	r3, #32
 8007482:	d060      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x15e>
 8007484:	2b20      	cmp	r3, #32
 8007486:	d867      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x170>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d05c      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x15e>
 800748c:	2b10      	cmp	r3, #16
 800748e:	d05a      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x15e>
 8007490:	e062      	b.n	8007558 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074a2:	f000 f946 	bl	8007732 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	609a      	str	r2, [r3, #8]
      break;
 80074be:	e04f      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074d0:	f000 f92f 	bl	8007732 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074e2:	609a      	str	r2, [r3, #8]
      break;
 80074e4:	e03c      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074f2:	461a      	mov	r2, r3
 80074f4:	f000 f8a4 	bl	8007640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2150      	movs	r1, #80	; 0x50
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 f8fb 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8007504:	e02c      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007512:	461a      	mov	r2, r3
 8007514:	f000 f8c2 	bl	800769c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2160      	movs	r1, #96	; 0x60
 800751e:	4618      	mov	r0, r3
 8007520:	f000 f8eb 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8007524:	e01c      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007532:	461a      	mov	r2, r3
 8007534:	f000 f884 	bl	8007640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2140      	movs	r1, #64	; 0x40
 800753e:	4618      	mov	r0, r3
 8007540:	f000 f8db 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8007544:	e00c      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f000 f8d2 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8007556:	e003      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
      break;
 800755c:	e000      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800755e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a29      	ldr	r2, [pc, #164]	; (8007634 <TIM_Base_SetConfig+0xb8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d003      	beq.n	800759c <TIM_Base_SetConfig+0x20>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759a:	d108      	bne.n	80075ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a20      	ldr	r2, [pc, #128]	; (8007634 <TIM_Base_SetConfig+0xb8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00b      	beq.n	80075ce <TIM_Base_SetConfig+0x52>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075bc:	d007      	beq.n	80075ce <TIM_Base_SetConfig+0x52>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a1d      	ldr	r2, [pc, #116]	; (8007638 <TIM_Base_SetConfig+0xbc>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d003      	beq.n	80075ce <TIM_Base_SetConfig+0x52>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a1c      	ldr	r2, [pc, #112]	; (800763c <TIM_Base_SetConfig+0xc0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d108      	bne.n	80075e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a0b      	ldr	r2, [pc, #44]	; (8007634 <TIM_Base_SetConfig+0xb8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d007      	beq.n	800761c <TIM_Base_SetConfig+0xa0>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a0a      	ldr	r2, [pc, #40]	; (8007638 <TIM_Base_SetConfig+0xbc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d003      	beq.n	800761c <TIM_Base_SetConfig+0xa0>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a09      	ldr	r2, [pc, #36]	; (800763c <TIM_Base_SetConfig+0xc0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d103      	bne.n	8007624 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	615a      	str	r2, [r3, #20]
}
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	bc80      	pop	{r7}
 8007632:	4770      	bx	lr
 8007634:	40012c00 	.word	0x40012c00
 8007638:	40014400 	.word	0x40014400
 800763c:	40014800 	.word	0x40014800

08007640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f023 0201 	bic.w	r2, r3, #1
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800766a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	011b      	lsls	r3, r3, #4
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f023 030a 	bic.w	r3, r3, #10
 800767c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	621a      	str	r2, [r3, #32]
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr

0800769c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	f023 0210 	bic.w	r2, r3, #16
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	031b      	lsls	r3, r3, #12
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	621a      	str	r2, [r3, #32]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc80      	pop	{r7}
 80076f8:	4770      	bx	lr

080076fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	f043 0307 	orr.w	r3, r3, #7
 8007720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	609a      	str	r2, [r3, #8]
}
 8007728:	bf00      	nop
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr

08007732 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007732:	b480      	push	{r7}
 8007734:	b087      	sub	sp, #28
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800774c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	021a      	lsls	r2, r3, #8
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	431a      	orrs	r2, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4313      	orrs	r3, r2
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	609a      	str	r2, [r3, #8]
}
 8007766:	bf00      	nop
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	bc80      	pop	{r7}
 800776e:	4770      	bx	lr

08007770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007784:	2302      	movs	r3, #2
 8007786:	e04a      	b.n	800781e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d108      	bne.n	80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a11      	ldr	r2, [pc, #68]	; (8007828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d004      	beq.n	80077f2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f0:	d10c      	bne.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	4313      	orrs	r3, r2
 8007802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr
 8007828:	40012c00 	.word	0x40012c00

0800782c <LL_RCC_GetUSARTClockSource>:
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007838:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	401a      	ands	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	041b      	lsls	r3, r3, #16
 8007844:	4313      	orrs	r3, r2
}
 8007846:	4618      	mov	r0, r3
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	bc80      	pop	{r7}
 800784e:	4770      	bx	lr

08007850 <LL_RCC_GetLPUARTClockSource>:
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800785c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4013      	ands	r3, r2
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr

0800786e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e042      	b.n	8007906 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fa fb32 	bl	8001efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2224      	movs	r2, #36	; 0x24
 800789c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0201 	bic.w	r2, r2, #1
 80078ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fd0d 	bl	80082d0 <UART_SetConfig>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e022      	b.n	8007906 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 ff75 	bl	80087b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fffb 	bl	80088fa <UART_CheckIdleState>
 8007904:	4603      	mov	r3, r0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b08a      	sub	sp, #40	; 0x28
 8007912:	af02      	add	r7, sp, #8
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	603b      	str	r3, [r7, #0]
 800791a:	4613      	mov	r3, r2
 800791c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007924:	2b20      	cmp	r3, #32
 8007926:	d173      	bne.n	8007a10 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_UART_Transmit+0x26>
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e06c      	b.n	8007a12 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2221      	movs	r2, #33	; 0x21
 8007944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007948:	f7fa fd78 	bl	800243c <HAL_GetTick>
 800794c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	88fa      	ldrh	r2, [r7, #6]
 800795a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007966:	d108      	bne.n	800797a <HAL_UART_Transmit+0x6c>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	e003      	b.n	8007982 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800797e:	2300      	movs	r3, #0
 8007980:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007982:	e02c      	b.n	80079de <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2200      	movs	r2, #0
 800798c:	2180      	movs	r1, #128	; 0x80
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f001 f801 	bl	8008996 <UART_WaitOnFlagUntilTimeout>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e039      	b.n	8007a12 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10b      	bne.n	80079bc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	3302      	adds	r3, #2
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	e007      	b.n	80079cc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	781a      	ldrb	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	3301      	adds	r3, #1
 80079ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1cc      	bne.n	8007984 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2200      	movs	r2, #0
 80079f2:	2140      	movs	r1, #64	; 0x40
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 ffce 	bl	8008996 <UART_WaitOnFlagUntilTimeout>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e006      	b.n	8007a12 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e000      	b.n	8007a12 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8007a10:	2302      	movs	r3, #2
  }
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b08a      	sub	sp, #40	; 0x28
 8007a1e:	af02      	add	r7, sp, #8
 8007a20:	60f8      	str	r0, [r7, #12]
 8007a22:	60b9      	str	r1, [r7, #8]
 8007a24:	603b      	str	r3, [r7, #0]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	f040 80b1 	bne.w	8007b98 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <HAL_UART_Receive+0x28>
 8007a3c:	88fb      	ldrh	r3, [r7, #6]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e0a9      	b.n	8007b9a <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2222      	movs	r2, #34	; 0x22
 8007a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a5c:	f7fa fcee 	bl	800243c <HAL_GetTick>
 8007a60:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	88fa      	ldrh	r2, [r7, #6]
 8007a66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	88fa      	ldrh	r2, [r7, #6]
 8007a6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7a:	d10e      	bne.n	8007a9a <HAL_UART_Receive+0x80>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d105      	bne.n	8007a90 <HAL_UART_Receive+0x76>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a8e:	e02d      	b.n	8007aec <HAL_UART_Receive+0xd2>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	22ff      	movs	r2, #255	; 0xff
 8007a94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a98:	e028      	b.n	8007aec <HAL_UART_Receive+0xd2>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10d      	bne.n	8007abe <HAL_UART_Receive+0xa4>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d104      	bne.n	8007ab4 <HAL_UART_Receive+0x9a>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	22ff      	movs	r2, #255	; 0xff
 8007aae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ab2:	e01b      	b.n	8007aec <HAL_UART_Receive+0xd2>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	227f      	movs	r2, #127	; 0x7f
 8007ab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007abc:	e016      	b.n	8007aec <HAL_UART_Receive+0xd2>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ac6:	d10d      	bne.n	8007ae4 <HAL_UART_Receive+0xca>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <HAL_UART_Receive+0xc0>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	227f      	movs	r2, #127	; 0x7f
 8007ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ad8:	e008      	b.n	8007aec <HAL_UART_Receive+0xd2>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	223f      	movs	r2, #63	; 0x3f
 8007ade:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ae2:	e003      	b.n	8007aec <HAL_UART_Receive+0xd2>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007af2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afc:	d108      	bne.n	8007b10 <HAL_UART_Receive+0xf6>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d104      	bne.n	8007b10 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	e003      	b.n	8007b18 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b14:	2300      	movs	r3, #0
 8007b16:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007b18:	e032      	b.n	8007b80 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2200      	movs	r2, #0
 8007b22:	2120      	movs	r1, #32
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 ff36 	bl	8008996 <UART_WaitOnFlagUntilTimeout>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e032      	b.n	8007b9a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10c      	bne.n	8007b54 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	8a7b      	ldrh	r3, [r7, #18]
 8007b44:	4013      	ands	r3, r2
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	3302      	adds	r3, #2
 8007b50:	61bb      	str	r3, [r7, #24]
 8007b52:	e00c      	b.n	8007b6e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	8a7b      	ldrh	r3, [r7, #18]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	4013      	ands	r3, r2
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1c6      	bne.n	8007b1a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	e000      	b.n	8007b9a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007b98:	2302      	movs	r3, #2
  }
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	; 0x28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d137      	bne.n	8007c2c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <HAL_UART_Receive_DMA+0x24>
 8007bc2:	88fb      	ldrh	r3, [r7, #6]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e030      	b.n	8007c2e <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a18      	ldr	r2, [pc, #96]	; (8007c38 <HAL_UART_Receive_DMA+0x94>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d01f      	beq.n	8007c1c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d018      	beq.n	8007c1c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	623b      	str	r3, [r7, #32]
 8007c0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0c:	69f9      	ldr	r1, [r7, #28]
 8007c0e:	6a3a      	ldr	r2, [r7, #32]
 8007c10:	e841 2300 	strex	r3, r2, [r1]
 8007c14:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1e6      	bne.n	8007bea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007c1c:	88fb      	ldrh	r3, [r7, #6]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 ff80 	bl	8008b28 <UART_Start_Receive_DMA>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	e000      	b.n	8007c2e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c2c:	2302      	movs	r3, #2
  }
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3728      	adds	r7, #40	; 0x28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	40008000 	.word	0x40008000

08007c3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b0ba      	sub	sp, #232	; 0xe8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c66:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d11b      	bne.n	8007cb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d015      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d105      	bne.n	8007c9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d009      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 82e3 	beq.w	800826c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
      }
      return;
 8007cae:	e2dd      	b.n	800826c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 8123 	beq.w	8007f00 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007cbe:	4b8d      	ldr	r3, [pc, #564]	; (8007ef4 <HAL_UART_IRQHandler+0x2b8>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007cc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007cca:	4b8b      	ldr	r3, [pc, #556]	; (8007ef8 <HAL_UART_IRQHandler+0x2bc>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 8116 	beq.w	8007f00 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d011      	beq.n	8007d04 <HAL_UART_IRQHandler+0xc8>
 8007ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f043 0201 	orr.w	r2, r3, #1
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d011      	beq.n	8007d34 <HAL_UART_IRQHandler+0xf8>
 8007d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00b      	beq.n	8007d34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2202      	movs	r2, #2
 8007d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2a:	f043 0204 	orr.w	r2, r3, #4
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d011      	beq.n	8007d64 <HAL_UART_IRQHandler+0x128>
 8007d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2204      	movs	r2, #4
 8007d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5a:	f043 0202 	orr.w	r2, r3, #2
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d017      	beq.n	8007da0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d74:	f003 0320 	and.w	r3, r3, #32
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d105      	bne.n	8007d88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d80:	4b5c      	ldr	r3, [pc, #368]	; (8007ef4 <HAL_UART_IRQHandler+0x2b8>)
 8007d82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d96:	f043 0208 	orr.w	r2, r3, #8
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d012      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x196>
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00c      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc8:	f043 0220 	orr.w	r2, r3, #32
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8249 	beq.w	8008270 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d013      	beq.n	8007e12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d105      	bne.n	8007e02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d007      	beq.n	8007e12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e26:	2b40      	cmp	r3, #64	; 0x40
 8007e28:	d005      	beq.n	8007e36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d054      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 ff5c 	bl	8008cf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e46:	2b40      	cmp	r3, #64	; 0x40
 8007e48:	d146      	bne.n	8007ed8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3308      	adds	r3, #8
 8007e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1d9      	bne.n	8007e4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d017      	beq.n	8007ed0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ea6:	4a15      	ldr	r2, [pc, #84]	; (8007efc <HAL_UART_IRQHandler+0x2c0>)
 8007ea8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fb fa8b 	bl	80033cc <HAL_DMA_Abort_IT>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d019      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ece:	e00f      	b.n	8007ef0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f9e9 	bl	80082a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed6:	e00b      	b.n	8007ef0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9e5 	bl	80082a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ede:	e007      	b.n	8007ef0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f9e1 	bl	80082a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007eee:	e1bf      	b.n	8008270 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef0:	bf00      	nop
    return;
 8007ef2:	e1bd      	b.n	8008270 <HAL_UART_IRQHandler+0x634>
 8007ef4:	10000001 	.word	0x10000001
 8007ef8:	04000120 	.word	0x04000120
 8007efc:	08008fa9 	.word	0x08008fa9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	f040 8153 	bne.w	80081b0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0e:	f003 0310 	and.w	r3, r3, #16
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 814c 	beq.w	80081b0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f1c:	f003 0310 	and.w	r3, r3, #16
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 8145 	beq.w	80081b0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2210      	movs	r2, #16
 8007f2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f38:	2b40      	cmp	r3, #64	; 0x40
 8007f3a:	f040 80bb 	bne.w	80080b4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 818f 	beq.w	8008274 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f60:	429a      	cmp	r2, r3
 8007f62:	f080 8187 	bcs.w	8008274 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 8087 	bne.w	8008092 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007fb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1da      	bne.n	8007f84 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fe0:	f023 0301 	bic.w	r3, r3, #1
 8007fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3308      	adds	r3, #8
 8007fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ff2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ff6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e1      	bne.n	8007fce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3308      	adds	r3, #8
 8008010:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800801a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800801c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3308      	adds	r3, #8
 800802a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800802e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008030:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008034:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800803c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e3      	bne.n	800800a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2220      	movs	r2, #32
 8008046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800805e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008060:	f023 0310 	bic.w	r3, r3, #16
 8008064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008072:	65bb      	str	r3, [r7, #88]	; 0x58
 8008074:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008076:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800807a:	e841 2300 	strex	r3, r2, [r1]
 800807e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e4      	bne.n	8008050 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800808c:	4618      	mov	r0, r3
 800808e:	f7fb f93f 	bl	8003310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f904 	bl	80082ba <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080b2:	e0df      	b.n	8008274 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80d1 	beq.w	8008278 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80080d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 80cc 	beq.w	8008278 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008102:	647b      	str	r3, [r7, #68]	; 0x44
 8008104:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e4      	bne.n	80080e0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	623b      	str	r3, [r7, #32]
   return(result);
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800812c:	f023 0301 	bic.w	r3, r3, #1
 8008130:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800813e:	633a      	str	r2, [r7, #48]	; 0x30
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e1      	bne.n	8008116 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	60fb      	str	r3, [r7, #12]
   return(result);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0310 	bic.w	r3, r3, #16
 800817a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008188:	61fb      	str	r3, [r7, #28]
 800818a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	69b9      	ldr	r1, [r7, #24]
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	617b      	str	r3, [r7, #20]
   return(result);
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e4      	bne.n	8008166 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2202      	movs	r2, #2
 80081a0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f886 	bl	80082ba <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081ae:	e063      	b.n	8008278 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00e      	beq.n	80081da <HAL_UART_IRQHandler+0x59e>
 80081bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d008      	beq.n	80081da <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 ff29 	bl	800902a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081d8:	e051      	b.n	800827e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d014      	beq.n	8008210 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d105      	bne.n	80081fe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d008      	beq.n	8008210 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008202:	2b00      	cmp	r3, #0
 8008204:	d03a      	beq.n	800827c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
    }
    return;
 800820e:	e035      	b.n	800827c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d009      	beq.n	8008230 <HAL_UART_IRQHandler+0x5f4>
 800821c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fed3 	bl	8008fd4 <UART_EndTransmit_IT>
    return;
 800822e:	e026      	b.n	800827e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d009      	beq.n	8008250 <HAL_UART_IRQHandler+0x614>
 800823c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008240:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 ff00 	bl	800904e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800824e:	e016      	b.n	800827e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d010      	beq.n	800827e <HAL_UART_IRQHandler+0x642>
 800825c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008260:	2b00      	cmp	r3, #0
 8008262:	da0c      	bge.n	800827e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fee9 	bl	800903c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800826a:	e008      	b.n	800827e <HAL_UART_IRQHandler+0x642>
      return;
 800826c:	bf00      	nop
 800826e:	e006      	b.n	800827e <HAL_UART_IRQHandler+0x642>
    return;
 8008270:	bf00      	nop
 8008272:	e004      	b.n	800827e <HAL_UART_IRQHandler+0x642>
      return;
 8008274:	bf00      	nop
 8008276:	e002      	b.n	800827e <HAL_UART_IRQHandler+0x642>
      return;
 8008278:	bf00      	nop
 800827a:	e000      	b.n	800827e <HAL_UART_IRQHandler+0x642>
    return;
 800827c:	bf00      	nop
  }
}
 800827e:	37e8      	adds	r7, #232	; 0xe8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	bc80      	pop	{r7}
 8008294:	4770      	bx	lr

08008296 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800829e:	bf00      	nop
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bc80      	pop	{r7}
 80082a6:	4770      	bx	lr

080082a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bc80      	pop	{r7}
 80082b8:	4770      	bx	lr

080082ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr

080082d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082d4:	b08c      	sub	sp, #48	; 0x30
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	431a      	orrs	r2, r3
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	4b94      	ldr	r3, [pc, #592]	; (8008550 <UART_SetConfig+0x280>)
 8008300:	4013      	ands	r3, r2
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008308:	430b      	orrs	r3, r1
 800830a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a89      	ldr	r2, [pc, #548]	; (8008554 <UART_SetConfig+0x284>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008338:	4313      	orrs	r3, r2
 800833a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008346:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	6812      	ldr	r2, [r2, #0]
 800834e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008350:	430b      	orrs	r3, r1
 8008352:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835a:	f023 010f 	bic.w	r1, r3, #15
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a7a      	ldr	r2, [pc, #488]	; (8008558 <UART_SetConfig+0x288>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d127      	bne.n	80083c4 <UART_SetConfig+0xf4>
 8008374:	2003      	movs	r0, #3
 8008376:	f7ff fa59 	bl	800782c <LL_RCC_GetUSARTClockSource>
 800837a:	4603      	mov	r3, r0
 800837c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008380:	2b03      	cmp	r3, #3
 8008382:	d81b      	bhi.n	80083bc <UART_SetConfig+0xec>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <UART_SetConfig+0xbc>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	0800839d 	.word	0x0800839d
 8008390:	080083ad 	.word	0x080083ad
 8008394:	080083a5 	.word	0x080083a5
 8008398:	080083b5 	.word	0x080083b5
 800839c:	2301      	movs	r3, #1
 800839e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a2:	e080      	b.n	80084a6 <UART_SetConfig+0x1d6>
 80083a4:	2302      	movs	r3, #2
 80083a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083aa:	e07c      	b.n	80084a6 <UART_SetConfig+0x1d6>
 80083ac:	2304      	movs	r3, #4
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b2:	e078      	b.n	80084a6 <UART_SetConfig+0x1d6>
 80083b4:	2308      	movs	r3, #8
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ba:	e074      	b.n	80084a6 <UART_SetConfig+0x1d6>
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c2:	e070      	b.n	80084a6 <UART_SetConfig+0x1d6>
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a64      	ldr	r2, [pc, #400]	; (800855c <UART_SetConfig+0x28c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d138      	bne.n	8008440 <UART_SetConfig+0x170>
 80083ce:	200c      	movs	r0, #12
 80083d0:	f7ff fa2c 	bl	800782c <LL_RCC_GetUSARTClockSource>
 80083d4:	4603      	mov	r3, r0
 80083d6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80083da:	2b0c      	cmp	r3, #12
 80083dc:	d82c      	bhi.n	8008438 <UART_SetConfig+0x168>
 80083de:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <UART_SetConfig+0x114>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	08008419 	.word	0x08008419
 80083e8:	08008439 	.word	0x08008439
 80083ec:	08008439 	.word	0x08008439
 80083f0:	08008439 	.word	0x08008439
 80083f4:	08008429 	.word	0x08008429
 80083f8:	08008439 	.word	0x08008439
 80083fc:	08008439 	.word	0x08008439
 8008400:	08008439 	.word	0x08008439
 8008404:	08008421 	.word	0x08008421
 8008408:	08008439 	.word	0x08008439
 800840c:	08008439 	.word	0x08008439
 8008410:	08008439 	.word	0x08008439
 8008414:	08008431 	.word	0x08008431
 8008418:	2300      	movs	r3, #0
 800841a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800841e:	e042      	b.n	80084a6 <UART_SetConfig+0x1d6>
 8008420:	2302      	movs	r3, #2
 8008422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008426:	e03e      	b.n	80084a6 <UART_SetConfig+0x1d6>
 8008428:	2304      	movs	r3, #4
 800842a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800842e:	e03a      	b.n	80084a6 <UART_SetConfig+0x1d6>
 8008430:	2308      	movs	r3, #8
 8008432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008436:	e036      	b.n	80084a6 <UART_SetConfig+0x1d6>
 8008438:	2310      	movs	r3, #16
 800843a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800843e:	e032      	b.n	80084a6 <UART_SetConfig+0x1d6>
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a43      	ldr	r2, [pc, #268]	; (8008554 <UART_SetConfig+0x284>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d12a      	bne.n	80084a0 <UART_SetConfig+0x1d0>
 800844a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800844e:	f7ff f9ff 	bl	8007850 <LL_RCC_GetLPUARTClockSource>
 8008452:	4603      	mov	r3, r0
 8008454:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008458:	d01a      	beq.n	8008490 <UART_SetConfig+0x1c0>
 800845a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800845e:	d81b      	bhi.n	8008498 <UART_SetConfig+0x1c8>
 8008460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008464:	d00c      	beq.n	8008480 <UART_SetConfig+0x1b0>
 8008466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800846a:	d815      	bhi.n	8008498 <UART_SetConfig+0x1c8>
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <UART_SetConfig+0x1a8>
 8008470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008474:	d008      	beq.n	8008488 <UART_SetConfig+0x1b8>
 8008476:	e00f      	b.n	8008498 <UART_SetConfig+0x1c8>
 8008478:	2300      	movs	r3, #0
 800847a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800847e:	e012      	b.n	80084a6 <UART_SetConfig+0x1d6>
 8008480:	2302      	movs	r3, #2
 8008482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008486:	e00e      	b.n	80084a6 <UART_SetConfig+0x1d6>
 8008488:	2304      	movs	r3, #4
 800848a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800848e:	e00a      	b.n	80084a6 <UART_SetConfig+0x1d6>
 8008490:	2308      	movs	r3, #8
 8008492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008496:	e006      	b.n	80084a6 <UART_SetConfig+0x1d6>
 8008498:	2310      	movs	r3, #16
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800849e:	e002      	b.n	80084a6 <UART_SetConfig+0x1d6>
 80084a0:	2310      	movs	r3, #16
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a2a      	ldr	r2, [pc, #168]	; (8008554 <UART_SetConfig+0x284>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	f040 80a4 	bne.w	80085fa <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084b6:	2b08      	cmp	r3, #8
 80084b8:	d823      	bhi.n	8008502 <UART_SetConfig+0x232>
 80084ba:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <UART_SetConfig+0x1f0>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	080084e5 	.word	0x080084e5
 80084c4:	08008503 	.word	0x08008503
 80084c8:	080084ed 	.word	0x080084ed
 80084cc:	08008503 	.word	0x08008503
 80084d0:	080084f3 	.word	0x080084f3
 80084d4:	08008503 	.word	0x08008503
 80084d8:	08008503 	.word	0x08008503
 80084dc:	08008503 	.word	0x08008503
 80084e0:	080084fb 	.word	0x080084fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084e4:	f7fc fb32 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 80084e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084ea:	e010      	b.n	800850e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084ec:	4b1c      	ldr	r3, [pc, #112]	; (8008560 <UART_SetConfig+0x290>)
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084f0:	e00d      	b.n	800850e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084f2:	f7fc fa77 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80084f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084f8:	e009      	b.n	800850e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008500:	e005      	b.n	800850e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800850c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 8137 	beq.w	8008784 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	4a12      	ldr	r2, [pc, #72]	; (8008564 <UART_SetConfig+0x294>)
 800851c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008520:	461a      	mov	r2, r3
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	fbb3 f3f2 	udiv	r3, r3, r2
 8008528:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	4413      	add	r3, r2
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	429a      	cmp	r2, r3
 8008538:	d305      	bcc.n	8008546 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	429a      	cmp	r2, r3
 8008544:	d910      	bls.n	8008568 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800854c:	e11a      	b.n	8008784 <UART_SetConfig+0x4b4>
 800854e:	bf00      	nop
 8008550:	cfff69f3 	.word	0xcfff69f3
 8008554:	40008000 	.word	0x40008000
 8008558:	40013800 	.word	0x40013800
 800855c:	40004400 	.word	0x40004400
 8008560:	00f42400 	.word	0x00f42400
 8008564:	0800ddc0 	.word	0x0800ddc0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	2200      	movs	r2, #0
 800856c:	60bb      	str	r3, [r7, #8]
 800856e:	60fa      	str	r2, [r7, #12]
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	4a8e      	ldr	r2, [pc, #568]	; (80087b0 <UART_SetConfig+0x4e0>)
 8008576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800857a:	b29b      	uxth	r3, r3
 800857c:	2200      	movs	r2, #0
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	607a      	str	r2, [r7, #4]
 8008582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800858a:	f7f7 fe49 	bl	8000220 <__aeabi_uldivmod>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4610      	mov	r0, r2
 8008594:	4619      	mov	r1, r3
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	f04f 0300 	mov.w	r3, #0
 800859e:	020b      	lsls	r3, r1, #8
 80085a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085a4:	0202      	lsls	r2, r0, #8
 80085a6:	6979      	ldr	r1, [r7, #20]
 80085a8:	6849      	ldr	r1, [r1, #4]
 80085aa:	0849      	lsrs	r1, r1, #1
 80085ac:	2000      	movs	r0, #0
 80085ae:	460c      	mov	r4, r1
 80085b0:	4605      	mov	r5, r0
 80085b2:	eb12 0804 	adds.w	r8, r2, r4
 80085b6:	eb43 0905 	adc.w	r9, r3, r5
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	469a      	mov	sl, r3
 80085c2:	4693      	mov	fp, r2
 80085c4:	4652      	mov	r2, sl
 80085c6:	465b      	mov	r3, fp
 80085c8:	4640      	mov	r0, r8
 80085ca:	4649      	mov	r1, r9
 80085cc:	f7f7 fe28 	bl	8000220 <__aeabi_uldivmod>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4613      	mov	r3, r2
 80085d6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085de:	d308      	bcc.n	80085f2 <UART_SetConfig+0x322>
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085e6:	d204      	bcs.n	80085f2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6a3a      	ldr	r2, [r7, #32]
 80085ee:	60da      	str	r2, [r3, #12]
 80085f0:	e0c8      	b.n	8008784 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085f8:	e0c4      	b.n	8008784 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008602:	d167      	bne.n	80086d4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008608:	2b08      	cmp	r3, #8
 800860a:	d828      	bhi.n	800865e <UART_SetConfig+0x38e>
 800860c:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <UART_SetConfig+0x344>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	08008639 	.word	0x08008639
 8008618:	08008641 	.word	0x08008641
 800861c:	08008649 	.word	0x08008649
 8008620:	0800865f 	.word	0x0800865f
 8008624:	0800864f 	.word	0x0800864f
 8008628:	0800865f 	.word	0x0800865f
 800862c:	0800865f 	.word	0x0800865f
 8008630:	0800865f 	.word	0x0800865f
 8008634:	08008657 	.word	0x08008657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008638:	f7fc fa88 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 800863c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800863e:	e014      	b.n	800866a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008640:	f7fc fa96 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 8008644:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008646:	e010      	b.n	800866a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008648:	4b5a      	ldr	r3, [pc, #360]	; (80087b4 <UART_SetConfig+0x4e4>)
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800864c:	e00d      	b.n	800866a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800864e:	f7fc f9c9 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8008652:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008654:	e009      	b.n	800866a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800865c:	e005      	b.n	800866a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 8089 	beq.w	8008784 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	4a4e      	ldr	r2, [pc, #312]	; (80087b0 <UART_SetConfig+0x4e0>)
 8008678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800867c:	461a      	mov	r2, r3
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	fbb3 f3f2 	udiv	r3, r3, r2
 8008684:	005a      	lsls	r2, r3, #1
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	085b      	lsrs	r3, r3, #1
 800868c:	441a      	add	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	fbb2 f3f3 	udiv	r3, r2, r3
 8008696:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	2b0f      	cmp	r3, #15
 800869c:	d916      	bls.n	80086cc <UART_SetConfig+0x3fc>
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a4:	d212      	bcs.n	80086cc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f023 030f 	bic.w	r3, r3, #15
 80086ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	085b      	lsrs	r3, r3, #1
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	8bfb      	ldrh	r3, [r7, #30]
 80086be:	4313      	orrs	r3, r2
 80086c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	8bfa      	ldrh	r2, [r7, #30]
 80086c8:	60da      	str	r2, [r3, #12]
 80086ca:	e05b      	b.n	8008784 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086d2:	e057      	b.n	8008784 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086d8:	2b08      	cmp	r3, #8
 80086da:	d828      	bhi.n	800872e <UART_SetConfig+0x45e>
 80086dc:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <UART_SetConfig+0x414>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	08008709 	.word	0x08008709
 80086e8:	08008711 	.word	0x08008711
 80086ec:	08008719 	.word	0x08008719
 80086f0:	0800872f 	.word	0x0800872f
 80086f4:	0800871f 	.word	0x0800871f
 80086f8:	0800872f 	.word	0x0800872f
 80086fc:	0800872f 	.word	0x0800872f
 8008700:	0800872f 	.word	0x0800872f
 8008704:	08008727 	.word	0x08008727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008708:	f7fc fa20 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 800870c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800870e:	e014      	b.n	800873a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008710:	f7fc fa2e 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 8008714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008716:	e010      	b.n	800873a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008718:	4b26      	ldr	r3, [pc, #152]	; (80087b4 <UART_SetConfig+0x4e4>)
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800871c:	e00d      	b.n	800873a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800871e:	f7fc f961 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8008722:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008724:	e009      	b.n	800873a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800872a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800872c:	e005      	b.n	800873a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008738:	bf00      	nop
    }

    if (pclk != 0U)
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d021      	beq.n	8008784 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	4a1a      	ldr	r2, [pc, #104]	; (80087b0 <UART_SetConfig+0x4e0>)
 8008746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800874a:	461a      	mov	r2, r3
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	085b      	lsrs	r3, r3, #1
 8008758:	441a      	add	r2, r3
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008762:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	2b0f      	cmp	r3, #15
 8008768:	d909      	bls.n	800877e <UART_SetConfig+0x4ae>
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008770:	d205      	bcs.n	800877e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	b29a      	uxth	r2, r3
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	60da      	str	r2, [r3, #12]
 800877c:	e002      	b.n	8008784 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2201      	movs	r2, #1
 8008788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2201      	movs	r2, #1
 8008790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2200      	movs	r2, #0
 8008798:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2200      	movs	r2, #0
 800879e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80087a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3730      	adds	r7, #48	; 0x30
 80087a8:	46bd      	mov	sp, r7
 80087aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087ae:	bf00      	nop
 80087b0:	0800ddc0 	.word	0x0800ddc0
 80087b4:	00f42400 	.word	0x00f42400

080087b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	f003 0308 	and.w	r3, r3, #8
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884c:	f003 0310 	and.w	r3, r3, #16
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008894:	2b00      	cmp	r3, #0
 8008896:	d01a      	beq.n	80088ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088b6:	d10a      	bne.n	80088ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	605a      	str	r2, [r3, #4]
  }
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bc80      	pop	{r7}
 80088f8:	4770      	bx	lr

080088fa <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af02      	add	r7, sp, #8
 8008900:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800890a:	f7f9 fd97 	bl	800243c <HAL_GetTick>
 800890e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0308 	and.w	r3, r3, #8
 800891a:	2b08      	cmp	r3, #8
 800891c:	d10e      	bne.n	800893c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800891e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f832 	bl	8008996 <UART_WaitOnFlagUntilTimeout>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e028      	b.n	800898e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0304 	and.w	r3, r3, #4
 8008946:	2b04      	cmp	r3, #4
 8008948:	d10e      	bne.n	8008968 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800894a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f81c 	bl	8008996 <UART_WaitOnFlagUntilTimeout>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e012      	b.n	800898e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2220      	movs	r2, #32
 800896c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2220      	movs	r2, #32
 8008974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b09c      	sub	sp, #112	; 0x70
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	603b      	str	r3, [r7, #0]
 80089a2:	4613      	mov	r3, r2
 80089a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089a6:	e0a9      	b.n	8008afc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ae:	f000 80a5 	beq.w	8008afc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089b2:	f7f9 fd43 	bl	800243c <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80089be:	429a      	cmp	r2, r3
 80089c0:	d302      	bcc.n	80089c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80089c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d140      	bne.n	8008a4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089dc:	667b      	str	r3, [r7, #100]	; 0x64
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80089f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e6      	bne.n	80089c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3308      	adds	r3, #8
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	f023 0301 	bic.w	r3, r3, #1
 8008a10:	663b      	str	r3, [r7, #96]	; 0x60
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3308      	adds	r3, #8
 8008a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e5      	bne.n	80089fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2220      	movs	r2, #32
 8008a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e069      	b.n	8008b1e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0304 	and.w	r3, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d051      	beq.n	8008afc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a66:	d149      	bne.n	8008afc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	e853 3f00 	ldrex	r3, [r3]
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
 8008a92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a98:	e841 2300 	strex	r3, r2, [r1]
 8008a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1e6      	bne.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f023 0301 	bic.w	r3, r3, #1
 8008aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ac4:	623a      	str	r2, [r7, #32]
 8008ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	69f9      	ldr	r1, [r7, #28]
 8008aca:	6a3a      	ldr	r2, [r7, #32]
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e5      	bne.n	8008aa4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e010      	b.n	8008b1e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	69da      	ldr	r2, [r3, #28]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4013      	ands	r3, r2
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	bf0c      	ite	eq
 8008b0c:	2301      	moveq	r3, #1
 8008b0e:	2300      	movne	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	461a      	mov	r2, r3
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	f43f af46 	beq.w	80089a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3770      	adds	r7, #112	; 0x70
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b096      	sub	sp, #88	; 0x58
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	88fa      	ldrh	r2, [r7, #6]
 8008b40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2222      	movs	r2, #34	; 0x22
 8008b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d02d      	beq.n	8008bba <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b64:	4a40      	ldr	r2, [pc, #256]	; (8008c68 <UART_Start_Receive_DMA+0x140>)
 8008b66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b6e:	4a3f      	ldr	r2, [pc, #252]	; (8008c6c <UART_Start_Receive_DMA+0x144>)
 8008b70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b78:	4a3d      	ldr	r2, [pc, #244]	; (8008c70 <UART_Start_Receive_DMA+0x148>)
 8008b7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b82:	2200      	movs	r2, #0
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3324      	adds	r3, #36	; 0x24
 8008b92:	4619      	mov	r1, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b98:	461a      	mov	r2, r3
 8008b9a:	88fb      	ldrh	r3, [r7, #6]
 8008b9c:	f7fa fb3a 	bl	8003214 <HAL_DMA_Start_IT>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d009      	beq.n	8008bba <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2210      	movs	r2, #16
 8008baa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e051      	b.n	8008c5e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d018      	beq.n	8008bf4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008be2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e6      	bne.n	8008bc2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3308      	adds	r3, #8
 8008bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	f043 0301 	orr.w	r3, r3, #1
 8008c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3308      	adds	r3, #8
 8008c12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c14:	637a      	str	r2, [r7, #52]	; 0x34
 8008c16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e5      	bne.n	8008bf4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	613b      	str	r3, [r7, #16]
   return(result);
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3308      	adds	r3, #8
 8008c46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c48:	623a      	str	r2, [r7, #32]
 8008c4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	69f9      	ldr	r1, [r7, #28]
 8008c4e:	6a3a      	ldr	r2, [r7, #32]
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e5      	bne.n	8008c28 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3758      	adds	r7, #88	; 0x58
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	08008dbf 	.word	0x08008dbf
 8008c6c:	08008eeb 	.word	0x08008eeb
 8008c70:	08008f29 	.word	0x08008f29

08008c74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b08f      	sub	sp, #60	; 0x3c
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c9c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e6      	bne.n	8008c7c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cce:	61ba      	str	r2, [r7, #24]
 8008cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6979      	ldr	r1, [r7, #20]
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	613b      	str	r3, [r7, #16]
   return(result);
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e5      	bne.n	8008cae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008cea:	bf00      	nop
 8008cec:	373c      	adds	r7, #60	; 0x3c
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bc80      	pop	{r7}
 8008cf2:	4770      	bx	lr

08008cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b095      	sub	sp, #84	; 0x54
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8008d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e6      	bne.n	8008cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3308      	adds	r3, #8
 8008d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6a3b      	ldr	r3, [r7, #32]
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d44:	f023 0301 	bic.w	r3, r3, #1
 8008d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3308      	adds	r3, #8
 8008d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e3      	bne.n	8008d2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d118      	bne.n	8008da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f023 0310 	bic.w	r3, r3, #16
 8008d82:	647b      	str	r3, [r7, #68]	; 0x44
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8c:	61bb      	str	r3, [r7, #24]
 8008d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6979      	ldr	r1, [r7, #20]
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	613b      	str	r3, [r7, #16]
   return(result);
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e6      	bne.n	8008d6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008db4:	bf00      	nop
 8008db6:	3754      	adds	r7, #84	; 0x54
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr

08008dbe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b09c      	sub	sp, #112	; 0x70
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d171      	bne.n	8008ebe <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008df6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e00:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e08:	e841 2300 	strex	r3, r2, [r1]
 8008e0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e6      	bne.n	8008de2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3308      	adds	r3, #8
 8008e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	e853 3f00 	ldrex	r3, [r3]
 8008e22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e26:	f023 0301 	bic.w	r3, r3, #1
 8008e2a:	667b      	str	r3, [r7, #100]	; 0x64
 8008e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3308      	adds	r3, #8
 8008e32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e34:	647a      	str	r2, [r7, #68]	; 0x44
 8008e36:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e3c:	e841 2300 	strex	r3, r2, [r1]
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e5      	bne.n	8008e14 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3308      	adds	r3, #8
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	623b      	str	r3, [r7, #32]
   return(result);
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e5e:	663b      	str	r3, [r7, #96]	; 0x60
 8008e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3308      	adds	r3, #8
 8008e66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e68:	633a      	str	r2, [r7, #48]	; 0x30
 8008e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e70:	e841 2300 	strex	r3, r2, [r1]
 8008e74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e5      	bne.n	8008e48 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e7e:	2220      	movs	r2, #32
 8008e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d118      	bne.n	8008ebe <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f023 0310 	bic.w	r3, r3, #16
 8008ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	69b9      	ldr	r1, [r7, #24]
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e6      	bne.n	8008e8c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d107      	bne.n	8008edc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ece:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ed6:	f7ff f9f0 	bl	80082ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008eda:	e002      	b.n	8008ee2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008edc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ede:	f7f8 f859 	bl	8000f94 <HAL_UART_RxCpltCallback>
}
 8008ee2:	bf00      	nop
 8008ee4:	3770      	adds	r7, #112	; 0x70
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2201      	movs	r2, #1
 8008efc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d109      	bne.n	8008f1a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f0c:	085b      	lsrs	r3, r3, #1
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	4619      	mov	r1, r3
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff f9d1 	bl	80082ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f18:	e002      	b.n	8008f20 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7ff f9bb 	bl	8008296 <HAL_UART_RxHalfCpltCallback>
}
 8008f20:	bf00      	nop
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f3c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f50:	2b80      	cmp	r3, #128	; 0x80
 8008f52:	d109      	bne.n	8008f68 <UART_DMAError+0x40>
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	2b21      	cmp	r3, #33	; 0x21
 8008f58:	d106      	bne.n	8008f68 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008f62:	6978      	ldr	r0, [r7, #20]
 8008f64:	f7ff fe86 	bl	8008c74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b40      	cmp	r3, #64	; 0x40
 8008f74:	d109      	bne.n	8008f8a <UART_DMAError+0x62>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b22      	cmp	r3, #34	; 0x22
 8008f7a:	d106      	bne.n	8008f8a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008f84:	6978      	ldr	r0, [r7, #20]
 8008f86:	f7ff feb5 	bl	8008cf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f90:	f043 0210 	orr.w	r2, r3, #16
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f9a:	6978      	ldr	r0, [r7, #20]
 8008f9c:	f7ff f984 	bl	80082a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fa0:	bf00      	nop
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7ff f96e 	bl	80082a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fcc:	bf00      	nop
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b088      	sub	sp, #32
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	e853 3f00 	ldrex	r3, [r3]
 8008fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ff0:	61fb      	str	r3, [r7, #28]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	61bb      	str	r3, [r7, #24]
 8008ffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	6979      	ldr	r1, [r7, #20]
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	613b      	str	r3, [r7, #16]
   return(result);
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e6      	bne.n	8008fdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2220      	movs	r2, #32
 8009012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7ff f931 	bl	8008284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009022:	bf00      	nop
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	bc80      	pop	{r7}
 800903a:	4770      	bx	lr

0800903c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr

0800904e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	bc80      	pop	{r7}
 800905e:	4770      	bx	lr

08009060 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800906e:	2b01      	cmp	r3, #1
 8009070:	d101      	bne.n	8009076 <HAL_UARTEx_DisableFifoMode+0x16>
 8009072:	2302      	movs	r3, #2
 8009074:	e027      	b.n	80090c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2224      	movs	r2, #36	; 0x24
 8009082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0201 	bic.w	r2, r2, #1
 800909c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d101      	bne.n	80090e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80090e4:	2302      	movs	r3, #2
 80090e6:	e02d      	b.n	8009144 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2224      	movs	r2, #36	; 0x24
 80090f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0201 	bic.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f84f 	bl	80091c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2220      	movs	r2, #32
 8009136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800915c:	2b01      	cmp	r3, #1
 800915e:	d101      	bne.n	8009164 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009160:	2302      	movs	r3, #2
 8009162:	e02d      	b.n	80091c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2224      	movs	r2, #36	; 0x24
 8009170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0201 	bic.w	r2, r2, #1
 800918a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f811 	bl	80091c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d108      	bne.n	80091ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80091e8:	e031      	b.n	800924e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80091ea:	2308      	movs	r3, #8
 80091ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80091ee:	2308      	movs	r3, #8
 80091f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	0e5b      	lsrs	r3, r3, #25
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	0f5b      	lsrs	r3, r3, #29
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009212:	7bbb      	ldrb	r3, [r7, #14]
 8009214:	7b3a      	ldrb	r2, [r7, #12]
 8009216:	4910      	ldr	r1, [pc, #64]	; (8009258 <UARTEx_SetNbDataToProcess+0x90>)
 8009218:	5c8a      	ldrb	r2, [r1, r2]
 800921a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800921e:	7b3a      	ldrb	r2, [r7, #12]
 8009220:	490e      	ldr	r1, [pc, #56]	; (800925c <UARTEx_SetNbDataToProcess+0x94>)
 8009222:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009224:	fb93 f3f2 	sdiv	r3, r3, r2
 8009228:	b29a      	uxth	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	7b7a      	ldrb	r2, [r7, #13]
 8009234:	4908      	ldr	r1, [pc, #32]	; (8009258 <UARTEx_SetNbDataToProcess+0x90>)
 8009236:	5c8a      	ldrb	r2, [r1, r2]
 8009238:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800923c:	7b7a      	ldrb	r2, [r7, #13]
 800923e:	4907      	ldr	r1, [pc, #28]	; (800925c <UARTEx_SetNbDataToProcess+0x94>)
 8009240:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009242:	fb93 f3f2 	sdiv	r3, r3, r2
 8009246:	b29a      	uxth	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800924e:	bf00      	nop
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr
 8009258:	0800ddd8 	.word	0x0800ddd8
 800925c:	0800dde0 	.word	0x0800dde0

08009260 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af02      	add	r7, sp, #8
 8009266:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8009268:	4a24      	ldr	r2, [pc, #144]	; (80092fc <RadioInit+0x9c>)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800926e:	4b24      	ldr	r3, [pc, #144]	; (8009300 <RadioInit+0xa0>)
 8009270:	2200      	movs	r2, #0
 8009272:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8009274:	4b22      	ldr	r3, [pc, #136]	; (8009300 <RadioInit+0xa0>)
 8009276:	2200      	movs	r2, #0
 8009278:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800927a:	4b21      	ldr	r3, [pc, #132]	; (8009300 <RadioInit+0xa0>)
 800927c:	2200      	movs	r2, #0
 800927e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009280:	4b1f      	ldr	r3, [pc, #124]	; (8009300 <RadioInit+0xa0>)
 8009282:	2200      	movs	r2, #0
 8009284:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8009286:	481f      	ldr	r0, [pc, #124]	; (8009304 <RadioInit+0xa4>)
 8009288:	f001 ff88 	bl	800b19c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 800928c:	4b1c      	ldr	r3, [pc, #112]	; (8009300 <RadioInit+0xa0>)
 800928e:	2200      	movs	r2, #0
 8009290:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8009292:	4b1b      	ldr	r3, [pc, #108]	; (8009300 <RadioInit+0xa0>)
 8009294:	2200      	movs	r2, #0
 8009296:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8009298:	f002 fa1c 	bl	800b6d4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800929c:	2100      	movs	r1, #0
 800929e:	2000      	movs	r0, #0
 80092a0:	f002 fde8 	bl	800be74 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80092a4:	2204      	movs	r2, #4
 80092a6:	2100      	movs	r1, #0
 80092a8:	2001      	movs	r0, #1
 80092aa:	f002 fba5 	bl	800b9f8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80092ae:	2300      	movs	r3, #0
 80092b0:	2200      	movs	r2, #0
 80092b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80092b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80092ba:	f002 fad5 	bl	800b868 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80092be:	f000 fe91 	bl	8009fe4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80092c2:	2300      	movs	r3, #0
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	4b10      	ldr	r3, [pc, #64]	; (8009308 <RadioInit+0xa8>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80092ce:	480f      	ldr	r0, [pc, #60]	; (800930c <RadioInit+0xac>)
 80092d0:	f003 fb1e 	bl	800c910 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80092d4:	2300      	movs	r3, #0
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <RadioInit+0xb0>)
 80092da:	2200      	movs	r2, #0
 80092dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80092e0:	480c      	ldr	r0, [pc, #48]	; (8009314 <RadioInit+0xb4>)
 80092e2:	f003 fb15 	bl	800c910 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80092e6:	4809      	ldr	r0, [pc, #36]	; (800930c <RadioInit+0xac>)
 80092e8:	f003 fbb6 	bl	800ca58 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80092ec:	4809      	ldr	r0, [pc, #36]	; (8009314 <RadioInit+0xb4>)
 80092ee:	f003 fbb3 	bl	800ca58 <UTIL_TIMER_Stop>
}
 80092f2:	bf00      	nop
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	2000074c 	.word	0x2000074c
 8009300:	20000750 	.word	0x20000750
 8009304:	0800a3dd 	.word	0x0800a3dd
 8009308:	0800a365 	.word	0x0800a365
 800930c:	200007ac 	.word	0x200007ac
 8009310:	0800a379 	.word	0x0800a379
 8009314:	200007c4 	.word	0x200007c4

08009318 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800931c:	f001 ff86 	bl	800b22c <SUBGRF_GetOperatingMode>
 8009320:	4603      	mov	r3, r0
 8009322:	2b07      	cmp	r3, #7
 8009324:	d00a      	beq.n	800933c <RadioGetStatus+0x24>
 8009326:	2b07      	cmp	r3, #7
 8009328:	dc0a      	bgt.n	8009340 <RadioGetStatus+0x28>
 800932a:	2b04      	cmp	r3, #4
 800932c:	d002      	beq.n	8009334 <RadioGetStatus+0x1c>
 800932e:	2b05      	cmp	r3, #5
 8009330:	d002      	beq.n	8009338 <RadioGetStatus+0x20>
 8009332:	e005      	b.n	8009340 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8009334:	2302      	movs	r3, #2
 8009336:	e004      	b.n	8009342 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8009338:	2301      	movs	r3, #1
 800933a:	e002      	b.n	8009342 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800933c:	2303      	movs	r3, #3
 800933e:	e000      	b.n	8009342 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8009340:	2300      	movs	r3, #0
    }
}
 8009342:	4618      	mov	r0, r3
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8009352:	4a2a      	ldr	r2, [pc, #168]	; (80093fc <RadioSetModem+0xb4>)
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	4618      	mov	r0, r3
 800935c:	f003 f95d 	bl	800c61a <RFW_SetRadioModem>
    switch( modem )
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	2b05      	cmp	r3, #5
 8009364:	d80e      	bhi.n	8009384 <RadioSetModem+0x3c>
 8009366:	a201      	add	r2, pc, #4	; (adr r2, 800936c <RadioSetModem+0x24>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	08009393 	.word	0x08009393
 8009370:	080093a1 	.word	0x080093a1
 8009374:	08009385 	.word	0x08009385
 8009378:	080093c7 	.word	0x080093c7
 800937c:	080093d5 	.word	0x080093d5
 8009380:	080093e3 	.word	0x080093e3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8009384:	2003      	movs	r0, #3
 8009386:	f002 fb11 	bl	800b9ac <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800938a:	4b1c      	ldr	r3, [pc, #112]	; (80093fc <RadioSetModem+0xb4>)
 800938c:	2200      	movs	r2, #0
 800938e:	735a      	strb	r2, [r3, #13]
        break;
 8009390:	e02f      	b.n	80093f2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8009392:	2000      	movs	r0, #0
 8009394:	f002 fb0a 	bl	800b9ac <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009398:	4b18      	ldr	r3, [pc, #96]	; (80093fc <RadioSetModem+0xb4>)
 800939a:	2200      	movs	r2, #0
 800939c:	735a      	strb	r2, [r3, #13]
        break;
 800939e:	e028      	b.n	80093f2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80093a0:	2001      	movs	r0, #1
 80093a2:	f002 fb03 	bl	800b9ac <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80093a6:	4b15      	ldr	r3, [pc, #84]	; (80093fc <RadioSetModem+0xb4>)
 80093a8:	7b5a      	ldrb	r2, [r3, #13]
 80093aa:	4b14      	ldr	r3, [pc, #80]	; (80093fc <RadioSetModem+0xb4>)
 80093ac:	7b1b      	ldrb	r3, [r3, #12]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d01e      	beq.n	80093f0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80093b2:	4b12      	ldr	r3, [pc, #72]	; (80093fc <RadioSetModem+0xb4>)
 80093b4:	7b1a      	ldrb	r2, [r3, #12]
 80093b6:	4b11      	ldr	r3, [pc, #68]	; (80093fc <RadioSetModem+0xb4>)
 80093b8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80093ba:	4b10      	ldr	r3, [pc, #64]	; (80093fc <RadioSetModem+0xb4>)
 80093bc:	7b5b      	ldrb	r3, [r3, #13]
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 ff9a 	bl	800a2f8 <RadioSetPublicNetwork>
        }
        break;
 80093c4:	e014      	b.n	80093f0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80093c6:	2002      	movs	r0, #2
 80093c8:	f002 faf0 	bl	800b9ac <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80093cc:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <RadioSetModem+0xb4>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	735a      	strb	r2, [r3, #13]
        break;
 80093d2:	e00e      	b.n	80093f2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80093d4:	2002      	movs	r0, #2
 80093d6:	f002 fae9 	bl	800b9ac <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80093da:	4b08      	ldr	r3, [pc, #32]	; (80093fc <RadioSetModem+0xb4>)
 80093dc:	2200      	movs	r2, #0
 80093de:	735a      	strb	r2, [r3, #13]
        break;
 80093e0:	e007      	b.n	80093f2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80093e2:	2000      	movs	r0, #0
 80093e4:	f002 fae2 	bl	800b9ac <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80093e8:	4b04      	ldr	r3, [pc, #16]	; (80093fc <RadioSetModem+0xb4>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	735a      	strb	r2, [r3, #13]
        break;
 80093ee:	e000      	b.n	80093f2 <RadioSetModem+0xaa>
        break;
 80093f0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80093f2:	bf00      	nop
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20000750 	.word	0x20000750

08009400 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f002 fa89 	bl	800b920 <SUBGRF_SetRfFrequency>
}
 800940e:	bf00      	nop
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b090      	sub	sp, #64	; 0x40
 800941a:	af0a      	add	r7, sp, #40	; 0x28
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	603b      	str	r3, [r7, #0]
 8009422:	4613      	mov	r3, r2
 8009424:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8009426:	2301      	movs	r3, #1
 8009428:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8009432:	f000 fdea 	bl	800a00a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8009436:	2000      	movs	r0, #0
 8009438:	f7ff ff86 	bl	8009348 <RadioSetModem>

    RadioSetChannel( freq );
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7ff ffdf 	bl	8009400 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8009442:	2301      	movs	r3, #1
 8009444:	9309      	str	r3, [sp, #36]	; 0x24
 8009446:	2300      	movs	r3, #0
 8009448:	9308      	str	r3, [sp, #32]
 800944a:	2300      	movs	r3, #0
 800944c:	9307      	str	r3, [sp, #28]
 800944e:	2300      	movs	r3, #0
 8009450:	9306      	str	r3, [sp, #24]
 8009452:	2300      	movs	r3, #0
 8009454:	9305      	str	r3, [sp, #20]
 8009456:	2300      	movs	r3, #0
 8009458:	9304      	str	r3, [sp, #16]
 800945a:	2300      	movs	r3, #0
 800945c:	9303      	str	r3, [sp, #12]
 800945e:	2300      	movs	r3, #0
 8009460:	9302      	str	r3, [sp, #8]
 8009462:	2303      	movs	r3, #3
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	2300      	movs	r3, #0
 800946c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009470:	68b9      	ldr	r1, [r7, #8]
 8009472:	2000      	movs	r0, #0
 8009474:	f000 f83c 	bl	80094f0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8009478:	2000      	movs	r0, #0
 800947a:	f000 fdcd 	bl	800a018 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800947e:	f000 ff69 	bl	800a354 <RadioGetWakeupTime>
 8009482:	4603      	mov	r3, r0
 8009484:	4618      	mov	r0, r3
 8009486:	f7f8 ffed 	bl	8002464 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800948a:	f003 fb7f 	bl	800cb8c <UTIL_TIMER_GetCurrentTime>
 800948e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8009490:	e00d      	b.n	80094ae <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8009492:	2000      	movs	r0, #0
 8009494:	f000 feae 	bl	800a1f4 <RadioRssi>
 8009498:	4603      	mov	r3, r0
 800949a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800949c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80094a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	dd02      	ble.n	80094ae <RadioIsChannelFree+0x98>
        {
            status = false;
 80094a8:	2300      	movs	r3, #0
 80094aa:	75fb      	strb	r3, [r7, #23]
            break;
 80094ac:	e006      	b.n	80094bc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80094ae:	6938      	ldr	r0, [r7, #16]
 80094b0:	f003 fb7e 	bl	800cbb0 <UTIL_TIMER_GetElapsedTime>
 80094b4:	4602      	mov	r2, r0
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d8ea      	bhi.n	8009492 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80094bc:	f000 fda5 	bl	800a00a <RadioStandby>

    return status;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80094d4:	2300      	movs	r3, #0
 80094d6:	2200      	movs	r2, #0
 80094d8:	2100      	movs	r1, #0
 80094da:	2000      	movs	r0, #0
 80094dc:	f002 f9c4 	bl	800b868 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80094e0:	f001 ff75 	bl	800b3ce <SUBGRF_GetRandom>
 80094e4:	6078      	str	r0, [r7, #4]

    return rnd;
 80094e6:	687b      	ldr	r3, [r7, #4]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	; 0x28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	607a      	str	r2, [r7, #4]
 80094fa:	461a      	mov	r2, r3
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]
 8009500:	4613      	mov	r3, r2
 8009502:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8009504:	4ab9      	ldr	r2, [pc, #740]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009506:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800950a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 800950c:	f003 f843 	bl	800c596 <RFW_DeInit>
    if( rxContinuous == true )
 8009510:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800951c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8009524:	4ab2      	ldr	r2, [pc, #712]	; (80097f0 <RadioSetRxConfig+0x300>)
 8009526:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800952a:	7013      	strb	r3, [r2, #0]
 800952c:	e002      	b.n	8009534 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800952e:	4bb0      	ldr	r3, [pc, #704]	; (80097f0 <RadioSetRxConfig+0x300>)
 8009530:	22ff      	movs	r2, #255	; 0xff
 8009532:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	2b05      	cmp	r3, #5
 8009538:	d009      	beq.n	800954e <RadioSetRxConfig+0x5e>
 800953a:	2b05      	cmp	r3, #5
 800953c:	f300 81d7 	bgt.w	80098ee <RadioSetRxConfig+0x3fe>
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80bf 	beq.w	80096c4 <RadioSetRxConfig+0x1d4>
 8009546:	2b01      	cmp	r3, #1
 8009548:	f000 8124 	beq.w	8009794 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800954c:	e1cf      	b.n	80098ee <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800954e:	2001      	movs	r0, #1
 8009550:	f002 f882 	bl	800b658 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009554:	4ba5      	ldr	r3, [pc, #660]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800955c:	4aa3      	ldr	r2, [pc, #652]	; (80097ec <RadioSetRxConfig+0x2fc>)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8009562:	4ba2      	ldr	r3, [pc, #648]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009564:	2209      	movs	r2, #9
 8009566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800956a:	4ba0      	ldr	r3, [pc, #640]	; (80097ec <RadioSetRxConfig+0x2fc>)
 800956c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009570:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009572:	68b8      	ldr	r0, [r7, #8]
 8009574:	f002 ff42 	bl	800c3fc <SUBGRF_GetFskBandwidthRegValue>
 8009578:	4603      	mov	r3, r0
 800957a:	461a      	mov	r2, r3
 800957c:	4b9b      	ldr	r3, [pc, #620]	; (80097ec <RadioSetRxConfig+0x2fc>)
 800957e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009582:	4b9a      	ldr	r3, [pc, #616]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009584:	2200      	movs	r2, #0
 8009586:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009588:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800958a:	00db      	lsls	r3, r3, #3
 800958c:	b29a      	uxth	r2, r3
 800958e:	4b97      	ldr	r3, [pc, #604]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009590:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8009592:	4b96      	ldr	r3, [pc, #600]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009594:	2200      	movs	r2, #0
 8009596:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8009598:	4b94      	ldr	r3, [pc, #592]	; (80097ec <RadioSetRxConfig+0x2fc>)
 800959a:	2210      	movs	r2, #16
 800959c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800959e:	4b93      	ldr	r3, [pc, #588]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80095a4:	4b91      	ldr	r3, [pc, #580]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80095aa:	4b91      	ldr	r3, [pc, #580]	; (80097f0 <RadioSetRxConfig+0x300>)
 80095ac:	781a      	ldrb	r2, [r3, #0]
 80095ae:	4b8f      	ldr	r3, [pc, #572]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80095b0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80095b2:	4b8e      	ldr	r3, [pc, #568]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80095b4:	2201      	movs	r2, #1
 80095b6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80095b8:	4b8c      	ldr	r3, [pc, #560]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80095be:	2005      	movs	r0, #5
 80095c0:	f7ff fec2 	bl	8009348 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80095c4:	488b      	ldr	r0, [pc, #556]	; (80097f4 <RadioSetRxConfig+0x304>)
 80095c6:	f002 fae5 	bl	800bb94 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80095ca:	488b      	ldr	r0, [pc, #556]	; (80097f8 <RadioSetRxConfig+0x308>)
 80095cc:	f002 fbb4 	bl	800bd38 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80095d0:	4a8a      	ldr	r2, [pc, #552]	; (80097fc <RadioSetRxConfig+0x30c>)
 80095d2:	f107 031c 	add.w	r3, r7, #28
 80095d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095da:	e883 0003 	stmia.w	r3, {r0, r1}
 80095de:	f107 031c 	add.w	r3, r7, #28
 80095e2:	4618      	mov	r0, r3
 80095e4:	f001 fe71 	bl	800b2ca <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80095e8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80095ec:	f001 febc 	bl	800b368 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80095f0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80095f4:	f000 fe1d 	bl	800a232 <RadioRead>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80095fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009602:	f023 0310 	bic.w	r3, r3, #16
 8009606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800960a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800960e:	4619      	mov	r1, r3
 8009610:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8009614:	f000 fdfb 	bl	800a20e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8009618:	2104      	movs	r1, #4
 800961a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800961e:	f000 fdf6 	bl	800a20e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8009622:	f640 009b 	movw	r0, #2203	; 0x89b
 8009626:	f000 fe04 	bl	800a232 <RadioRead>
 800962a:	4603      	mov	r3, r0
 800962c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009634:	f023 031c 	bic.w	r3, r3, #28
 8009638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800963c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009640:	f043 0308 	orr.w	r3, r3, #8
 8009644:	b2db      	uxtb	r3, r3
 8009646:	4619      	mov	r1, r3
 8009648:	f640 009b 	movw	r0, #2203	; 0x89b
 800964c:	f000 fddf 	bl	800a20e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8009650:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8009654:	f000 fded 	bl	800a232 <RadioRead>
 8009658:	4603      	mov	r3, r0
 800965a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800965e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009662:	f023 0318 	bic.w	r3, r3, #24
 8009666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800966a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800966e:	f043 0318 	orr.w	r3, r3, #24
 8009672:	b2db      	uxtb	r3, r3
 8009674:	4619      	mov	r1, r3
 8009676:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800967a:	f000 fdc8 	bl	800a20e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800967e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009682:	f000 fdd6 	bl	800a232 <RadioRead>
 8009686:	4603      	mov	r3, r0
 8009688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800968c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8009698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800969c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	4619      	mov	r1, r3
 80096a4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80096a8:	f000 fdb1 	bl	800a20e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80096ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80096ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80096b2:	fb02 f303 	mul.w	r3, r2, r3
 80096b6:	461a      	mov	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80096be:	4a4b      	ldr	r2, [pc, #300]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80096c0:	6093      	str	r3, [r2, #8]
            break;
 80096c2:	e115      	b.n	80098f0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80096c4:	2000      	movs	r0, #0
 80096c6:	f001 ffc7 	bl	800b658 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80096ca:	4b48      	ldr	r3, [pc, #288]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80096d2:	4a46      	ldr	r2, [pc, #280]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80096d8:	4b44      	ldr	r3, [pc, #272]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80096da:	220b      	movs	r2, #11
 80096dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80096e0:	68b8      	ldr	r0, [r7, #8]
 80096e2:	f002 fe8b 	bl	800c3fc <SUBGRF_GetFskBandwidthRegValue>
 80096e6:	4603      	mov	r3, r0
 80096e8:	461a      	mov	r2, r3
 80096ea:	4b40      	ldr	r3, [pc, #256]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80096ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80096f0:	4b3e      	ldr	r3, [pc, #248]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80096f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	4b3b      	ldr	r3, [pc, #236]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80096fe:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009700:	4b3a      	ldr	r3, [pc, #232]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009702:	2204      	movs	r2, #4
 8009704:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8009706:	4b39      	ldr	r3, [pc, #228]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009708:	2218      	movs	r2, #24
 800970a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800970c:	4b37      	ldr	r3, [pc, #220]	; (80097ec <RadioSetRxConfig+0x2fc>)
 800970e:	2200      	movs	r2, #0
 8009710:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8009712:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009716:	f083 0301 	eor.w	r3, r3, #1
 800971a:	b2db      	uxtb	r3, r3
 800971c:	461a      	mov	r2, r3
 800971e:	4b33      	ldr	r3, [pc, #204]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009720:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8009722:	4b33      	ldr	r3, [pc, #204]	; (80097f0 <RadioSetRxConfig+0x300>)
 8009724:	781a      	ldrb	r2, [r3, #0]
 8009726:	4b31      	ldr	r3, [pc, #196]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009728:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800972a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009732:	4b2e      	ldr	r3, [pc, #184]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009734:	22f2      	movs	r2, #242	; 0xf2
 8009736:	75da      	strb	r2, [r3, #23]
 8009738:	e002      	b.n	8009740 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800973a:	4b2c      	ldr	r3, [pc, #176]	; (80097ec <RadioSetRxConfig+0x2fc>)
 800973c:	2201      	movs	r2, #1
 800973e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009740:	4b2a      	ldr	r3, [pc, #168]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009742:	2201      	movs	r2, #1
 8009744:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8009746:	f000 fc60 	bl	800a00a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800974a:	2000      	movs	r0, #0
 800974c:	f7ff fdfc 	bl	8009348 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009750:	4828      	ldr	r0, [pc, #160]	; (80097f4 <RadioSetRxConfig+0x304>)
 8009752:	f002 fa1f 	bl	800bb94 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009756:	4828      	ldr	r0, [pc, #160]	; (80097f8 <RadioSetRxConfig+0x308>)
 8009758:	f002 faee 	bl	800bd38 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800975c:	4a28      	ldr	r2, [pc, #160]	; (8009800 <RadioSetRxConfig+0x310>)
 800975e:	f107 0314 	add.w	r3, r7, #20
 8009762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009766:	e883 0003 	stmia.w	r3, {r0, r1}
 800976a:	f107 0314 	add.w	r3, r7, #20
 800976e:	4618      	mov	r0, r3
 8009770:	f001 fdab 	bl	800b2ca <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009774:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009778:	f001 fdf6 	bl	800b368 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800977c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800977e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009782:	fb02 f303 	mul.w	r3, r2, r3
 8009786:	461a      	mov	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	fbb2 f3f3 	udiv	r3, r2, r3
 800978e:	4a17      	ldr	r2, [pc, #92]	; (80097ec <RadioSetRxConfig+0x2fc>)
 8009790:	6093      	str	r3, [r2, #8]
            break;
 8009792:	e0ad      	b.n	80098f0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009794:	2000      	movs	r0, #0
 8009796:	f001 ff5f 	bl	800b658 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800979a:	4b14      	ldr	r3, [pc, #80]	; (80097ec <RadioSetRxConfig+0x2fc>)
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	4b11      	ldr	r3, [pc, #68]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80097a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80097ac:	4a15      	ldr	r2, [pc, #84]	; (8009804 <RadioSetRxConfig+0x314>)
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	4413      	add	r3, r2
 80097b2:	781a      	ldrb	r2, [r3, #0]
 80097b4:	4b0d      	ldr	r3, [pc, #52]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80097b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80097ba:	4a0c      	ldr	r2, [pc, #48]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d105      	bne.n	80097d4 <RadioSetRxConfig+0x2e4>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b0b      	cmp	r3, #11
 80097cc:	d008      	beq.n	80097e0 <RadioSetRxConfig+0x2f0>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b0c      	cmp	r3, #12
 80097d2:	d005      	beq.n	80097e0 <RadioSetRxConfig+0x2f0>
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d116      	bne.n	8009808 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b0c      	cmp	r3, #12
 80097de:	d113      	bne.n	8009808 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80097e0:	4b02      	ldr	r3, [pc, #8]	; (80097ec <RadioSetRxConfig+0x2fc>)
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80097e8:	e012      	b.n	8009810 <RadioSetRxConfig+0x320>
 80097ea:	bf00      	nop
 80097ec:	20000750 	.word	0x20000750
 80097f0:	20000015 	.word	0x20000015
 80097f4:	20000788 	.word	0x20000788
 80097f8:	2000075e 	.word	0x2000075e
 80097fc:	0800dcd0 	.word	0x0800dcd0
 8009800:	0800dcd8 	.word	0x0800dcd8
 8009804:	0800de74 	.word	0x0800de74
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009808:	4b3b      	ldr	r3, [pc, #236]	; (80098f8 <RadioSetRxConfig+0x408>)
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009810:	4b39      	ldr	r3, [pc, #228]	; (80098f8 <RadioSetRxConfig+0x408>)
 8009812:	2201      	movs	r2, #1
 8009814:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009816:	4b38      	ldr	r3, [pc, #224]	; (80098f8 <RadioSetRxConfig+0x408>)
 8009818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800981c:	2b05      	cmp	r3, #5
 800981e:	d004      	beq.n	800982a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8009820:	4b35      	ldr	r3, [pc, #212]	; (80098f8 <RadioSetRxConfig+0x408>)
 8009822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009826:	2b06      	cmp	r3, #6
 8009828:	d10a      	bne.n	8009840 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800982a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800982c:	2b0b      	cmp	r3, #11
 800982e:	d803      	bhi.n	8009838 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009830:	4b31      	ldr	r3, [pc, #196]	; (80098f8 <RadioSetRxConfig+0x408>)
 8009832:	220c      	movs	r2, #12
 8009834:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009836:	e006      	b.n	8009846 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009838:	4a2f      	ldr	r2, [pc, #188]	; (80098f8 <RadioSetRxConfig+0x408>)
 800983a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800983c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800983e:	e002      	b.n	8009846 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009840:	4a2d      	ldr	r2, [pc, #180]	; (80098f8 <RadioSetRxConfig+0x408>)
 8009842:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009844:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009846:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800984a:	4b2b      	ldr	r3, [pc, #172]	; (80098f8 <RadioSetRxConfig+0x408>)
 800984c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800984e:	4b2b      	ldr	r3, [pc, #172]	; (80098fc <RadioSetRxConfig+0x40c>)
 8009850:	781a      	ldrb	r2, [r3, #0]
 8009852:	4b29      	ldr	r3, [pc, #164]	; (80098f8 <RadioSetRxConfig+0x408>)
 8009854:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009856:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800985a:	4b27      	ldr	r3, [pc, #156]	; (80098f8 <RadioSetRxConfig+0x408>)
 800985c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009860:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8009864:	4b24      	ldr	r3, [pc, #144]	; (80098f8 <RadioSetRxConfig+0x408>)
 8009866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800986a:	f000 fbce 	bl	800a00a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800986e:	2001      	movs	r0, #1
 8009870:	f7ff fd6a 	bl	8009348 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009874:	4822      	ldr	r0, [pc, #136]	; (8009900 <RadioSetRxConfig+0x410>)
 8009876:	f002 f98d 	bl	800bb94 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800987a:	4822      	ldr	r0, [pc, #136]	; (8009904 <RadioSetRxConfig+0x414>)
 800987c:	f002 fa5c 	bl	800bd38 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009880:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009882:	b2db      	uxtb	r3, r3
 8009884:	4618      	mov	r0, r3
 8009886:	f001 fef6 	bl	800b676 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800988a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800988e:	f002 fbaf 	bl	800bff0 <SUBGRF_ReadRegister>
 8009892:	4603      	mov	r3, r0
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	b2db      	uxtb	r3, r3
 800989a:	4619      	mov	r1, r3
 800989c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80098a0:	f002 fb92 	bl	800bfc8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80098a4:	4b14      	ldr	r3, [pc, #80]	; (80098f8 <RadioSetRxConfig+0x408>)
 80098a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d10d      	bne.n	80098ca <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80098ae:	f240 7036 	movw	r0, #1846	; 0x736
 80098b2:	f002 fb9d 	bl	800bff0 <SUBGRF_ReadRegister>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f023 0304 	bic.w	r3, r3, #4
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	4619      	mov	r1, r3
 80098c0:	f240 7036 	movw	r0, #1846	; 0x736
 80098c4:	f002 fb80 	bl	800bfc8 <SUBGRF_WriteRegister>
 80098c8:	e00c      	b.n	80098e4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80098ca:	f240 7036 	movw	r0, #1846	; 0x736
 80098ce:	f002 fb8f 	bl	800bff0 <SUBGRF_ReadRegister>
 80098d2:	4603      	mov	r3, r0
 80098d4:	f043 0304 	orr.w	r3, r3, #4
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	4619      	mov	r1, r3
 80098dc:	f240 7036 	movw	r0, #1846	; 0x736
 80098e0:	f002 fb72 	bl	800bfc8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80098e4:	4b04      	ldr	r3, [pc, #16]	; (80098f8 <RadioSetRxConfig+0x408>)
 80098e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098ea:	609a      	str	r2, [r3, #8]
            break;
 80098ec:	e000      	b.n	80098f0 <RadioSetRxConfig+0x400>
            break;
 80098ee:	bf00      	nop
    }
}
 80098f0:	bf00      	nop
 80098f2:	3728      	adds	r7, #40	; 0x28
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	20000750 	.word	0x20000750
 80098fc:	20000015 	.word	0x20000015
 8009900:	20000788 	.word	0x20000788
 8009904:	2000075e 	.word	0x2000075e

08009908 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	60ba      	str	r2, [r7, #8]
 8009910:	607b      	str	r3, [r7, #4]
 8009912:	4603      	mov	r3, r0
 8009914:	73fb      	strb	r3, [r7, #15]
 8009916:	460b      	mov	r3, r1
 8009918:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800991a:	f002 fe3c 	bl	800c596 <RFW_DeInit>
    switch( modem )
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	2b04      	cmp	r3, #4
 8009922:	f000 80c7 	beq.w	8009ab4 <RadioSetTxConfig+0x1ac>
 8009926:	2b04      	cmp	r3, #4
 8009928:	f300 80d6 	bgt.w	8009ad8 <RadioSetTxConfig+0x1d0>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <RadioSetTxConfig+0x2e>
 8009930:	2b01      	cmp	r3, #1
 8009932:	d059      	beq.n	80099e8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8009934:	e0d0      	b.n	8009ad8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009936:	4b77      	ldr	r3, [pc, #476]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800993e:	4a75      	ldr	r2, [pc, #468]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009944:	4b73      	ldr	r3, [pc, #460]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009946:	220b      	movs	r2, #11
 8009948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f002 fd55 	bl	800c3fc <SUBGRF_GetFskBandwidthRegValue>
 8009952:	4603      	mov	r3, r0
 8009954:	461a      	mov	r2, r3
 8009956:	4b6f      	ldr	r3, [pc, #444]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800995c:	4a6d      	ldr	r2, [pc, #436]	; (8009b14 <RadioSetTxConfig+0x20c>)
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009962:	4b6c      	ldr	r3, [pc, #432]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009964:	2200      	movs	r2, #0
 8009966:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009968:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	b29a      	uxth	r2, r3
 800996e:	4b69      	ldr	r3, [pc, #420]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009970:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009972:	4b68      	ldr	r3, [pc, #416]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009974:	2204      	movs	r2, #4
 8009976:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8009978:	4b66      	ldr	r3, [pc, #408]	; (8009b14 <RadioSetTxConfig+0x20c>)
 800997a:	2218      	movs	r2, #24
 800997c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800997e:	4b65      	ldr	r3, [pc, #404]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009980:	2200      	movs	r2, #0
 8009982:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8009984:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009988:	f083 0301 	eor.w	r3, r3, #1
 800998c:	b2db      	uxtb	r3, r3
 800998e:	461a      	mov	r2, r3
 8009990:	4b60      	ldr	r3, [pc, #384]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009992:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8009994:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800999c:	4b5d      	ldr	r3, [pc, #372]	; (8009b14 <RadioSetTxConfig+0x20c>)
 800999e:	22f2      	movs	r2, #242	; 0xf2
 80099a0:	75da      	strb	r2, [r3, #23]
 80099a2:	e002      	b.n	80099aa <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80099a4:	4b5b      	ldr	r3, [pc, #364]	; (8009b14 <RadioSetTxConfig+0x20c>)
 80099a6:	2201      	movs	r2, #1
 80099a8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80099aa:	4b5a      	ldr	r3, [pc, #360]	; (8009b14 <RadioSetTxConfig+0x20c>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80099b0:	f000 fb2b 	bl	800a00a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80099b4:	2000      	movs	r0, #0
 80099b6:	f7ff fcc7 	bl	8009348 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80099ba:	4857      	ldr	r0, [pc, #348]	; (8009b18 <RadioSetTxConfig+0x210>)
 80099bc:	f002 f8ea 	bl	800bb94 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099c0:	4856      	ldr	r0, [pc, #344]	; (8009b1c <RadioSetTxConfig+0x214>)
 80099c2:	f002 f9b9 	bl	800bd38 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80099c6:	4a56      	ldr	r2, [pc, #344]	; (8009b20 <RadioSetTxConfig+0x218>)
 80099c8:	f107 0310 	add.w	r3, r7, #16
 80099cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80099d4:	f107 0310 	add.w	r3, r7, #16
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 fc76 	bl	800b2ca <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80099de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80099e2:	f001 fcc1 	bl	800b368 <SUBGRF_SetWhiteningSeed>
            break;
 80099e6:	e078      	b.n	8009ada <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80099e8:	4b4a      	ldr	r3, [pc, #296]	; (8009b14 <RadioSetTxConfig+0x20c>)
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	4b47      	ldr	r3, [pc, #284]	; (8009b14 <RadioSetTxConfig+0x20c>)
 80099f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80099fa:	4a4a      	ldr	r2, [pc, #296]	; (8009b24 <RadioSetTxConfig+0x21c>)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4413      	add	r3, r2
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	4b44      	ldr	r3, [pc, #272]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8009a08:	4a42      	ldr	r2, [pc, #264]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a0e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d105      	bne.n	8009a24 <RadioSetTxConfig+0x11c>
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	2b0b      	cmp	r3, #11
 8009a1c:	d008      	beq.n	8009a30 <RadioSetTxConfig+0x128>
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	2b0c      	cmp	r3, #12
 8009a22:	d005      	beq.n	8009a30 <RadioSetTxConfig+0x128>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d107      	bne.n	8009a3a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	2b0c      	cmp	r3, #12
 8009a2e:	d104      	bne.n	8009a3a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009a30:	4b38      	ldr	r3, [pc, #224]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009a38:	e003      	b.n	8009a42 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009a3a:	4b36      	ldr	r3, [pc, #216]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009a42:	4b34      	ldr	r3, [pc, #208]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a44:	2201      	movs	r2, #1
 8009a46:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009a48:	4b32      	ldr	r3, [pc, #200]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	d004      	beq.n	8009a5c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8009a52:	4b30      	ldr	r3, [pc, #192]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009a58:	2b06      	cmp	r3, #6
 8009a5a:	d10a      	bne.n	8009a72 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8009a5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a5e:	2b0b      	cmp	r3, #11
 8009a60:	d803      	bhi.n	8009a6a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009a62:	4b2c      	ldr	r3, [pc, #176]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a64:	220c      	movs	r2, #12
 8009a66:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009a68:	e006      	b.n	8009a78 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009a6a:	4a2a      	ldr	r2, [pc, #168]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a6e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8009a70:	e002      	b.n	8009a78 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009a72:	4a28      	ldr	r2, [pc, #160]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a76:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009a78:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009a7c:	4b25      	ldr	r3, [pc, #148]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a7e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009a80:	4b29      	ldr	r3, [pc, #164]	; (8009b28 <RadioSetTxConfig+0x220>)
 8009a82:	781a      	ldrb	r2, [r3, #0]
 8009a84:	4b23      	ldr	r3, [pc, #140]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a86:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009a88:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009a8c:	4b21      	ldr	r3, [pc, #132]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a8e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009a92:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8009a96:	4b1f      	ldr	r3, [pc, #124]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009a98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8009a9c:	f000 fab5 	bl	800a00a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	f7ff fc51 	bl	8009348 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009aa6:	481c      	ldr	r0, [pc, #112]	; (8009b18 <RadioSetTxConfig+0x210>)
 8009aa8:	f002 f874 	bl	800bb94 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009aac:	481b      	ldr	r0, [pc, #108]	; (8009b1c <RadioSetTxConfig+0x214>)
 8009aae:	f002 f943 	bl	800bd38 <SUBGRF_SetPacketParams>
            break;
 8009ab2:	e012      	b.n	8009ada <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8009ab4:	2004      	movs	r0, #4
 8009ab6:	f7ff fc47 	bl	8009348 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009aba:	4b16      	ldr	r3, [pc, #88]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009abc:	2202      	movs	r2, #2
 8009abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8009ac2:	4a14      	ldr	r2, [pc, #80]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009ac8:	4b12      	ldr	r3, [pc, #72]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009aca:	2216      	movs	r2, #22
 8009acc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009ad0:	4811      	ldr	r0, [pc, #68]	; (8009b18 <RadioSetTxConfig+0x210>)
 8009ad2:	f002 f85f 	bl	800bb94 <SUBGRF_SetModulationParams>
            break;
 8009ad6:	e000      	b.n	8009ada <RadioSetTxConfig+0x1d2>
            break;
 8009ad8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009ada:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f002 fb8e 	bl	800c200 <SUBGRF_SetRfTxPower>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	4b0a      	ldr	r3, [pc, #40]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009aea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009aee:	210e      	movs	r1, #14
 8009af0:	f640 101f 	movw	r0, #2335	; 0x91f
 8009af4:	f002 fa68 	bl	800bfc8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009af8:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009afa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009afe:	4618      	mov	r0, r3
 8009b00:	f002 fd5d 	bl	800c5be <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009b04:	4a03      	ldr	r2, [pc, #12]	; (8009b14 <RadioSetTxConfig+0x20c>)
 8009b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b08:	6053      	str	r3, [r2, #4]
}
 8009b0a:	bf00      	nop
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000750 	.word	0x20000750
 8009b18:	20000788 	.word	0x20000788
 8009b1c:	2000075e 	.word	0x2000075e
 8009b20:	0800dcd8 	.word	0x0800dcd8
 8009b24:	0800de74 	.word	0x0800de74
 8009b28:	20000015 	.word	0x20000015

08009b2c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
    return true;
 8009b34:	2301      	movs	r3, #1
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bc80      	pop	{r7}
 8009b3e:	4770      	bx	lr

08009b40 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	2b0a      	cmp	r3, #10
 8009b52:	d83e      	bhi.n	8009bd2 <RadioGetLoRaBandwidthInHz+0x92>
 8009b54:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <RadioGetLoRaBandwidthInHz+0x1c>)
 8009b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5a:	bf00      	nop
 8009b5c:	08009b89 	.word	0x08009b89
 8009b60:	08009b99 	.word	0x08009b99
 8009b64:	08009ba9 	.word	0x08009ba9
 8009b68:	08009bb9 	.word	0x08009bb9
 8009b6c:	08009bc1 	.word	0x08009bc1
 8009b70:	08009bc7 	.word	0x08009bc7
 8009b74:	08009bcd 	.word	0x08009bcd
 8009b78:	08009bd3 	.word	0x08009bd3
 8009b7c:	08009b91 	.word	0x08009b91
 8009b80:	08009ba1 	.word	0x08009ba1
 8009b84:	08009bb1 	.word	0x08009bb1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8009b88:	f641 6384 	movw	r3, #7812	; 0x1e84
 8009b8c:	60fb      	str	r3, [r7, #12]
        break;
 8009b8e:	e020      	b.n	8009bd2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8009b90:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8009b94:	60fb      	str	r3, [r7, #12]
        break;
 8009b96:	e01c      	b.n	8009bd2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8009b98:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009b9c:	60fb      	str	r3, [r7, #12]
        break;
 8009b9e:	e018      	b.n	8009bd2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8009ba0:	f245 1361 	movw	r3, #20833	; 0x5161
 8009ba4:	60fb      	str	r3, [r7, #12]
        break;
 8009ba6:	e014      	b.n	8009bd2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8009ba8:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009bac:	60fb      	str	r3, [r7, #12]
        break;
 8009bae:	e010      	b.n	8009bd2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8009bb0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8009bb4:	60fb      	str	r3, [r7, #12]
        break;
 8009bb6:	e00c      	b.n	8009bd2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8009bb8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009bbc:	60fb      	str	r3, [r7, #12]
        break;
 8009bbe:	e008      	b.n	8009bd2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8009bc0:	4b07      	ldr	r3, [pc, #28]	; (8009be0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8009bc2:	60fb      	str	r3, [r7, #12]
        break;
 8009bc4:	e005      	b.n	8009bd2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8009bc6:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8009bc8:	60fb      	str	r3, [r7, #12]
        break;
 8009bca:	e002      	b.n	8009bd2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8009bcc:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <RadioGetLoRaBandwidthInHz+0xa8>)
 8009bce:	60fb      	str	r3, [r7, #12]
        break;
 8009bd0:	bf00      	nop
    }

    return bandwidthInHz;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bc80      	pop	{r7}
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	0001e848 	.word	0x0001e848
 8009be4:	0003d090 	.word	0x0003d090
 8009be8:	0007a120 	.word	0x0007a120

08009bec <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	70fb      	strb	r3, [r7, #3]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	803b      	strh	r3, [r7, #0]
 8009c02:	4613      	mov	r3, r2
 8009c04:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8009c06:	883b      	ldrh	r3, [r7, #0]
 8009c08:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009c0a:	78ba      	ldrb	r2, [r7, #2]
 8009c0c:	f082 0201 	eor.w	r2, r2, #1
 8009c10:	b2d2      	uxtb	r2, r2
 8009c12:	2a00      	cmp	r2, #0
 8009c14:	d001      	beq.n	8009c1a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8009c16:	2208      	movs	r2, #8
 8009c18:	e000      	b.n	8009c1c <RadioGetGfskTimeOnAirNumerator+0x30>
 8009c1a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8009c1c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009c1e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8009c22:	7c3b      	ldrb	r3, [r7, #16]
 8009c24:	7d39      	ldrb	r1, [r7, #20]
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d001      	beq.n	8009c2e <RadioGetGfskTimeOnAirNumerator+0x42>
 8009c2a:	2102      	movs	r1, #2
 8009c2c:	e000      	b.n	8009c30 <RadioGetGfskTimeOnAirNumerator+0x44>
 8009c2e:	2100      	movs	r1, #0
 8009c30:	440b      	add	r3, r1
 8009c32:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009c34:	4413      	add	r3, r2
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bc80      	pop	{r7}
 8009c3e:	4770      	bx	lr

08009c40 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009c40:	b480      	push	{r7}
 8009c42:	b08b      	sub	sp, #44	; 0x2c
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	460b      	mov	r3, r1
 8009c50:	71fb      	strb	r3, [r7, #7]
 8009c52:	4613      	mov	r3, r2
 8009c54:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8009c56:	79fb      	ldrb	r3, [r7, #7]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b05      	cmp	r3, #5
 8009c66:	d002      	beq.n	8009c6e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b06      	cmp	r3, #6
 8009c6c:	d104      	bne.n	8009c78 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8009c6e:	88bb      	ldrh	r3, [r7, #4]
 8009c70:	2b0b      	cmp	r3, #11
 8009c72:	d801      	bhi.n	8009c78 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8009c74:	230c      	movs	r3, #12
 8009c76:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d105      	bne.n	8009c8a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2b0b      	cmp	r3, #11
 8009c82:	d008      	beq.n	8009c96 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b0c      	cmp	r3, #12
 8009c88:	d005      	beq.n	8009c96 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d105      	bne.n	8009c9c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2b0c      	cmp	r3, #12
 8009c94:	d102      	bne.n	8009c9c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8009c96:	2301      	movs	r3, #1
 8009c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009c9c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009ca0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8009ca2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ca6:	2a00      	cmp	r2, #0
 8009ca8:	d001      	beq.n	8009cae <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8009caa:	2210      	movs	r2, #16
 8009cac:	e000      	b.n	8009cb0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8009cae:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009cb0:	4413      	add	r3, r2
 8009cb2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8009cb8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8009cba:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009cbe:	2a00      	cmp	r2, #0
 8009cc0:	d001      	beq.n	8009cc6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	e000      	b.n	8009cc8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8009cc6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8009cc8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009cca:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2b06      	cmp	r3, #6
 8009cd0:	d803      	bhi.n	8009cda <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	623b      	str	r3, [r7, #32]
 8009cd8:	e00e      	b.n	8009cf8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	3308      	adds	r3, #8
 8009cde:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8009ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	3b02      	subs	r3, #2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	623b      	str	r3, [r7, #32]
 8009cf0:	e002      	b.n	8009cf8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	da01      	bge.n	8009d02 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8009d02:	69fa      	ldr	r2, [r7, #28]
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	4413      	add	r3, r2
 8009d08:	1e5a      	subs	r2, r3, #1
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	fb03 f202 	mul.w	r2, r3, r2
 8009d16:	88bb      	ldrh	r3, [r7, #4]
 8009d18:	4413      	add	r3, r2
    int32_t intermediate =
 8009d1a:	330c      	adds	r3, #12
 8009d1c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b06      	cmp	r3, #6
 8009d22:	d802      	bhi.n	8009d2a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	3302      	adds	r3, #2
 8009d28:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	1c5a      	adds	r2, r3, #1
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	3b02      	subs	r3, #2
 8009d34:	fa02 f303 	lsl.w	r3, r2, r3
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	372c      	adds	r7, #44	; 0x2c
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bc80      	pop	{r7}
 8009d40:	4770      	bx	lr
	...

08009d44 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08a      	sub	sp, #40	; 0x28
 8009d48:	af04      	add	r7, sp, #16
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]
 8009d54:	4613      	mov	r3, r2
 8009d56:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <RadioTimeOnAir+0x28>
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d017      	beq.n	8009d9a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8009d6a:	e035      	b.n	8009dd8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8009d6c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8009d70:	8c3a      	ldrh	r2, [r7, #32]
 8009d72:	7bb9      	ldrb	r1, [r7, #14]
 8009d74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	4603      	mov	r3, r0
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff ff32 	bl	8009bec <RadioGetGfskTimeOnAirNumerator>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d8e:	fb02 f303 	mul.w	r3, r2, r3
 8009d92:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	613b      	str	r3, [r7, #16]
        break;
 8009d98:	e01e      	b.n	8009dd8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8009d9a:	8c39      	ldrh	r1, [r7, #32]
 8009d9c:	7bba      	ldrb	r2, [r7, #14]
 8009d9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009da2:	9302      	str	r3, [sp, #8]
 8009da4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	460b      	mov	r3, r1
 8009db2:	6879      	ldr	r1, [r7, #4]
 8009db4:	68b8      	ldr	r0, [r7, #8]
 8009db6:	f7ff ff43 	bl	8009c40 <RadioGetLoRaTimeOnAirNumerator>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dc0:	fb02 f303 	mul.w	r3, r2, r3
 8009dc4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8009dc6:	4a0a      	ldr	r2, [pc, #40]	; (8009df0 <RadioTimeOnAir+0xac>)
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4413      	add	r3, r2
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff feb6 	bl	8009b40 <RadioGetLoRaBandwidthInHz>
 8009dd4:	6138      	str	r0, [r7, #16]
        break;
 8009dd6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	4413      	add	r3, r2
 8009dde:	1e5a      	subs	r2, r3, #1
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	0800de74 	.word	0x0800de74

08009df4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009e00:	2300      	movs	r3, #0
 8009e02:	2200      	movs	r2, #0
 8009e04:	f240 2101 	movw	r1, #513	; 0x201
 8009e08:	f240 2001 	movw	r0, #513	; 0x201
 8009e0c:	f001 fd2c 	bl	800b868 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009e10:	4b70      	ldr	r3, [pc, #448]	; (8009fd4 <RadioSend+0x1e0>)
 8009e12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009e16:	2101      	movs	r1, #1
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f002 f9c9 	bl	800c1b0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8009e1e:	4b6d      	ldr	r3, [pc, #436]	; (8009fd4 <RadioSend+0x1e0>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d112      	bne.n	8009e4c <RadioSend+0x58>
 8009e26:	4b6b      	ldr	r3, [pc, #428]	; (8009fd4 <RadioSend+0x1e0>)
 8009e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e2c:	2b06      	cmp	r3, #6
 8009e2e:	d10d      	bne.n	8009e4c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009e30:	f640 0089 	movw	r0, #2185	; 0x889
 8009e34:	f002 f8dc 	bl	800bff0 <SUBGRF_ReadRegister>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	f023 0304 	bic.w	r3, r3, #4
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	4619      	mov	r1, r3
 8009e42:	f640 0089 	movw	r0, #2185	; 0x889
 8009e46:	f002 f8bf 	bl	800bfc8 <SUBGRF_WriteRegister>
 8009e4a:	e00c      	b.n	8009e66 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009e4c:	f640 0089 	movw	r0, #2185	; 0x889
 8009e50:	f002 f8ce 	bl	800bff0 <SUBGRF_ReadRegister>
 8009e54:	4603      	mov	r3, r0
 8009e56:	f043 0304 	orr.w	r3, r3, #4
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f640 0089 	movw	r0, #2185	; 0x889
 8009e62:	f002 f8b1 	bl	800bfc8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8009e66:	4b5b      	ldr	r3, [pc, #364]	; (8009fd4 <RadioSend+0x1e0>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	f200 80a2 	bhi.w	8009fb4 <RadioSend+0x1c0>
 8009e70:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <RadioSend+0x84>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009ea7 	.word	0x08009ea7
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009ea7 	.word	0x08009ea7
 8009e84:	08009efd 	.word	0x08009efd
 8009e88:	08009f1d 	.word	0x08009f1d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8009e8c:	4a51      	ldr	r2, [pc, #324]	; (8009fd4 <RadioSend+0x1e0>)
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009e92:	4851      	ldr	r0, [pc, #324]	; (8009fd8 <RadioSend+0x1e4>)
 8009e94:	f001 ff50 	bl	800bd38 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f001 fa00 	bl	800b2a4 <SUBGRF_SendPayload>
            break;
 8009ea4:	e087      	b.n	8009fb6 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8009ea6:	f002 fb7c 	bl	800c5a2 <RFW_Is_Init>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d118      	bne.n	8009ee2 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8009eb0:	f107 020d 	add.w	r2, r7, #13
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f002 fb8a 	bl	800c5d2 <RFW_TransmitInit>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10c      	bne.n	8009ede <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8009ec4:	7b7a      	ldrb	r2, [r7, #13]
 8009ec6:	4b43      	ldr	r3, [pc, #268]	; (8009fd4 <RadioSend+0x1e0>)
 8009ec8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009eca:	4843      	ldr	r0, [pc, #268]	; (8009fd8 <RadioSend+0x1e4>)
 8009ecc:	f001 ff34 	bl	800bd38 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8009ed0:	7b7b      	ldrb	r3, [r7, #13]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 f9e4 	bl	800b2a4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8009edc:	e06b      	b.n	8009fb6 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e073      	b.n	8009fca <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8009ee2:	4a3c      	ldr	r2, [pc, #240]	; (8009fd4 <RadioSend+0x1e0>)
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009ee8:	483b      	ldr	r0, [pc, #236]	; (8009fd8 <RadioSend+0x1e4>)
 8009eea:	f001 ff25 	bl	800bd38 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8009eee:	78fb      	ldrb	r3, [r7, #3]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 f9d5 	bl	800b2a4 <SUBGRF_SendPayload>
            break;
 8009efa:	e05c      	b.n	8009fb6 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009efc:	4b35      	ldr	r3, [pc, #212]	; (8009fd4 <RadioSend+0x1e0>)
 8009efe:	2202      	movs	r2, #2
 8009f00:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8009f02:	4a34      	ldr	r2, [pc, #208]	; (8009fd4 <RadioSend+0x1e0>)
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f08:	4833      	ldr	r0, [pc, #204]	; (8009fd8 <RadioSend+0x1e4>)
 8009f0a:	f001 ff15 	bl	800bd38 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009f0e:	78fb      	ldrb	r3, [r7, #3]
 8009f10:	2200      	movs	r2, #0
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 f9c5 	bl	800b2a4 <SUBGRF_SendPayload>
            break;
 8009f1a:	e04c      	b.n	8009fb6 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	6879      	ldr	r1, [r7, #4]
 8009f22:	482e      	ldr	r0, [pc, #184]	; (8009fdc <RadioSend+0x1e8>)
 8009f24:	f000 fc98 	bl	800a858 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009f28:	4b2a      	ldr	r3, [pc, #168]	; (8009fd4 <RadioSend+0x1e0>)
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8009f2e:	78fb      	ldrb	r3, [r7, #3]
 8009f30:	3301      	adds	r3, #1
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	4b27      	ldr	r3, [pc, #156]	; (8009fd4 <RadioSend+0x1e0>)
 8009f36:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f38:	4827      	ldr	r0, [pc, #156]	; (8009fd8 <RadioSend+0x1e4>)
 8009f3a:	f001 fefd 	bl	800bd38 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8009f3e:	2100      	movs	r1, #0
 8009f40:	20f1      	movs	r0, #241	; 0xf1
 8009f42:	f000 f964 	bl	800a20e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8009f46:	2100      	movs	r1, #0
 8009f48:	20f0      	movs	r0, #240	; 0xf0
 8009f4a:	f000 f960 	bl	800a20e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8009f4e:	4b21      	ldr	r3, [pc, #132]	; (8009fd4 <RadioSend+0x1e0>)
 8009f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f52:	2b64      	cmp	r3, #100	; 0x64
 8009f54:	d108      	bne.n	8009f68 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8009f56:	2170      	movs	r1, #112	; 0x70
 8009f58:	20f3      	movs	r0, #243	; 0xf3
 8009f5a:	f000 f958 	bl	800a20e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8009f5e:	211d      	movs	r1, #29
 8009f60:	20f2      	movs	r0, #242	; 0xf2
 8009f62:	f000 f954 	bl	800a20e <RadioWrite>
 8009f66:	e007      	b.n	8009f78 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8009f68:	21e1      	movs	r1, #225	; 0xe1
 8009f6a:	20f3      	movs	r0, #243	; 0xf3
 8009f6c:	f000 f94f 	bl	800a20e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8009f70:	2104      	movs	r1, #4
 8009f72:	20f2      	movs	r0, #242	; 0xf2
 8009f74:	f000 f94b 	bl	800a20e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	3302      	adds	r3, #2
 8009f82:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8009f84:	89fb      	ldrh	r3, [r7, #14]
 8009f86:	0a1b      	lsrs	r3, r3, #8
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	20f4      	movs	r0, #244	; 0xf4
 8009f90:	f000 f93d 	bl	800a20e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8009f94:	89fb      	ldrh	r3, [r7, #14]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	4619      	mov	r1, r3
 8009f9a:	20f5      	movs	r0, #245	; 0xf5
 8009f9c:	f000 f937 	bl	800a20e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009faa:	4619      	mov	r1, r3
 8009fac:	480b      	ldr	r0, [pc, #44]	; (8009fdc <RadioSend+0x1e8>)
 8009fae:	f001 f979 	bl	800b2a4 <SUBGRF_SendPayload>
            break;
 8009fb2:	e000      	b.n	8009fb6 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8009fb4:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8009fb6:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <RadioSend+0x1e0>)
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4808      	ldr	r0, [pc, #32]	; (8009fe0 <RadioSend+0x1ec>)
 8009fbe:	f002 fdbb 	bl	800cb38 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8009fc2:	4807      	ldr	r0, [pc, #28]	; (8009fe0 <RadioSend+0x1ec>)
 8009fc4:	f002 fcda 	bl	800c97c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000750 	.word	0x20000750
 8009fd8:	2000075e 	.word	0x2000075e
 8009fdc:	2000064c 	.word	0x2000064c
 8009fe0:	200007ac 	.word	0x200007ac

08009fe4 <RadioSleep>:

static void RadioSleep( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8009fea:	2300      	movs	r3, #0
 8009fec:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8009fee:	793b      	ldrb	r3, [r7, #4]
 8009ff0:	f043 0304 	orr.w	r3, r3, #4
 8009ff4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8009ff6:	7938      	ldrb	r0, [r7, #4]
 8009ff8:	f001 fa30 	bl	800b45c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8009ffc:	2002      	movs	r0, #2
 8009ffe:	f7f8 fa31 	bl	8002464 <HAL_Delay>
}
 800a002:	bf00      	nop
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <RadioStandby>:

static void RadioStandby( void )
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800a00e:	2000      	movs	r0, #0
 800a010:	f001 fa56 	bl	800b4c0 <SUBGRF_SetStandby>
}
 800a014:	bf00      	nop
 800a016:	bd80      	pop	{r7, pc}

0800a018 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800a020:	f002 fabf 	bl	800c5a2 <RFW_Is_Init>
 800a024:	4603      	mov	r3, r0
 800a026:	2b01      	cmp	r3, #1
 800a028:	d102      	bne.n	800a030 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800a02a:	f002 fae2 	bl	800c5f2 <RFW_ReceiveInit>
 800a02e:	e007      	b.n	800a040 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a030:	2300      	movs	r3, #0
 800a032:	2200      	movs	r2, #0
 800a034:	f240 2162 	movw	r1, #610	; 0x262
 800a038:	f240 2062 	movw	r0, #610	; 0x262
 800a03c:	f001 fc14 	bl	800b868 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d006      	beq.n	800a054 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	4811      	ldr	r0, [pc, #68]	; (800a090 <RadioRx+0x78>)
 800a04a:	f002 fd75 	bl	800cb38 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a04e:	4810      	ldr	r0, [pc, #64]	; (800a090 <RadioRx+0x78>)
 800a050:	f002 fc94 	bl	800c97c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a054:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <RadioRx+0x7c>)
 800a056:	2200      	movs	r2, #0
 800a058:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a05a:	4b0e      	ldr	r3, [pc, #56]	; (800a094 <RadioRx+0x7c>)
 800a05c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a060:	2100      	movs	r1, #0
 800a062:	4618      	mov	r0, r3
 800a064:	f002 f8a4 	bl	800c1b0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800a068:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <RadioRx+0x7c>)
 800a06a:	785b      	ldrb	r3, [r3, #1]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d004      	beq.n	800a07a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a070:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a074:	f001 fa60 	bl	800b538 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800a078:	e005      	b.n	800a086 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800a07a:	4b06      	ldr	r3, [pc, #24]	; (800a094 <RadioRx+0x7c>)
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	019b      	lsls	r3, r3, #6
 800a080:	4618      	mov	r0, r3
 800a082:	f001 fa59 	bl	800b538 <SUBGRF_SetRx>
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	200007c4 	.word	0x200007c4
 800a094:	20000750 	.word	0x20000750

0800a098 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800a0a0:	f002 fa7f 	bl	800c5a2 <RFW_Is_Init>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d102      	bne.n	800a0b0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800a0aa:	f002 faa2 	bl	800c5f2 <RFW_ReceiveInit>
 800a0ae:	e007      	b.n	800a0c0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f240 2162 	movw	r1, #610	; 0x262
 800a0b8:	f240 2062 	movw	r0, #610	; 0x262
 800a0bc:	f001 fbd4 	bl	800b868 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d006      	beq.n	800a0d4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a0c6:	6879      	ldr	r1, [r7, #4]
 800a0c8:	4811      	ldr	r0, [pc, #68]	; (800a110 <RadioRxBoosted+0x78>)
 800a0ca:	f002 fd35 	bl	800cb38 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a0ce:	4810      	ldr	r0, [pc, #64]	; (800a110 <RadioRxBoosted+0x78>)
 800a0d0:	f002 fc54 	bl	800c97c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a0d4:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <RadioRxBoosted+0x7c>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a0da:	4b0e      	ldr	r3, [pc, #56]	; (800a114 <RadioRxBoosted+0x7c>)
 800a0dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f002 f864 	bl	800c1b0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800a0e8:	4b0a      	ldr	r3, [pc, #40]	; (800a114 <RadioRxBoosted+0x7c>)
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800a0f0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a0f4:	f001 fa40 	bl	800b578 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800a0f8:	e005      	b.n	800a106 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800a0fa:	4b06      	ldr	r3, [pc, #24]	; (800a114 <RadioRxBoosted+0x7c>)
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	019b      	lsls	r3, r3, #6
 800a100:	4618      	mov	r0, r3
 800a102:	f001 fa39 	bl	800b578 <SUBGRF_SetRxBoosted>
}
 800a106:	bf00      	nop
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	200007c4 	.word	0x200007c4
 800a114:	20000750 	.word	0x20000750

0800a118 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	005a      	lsls	r2, r3, #1
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	4413      	add	r3, r2
 800a12a:	4a0c      	ldr	r2, [pc, #48]	; (800a15c <RadioSetRxDutyCycle+0x44>)
 800a12c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800a12e:	2300      	movs	r3, #0
 800a130:	2200      	movs	r2, #0
 800a132:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a136:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a13a:	f001 fb95 	bl	800b868 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a13e:	4b07      	ldr	r3, [pc, #28]	; (800a15c <RadioSetRxDutyCycle+0x44>)
 800a140:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a144:	2100      	movs	r1, #0
 800a146:	4618      	mov	r0, r3
 800a148:	f002 f832 	bl	800c1b0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f001 fa36 	bl	800b5c0 <SUBGRF_SetRxDutyCycle>
}
 800a154:	bf00      	nop
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	20000750 	.word	0x20000750

0800a160 <RadioStartCad>:

static void RadioStartCad( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a164:	4b09      	ldr	r3, [pc, #36]	; (800a18c <RadioStartCad+0x2c>)
 800a166:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a16a:	2100      	movs	r1, #0
 800a16c:	4618      	mov	r0, r3
 800a16e:	f002 f81f 	bl	800c1b0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800a172:	2300      	movs	r3, #0
 800a174:	2200      	movs	r2, #0
 800a176:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800a17a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800a17e:	f001 fb73 	bl	800b868 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800a182:	f001 fa49 	bl	800b618 <SUBGRF_SetCad>
}
 800a186:	bf00      	nop
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20000750 	.word	0x20000750

0800a190 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
 800a19c:	4613      	mov	r3, r2
 800a19e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800a1a0:	883b      	ldrh	r3, [r7, #0]
 800a1a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1a6:	fb02 f303 	mul.w	r3, r2, r3
 800a1aa:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f001 fbb7 	bl	800b920 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800a1b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f002 f822 	bl	800c200 <SUBGRF_SetRfTxPower>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a1c0:	210e      	movs	r1, #14
 800a1c2:	f640 101f 	movw	r0, #2335	; 0x91f
 800a1c6:	f001 feff 	bl	800bfc8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800a1ca:	7afb      	ldrb	r3, [r7, #11]
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 ffee 	bl	800c1b0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800a1d4:	f001 fa2e 	bl	800b634 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800a1d8:	68f9      	ldr	r1, [r7, #12]
 800a1da:	4805      	ldr	r0, [pc, #20]	; (800a1f0 <RadioSetTxContinuousWave+0x60>)
 800a1dc:	f002 fcac 	bl	800cb38 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800a1e0:	4803      	ldr	r0, [pc, #12]	; (800a1f0 <RadioSetTxContinuousWave+0x60>)
 800a1e2:	f002 fbcb 	bl	800c97c <UTIL_TIMER_Start>
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	200007ac 	.word	0x200007ac

0800a1f4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800a1fe:	f001 fe50 	bl	800bea2 <SUBGRF_GetRssiInst>
 800a202:	4603      	mov	r3, r0
 800a204:	b21b      	sxth	r3, r3
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	4603      	mov	r3, r0
 800a216:	460a      	mov	r2, r1
 800a218:	80fb      	strh	r3, [r7, #6]
 800a21a:	4613      	mov	r3, r2
 800a21c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800a21e:	797a      	ldrb	r2, [r7, #5]
 800a220:	88fb      	ldrh	r3, [r7, #6]
 800a222:	4611      	mov	r1, r2
 800a224:	4618      	mov	r0, r3
 800a226:	f001 fecf 	bl	800bfc8 <SUBGRF_WriteRegister>
}
 800a22a:	bf00      	nop
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	4603      	mov	r3, r0
 800a23a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800a23c:	88fb      	ldrh	r3, [r7, #6]
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 fed6 	bl	800bff0 <SUBGRF_ReadRegister>
 800a244:	4603      	mov	r3, r0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	4603      	mov	r3, r0
 800a256:	6039      	str	r1, [r7, #0]
 800a258:	80fb      	strh	r3, [r7, #6]
 800a25a:	4613      	mov	r3, r2
 800a25c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800a25e:	797b      	ldrb	r3, [r7, #5]
 800a260:	b29a      	uxth	r2, r3
 800a262:	88fb      	ldrh	r3, [r7, #6]
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	4618      	mov	r0, r3
 800a268:	f001 fed6 	bl	800c018 <SUBGRF_WriteRegisters>
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	6039      	str	r1, [r7, #0]
 800a27e:	80fb      	strh	r3, [r7, #6]
 800a280:	4613      	mov	r3, r2
 800a282:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800a284:	797b      	ldrb	r3, [r7, #5]
 800a286:	b29a      	uxth	r2, r3
 800a288:	88fb      	ldrh	r3, [r7, #6]
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 fee5 	bl	800c05c <SUBGRF_ReadRegisters>
}
 800a292:	bf00      	nop
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	460a      	mov	r2, r1
 800a2a6:	71fb      	strb	r3, [r7, #7]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d10a      	bne.n	800a2c8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800a2b2:	4a0e      	ldr	r2, [pc, #56]	; (800a2ec <RadioSetMaxPayloadLength+0x50>)
 800a2b4:	79bb      	ldrb	r3, [r7, #6]
 800a2b6:	7013      	strb	r3, [r2, #0]
 800a2b8:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <RadioSetMaxPayloadLength+0x50>)
 800a2ba:	781a      	ldrb	r2, [r3, #0]
 800a2bc:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <RadioSetMaxPayloadLength+0x54>)
 800a2be:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a2c0:	480c      	ldr	r0, [pc, #48]	; (800a2f4 <RadioSetMaxPayloadLength+0x58>)
 800a2c2:	f001 fd39 	bl	800bd38 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800a2c6:	e00d      	b.n	800a2e4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800a2c8:	4b09      	ldr	r3, [pc, #36]	; (800a2f0 <RadioSetMaxPayloadLength+0x54>)
 800a2ca:	7d5b      	ldrb	r3, [r3, #21]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d109      	bne.n	800a2e4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800a2d0:	4a06      	ldr	r2, [pc, #24]	; (800a2ec <RadioSetMaxPayloadLength+0x50>)
 800a2d2:	79bb      	ldrb	r3, [r7, #6]
 800a2d4:	7013      	strb	r3, [r2, #0]
 800a2d6:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <RadioSetMaxPayloadLength+0x50>)
 800a2d8:	781a      	ldrb	r2, [r3, #0]
 800a2da:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <RadioSetMaxPayloadLength+0x54>)
 800a2dc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a2de:	4805      	ldr	r0, [pc, #20]	; (800a2f4 <RadioSetMaxPayloadLength+0x58>)
 800a2e0:	f001 fd2a 	bl	800bd38 <SUBGRF_SetPacketParams>
}
 800a2e4:	bf00      	nop
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	20000015 	.word	0x20000015
 800a2f0:	20000750 	.word	0x20000750
 800a2f4:	2000075e 	.word	0x2000075e

0800a2f8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800a302:	4a13      	ldr	r2, [pc, #76]	; (800a350 <RadioSetPublicNetwork+0x58>)
 800a304:	79fb      	ldrb	r3, [r7, #7]
 800a306:	7313      	strb	r3, [r2, #12]
 800a308:	4b11      	ldr	r3, [pc, #68]	; (800a350 <RadioSetPublicNetwork+0x58>)
 800a30a:	7b1a      	ldrb	r2, [r3, #12]
 800a30c:	4b10      	ldr	r3, [pc, #64]	; (800a350 <RadioSetPublicNetwork+0x58>)
 800a30e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800a310:	2001      	movs	r0, #1
 800a312:	f7ff f819 	bl	8009348 <RadioSetModem>
    if( enable == true )
 800a316:	79fb      	ldrb	r3, [r7, #7]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00a      	beq.n	800a332 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800a31c:	2134      	movs	r1, #52	; 0x34
 800a31e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800a322:	f001 fe51 	bl	800bfc8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800a326:	2144      	movs	r1, #68	; 0x44
 800a328:	f240 7041 	movw	r0, #1857	; 0x741
 800a32c:	f001 fe4c 	bl	800bfc8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800a330:	e009      	b.n	800a346 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800a332:	2114      	movs	r1, #20
 800a334:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800a338:	f001 fe46 	bl	800bfc8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800a33c:	2124      	movs	r1, #36	; 0x24
 800a33e:	f240 7041 	movw	r0, #1857	; 0x741
 800a342:	f001 fe41 	bl	800bfc8 <SUBGRF_WriteRegister>
}
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20000750 	.word	0x20000750

0800a354 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800a358:	f001 ff86 	bl	800c268 <SUBGRF_GetRadioWakeUpTime>
 800a35c:	4603      	mov	r3, r0
 800a35e:	3303      	adds	r3, #3
}
 800a360:	4618      	mov	r0, r3
 800a362:	bd80      	pop	{r7, pc}

0800a364 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800a36c:	f000 f80e 	bl	800a38c <RadioOnTxTimeoutProcess>
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800a380:	f000 f818 	bl	800a3b4 <RadioOnRxTimeoutProcess>
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a390:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <RadioOnTxTimeoutProcess+0x24>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d008      	beq.n	800a3aa <RadioOnTxTimeoutProcess+0x1e>
 800a398:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <RadioOnTxTimeoutProcess+0x24>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800a3a2:	4b03      	ldr	r3, [pc, #12]	; (800a3b0 <RadioOnTxTimeoutProcess+0x24>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	4798      	blx	r3
    }
}
 800a3aa:	bf00      	nop
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	2000074c 	.word	0x2000074c

0800a3b4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a3b8:	4b07      	ldr	r3, [pc, #28]	; (800a3d8 <RadioOnRxTimeoutProcess+0x24>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d008      	beq.n	800a3d2 <RadioOnRxTimeoutProcess+0x1e>
 800a3c0:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <RadioOnRxTimeoutProcess+0x24>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800a3ca:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <RadioOnRxTimeoutProcess+0x24>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	4798      	blx	r3
    }
}
 800a3d2:	bf00      	nop
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	2000074c 	.word	0x2000074c

0800a3dc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800a3e6:	4a05      	ldr	r2, [pc, #20]	; (800a3fc <RadioOnDioIrq+0x20>)
 800a3e8:	88fb      	ldrh	r3, [r7, #6]
 800a3ea:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800a3ee:	f000 f807 	bl	800a400 <RadioIrqProcess>
}
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000750 	.word	0x20000750

0800a400 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800a400:	b5b0      	push	{r4, r5, r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800a40e:	4ba5      	ldr	r3, [pc, #660]	; (800a6a4 <RadioIrqProcess+0x2a4>)
 800a410:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a418:	f000 810d 	beq.w	800a636 <RadioIrqProcess+0x236>
 800a41c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a420:	f300 81c0 	bgt.w	800a7a4 <RadioIrqProcess+0x3a4>
 800a424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a428:	f000 80f1 	beq.w	800a60e <RadioIrqProcess+0x20e>
 800a42c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a430:	f300 81b8 	bgt.w	800a7a4 <RadioIrqProcess+0x3a4>
 800a434:	2b80      	cmp	r3, #128	; 0x80
 800a436:	f000 80d6 	beq.w	800a5e6 <RadioIrqProcess+0x1e6>
 800a43a:	2b80      	cmp	r3, #128	; 0x80
 800a43c:	f300 81b2 	bgt.w	800a7a4 <RadioIrqProcess+0x3a4>
 800a440:	2b20      	cmp	r3, #32
 800a442:	dc49      	bgt.n	800a4d8 <RadioIrqProcess+0xd8>
 800a444:	2b00      	cmp	r3, #0
 800a446:	f340 81ad 	ble.w	800a7a4 <RadioIrqProcess+0x3a4>
 800a44a:	3b01      	subs	r3, #1
 800a44c:	2b1f      	cmp	r3, #31
 800a44e:	f200 81a9 	bhi.w	800a7a4 <RadioIrqProcess+0x3a4>
 800a452:	a201      	add	r2, pc, #4	; (adr r2, 800a458 <RadioIrqProcess+0x58>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a4e1 	.word	0x0800a4e1
 800a45c:	0800a51b 	.word	0x0800a51b
 800a460:	0800a7a5 	.word	0x0800a7a5
 800a464:	0800a6c1 	.word	0x0800a6c1
 800a468:	0800a7a5 	.word	0x0800a7a5
 800a46c:	0800a7a5 	.word	0x0800a7a5
 800a470:	0800a7a5 	.word	0x0800a7a5
 800a474:	0800a72f 	.word	0x0800a72f
 800a478:	0800a7a5 	.word	0x0800a7a5
 800a47c:	0800a7a5 	.word	0x0800a7a5
 800a480:	0800a7a5 	.word	0x0800a7a5
 800a484:	0800a7a5 	.word	0x0800a7a5
 800a488:	0800a7a5 	.word	0x0800a7a5
 800a48c:	0800a7a5 	.word	0x0800a7a5
 800a490:	0800a7a5 	.word	0x0800a7a5
 800a494:	0800a7a5 	.word	0x0800a7a5
 800a498:	0800a7a5 	.word	0x0800a7a5
 800a49c:	0800a7a5 	.word	0x0800a7a5
 800a4a0:	0800a7a5 	.word	0x0800a7a5
 800a4a4:	0800a7a5 	.word	0x0800a7a5
 800a4a8:	0800a7a5 	.word	0x0800a7a5
 800a4ac:	0800a7a5 	.word	0x0800a7a5
 800a4b0:	0800a7a5 	.word	0x0800a7a5
 800a4b4:	0800a7a5 	.word	0x0800a7a5
 800a4b8:	0800a7a5 	.word	0x0800a7a5
 800a4bc:	0800a7a5 	.word	0x0800a7a5
 800a4c0:	0800a7a5 	.word	0x0800a7a5
 800a4c4:	0800a7a5 	.word	0x0800a7a5
 800a4c8:	0800a7a5 	.word	0x0800a7a5
 800a4cc:	0800a7a5 	.word	0x0800a7a5
 800a4d0:	0800a7a5 	.word	0x0800a7a5
 800a4d4:	0800a73f 	.word	0x0800a73f
 800a4d8:	2b40      	cmp	r3, #64	; 0x40
 800a4da:	f000 814b 	beq.w	800a774 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800a4de:	e161      	b.n	800a7a4 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800a4e0:	4871      	ldr	r0, [pc, #452]	; (800a6a8 <RadioIrqProcess+0x2a8>)
 800a4e2:	f002 fab9 	bl	800ca58 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	f000 ffea 	bl	800b4c0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800a4ec:	f002 f860 	bl	800c5b0 <RFW_Is_LongPacketModeEnabled>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d101      	bne.n	800a4fa <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800a4f6:	f002 f884 	bl	800c602 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800a4fa:	4b6c      	ldr	r3, [pc, #432]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 8152 	beq.w	800a7a8 <RadioIrqProcess+0x3a8>
 800a504:	4b69      	ldr	r3, [pc, #420]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 814c 	beq.w	800a7a8 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 800a510:	4b66      	ldr	r3, [pc, #408]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4798      	blx	r3
        break;
 800a518:	e146      	b.n	800a7a8 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800a51a:	4865      	ldr	r0, [pc, #404]	; (800a6b0 <RadioIrqProcess+0x2b0>)
 800a51c:	f002 fa9c 	bl	800ca58 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800a520:	4b60      	ldr	r3, [pc, #384]	; (800a6a4 <RadioIrqProcess+0x2a4>)
 800a522:	785b      	ldrb	r3, [r3, #1]
 800a524:	f083 0301 	eor.w	r3, r3, #1
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d014      	beq.n	800a558 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800a52e:	2000      	movs	r0, #0
 800a530:	f000 ffc6 	bl	800b4c0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800a534:	2100      	movs	r1, #0
 800a536:	f640 1002 	movw	r0, #2306	; 0x902
 800a53a:	f001 fd45 	bl	800bfc8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800a53e:	f640 1044 	movw	r0, #2372	; 0x944
 800a542:	f001 fd55 	bl	800bff0 <SUBGRF_ReadRegister>
 800a546:	4603      	mov	r3, r0
 800a548:	f043 0302 	orr.w	r3, r3, #2
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	4619      	mov	r1, r3
 800a550:	f640 1044 	movw	r0, #2372	; 0x944
 800a554:	f001 fd38 	bl	800bfc8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800a558:	1dfb      	adds	r3, r7, #7
 800a55a:	22ff      	movs	r2, #255	; 0xff
 800a55c:	4619      	mov	r1, r3
 800a55e:	4855      	ldr	r0, [pc, #340]	; (800a6b4 <RadioIrqProcess+0x2b4>)
 800a560:	f000 fe7e 	bl	800b260 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800a564:	4854      	ldr	r0, [pc, #336]	; (800a6b8 <RadioIrqProcess+0x2b8>)
 800a566:	f001 fcdd 	bl	800bf24 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800a56a:	4b50      	ldr	r3, [pc, #320]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f000 811c 	beq.w	800a7ac <RadioIrqProcess+0x3ac>
 800a574:	4b4d      	ldr	r3, [pc, #308]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 8116 	beq.w	800a7ac <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 800a580:	4b48      	ldr	r3, [pc, #288]	; (800a6a4 <RadioIrqProcess+0x2a4>)
 800a582:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a586:	2b01      	cmp	r3, #1
 800a588:	d10e      	bne.n	800a5a8 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800a58a:	4b48      	ldr	r3, [pc, #288]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689c      	ldr	r4, [r3, #8]
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	b299      	uxth	r1, r3
 800a594:	4b43      	ldr	r3, [pc, #268]	; (800a6a4 <RadioIrqProcess+0x2a4>)
 800a596:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800a59a:	b21a      	sxth	r2, r3
 800a59c:	4b41      	ldr	r3, [pc, #260]	; (800a6a4 <RadioIrqProcess+0x2a4>)
 800a59e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800a5a2:	4844      	ldr	r0, [pc, #272]	; (800a6b4 <RadioIrqProcess+0x2b4>)
 800a5a4:	47a0      	blx	r4
                break;
 800a5a6:	e01d      	b.n	800a5e4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800a5a8:	4b3e      	ldr	r3, [pc, #248]	; (800a6a4 <RadioIrqProcess+0x2a4>)
 800a5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ac:	463a      	mov	r2, r7
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f001 ff4b 	bl	800c44c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800a5b6:	4b3d      	ldr	r3, [pc, #244]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	689c      	ldr	r4, [r3, #8]
 800a5bc:	79fb      	ldrb	r3, [r7, #7]
 800a5be:	b299      	uxth	r1, r3
 800a5c0:	4b38      	ldr	r3, [pc, #224]	; (800a6a4 <RadioIrqProcess+0x2a4>)
 800a5c2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800a5c6:	b218      	sxth	r0, r3
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a5ce:	4a3b      	ldr	r2, [pc, #236]	; (800a6bc <RadioIrqProcess+0x2bc>)
 800a5d0:	fb82 5203 	smull	r5, r2, r2, r3
 800a5d4:	1192      	asrs	r2, r2, #6
 800a5d6:	17db      	asrs	r3, r3, #31
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	b25b      	sxtb	r3, r3
 800a5dc:	4602      	mov	r2, r0
 800a5de:	4835      	ldr	r0, [pc, #212]	; (800a6b4 <RadioIrqProcess+0x2b4>)
 800a5e0:	47a0      	blx	r4
                break;
 800a5e2:	bf00      	nop
        break;
 800a5e4:	e0e2      	b.n	800a7ac <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	f000 ff6a 	bl	800b4c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a5ec:	4b2f      	ldr	r3, [pc, #188]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 80dd 	beq.w	800a7b0 <RadioIrqProcess+0x3b0>
 800a5f6:	4b2d      	ldr	r3, [pc, #180]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 80d7 	beq.w	800a7b0 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800a602:	4b2a      	ldr	r3, [pc, #168]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	2000      	movs	r0, #0
 800a60a:	4798      	blx	r3
        break;
 800a60c:	e0d0      	b.n	800a7b0 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 800a60e:	2000      	movs	r0, #0
 800a610:	f000 ff56 	bl	800b4c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a614:	4b25      	ldr	r3, [pc, #148]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 80cb 	beq.w	800a7b4 <RadioIrqProcess+0x3b4>
 800a61e:	4b23      	ldr	r3, [pc, #140]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 80c5 	beq.w	800a7b4 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800a62a:	4b20      	ldr	r3, [pc, #128]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	2001      	movs	r0, #1
 800a632:	4798      	blx	r3
        break;
 800a634:	e0be      	b.n	800a7b4 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800a636:	f000 fdf9 	bl	800b22c <SUBGRF_GetOperatingMode>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b04      	cmp	r3, #4
 800a63e:	d115      	bne.n	800a66c <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 800a640:	4819      	ldr	r0, [pc, #100]	; (800a6a8 <RadioIrqProcess+0x2a8>)
 800a642:	f002 fa09 	bl	800ca58 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a646:	2000      	movs	r0, #0
 800a648:	f000 ff3a 	bl	800b4c0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a64c:	4b17      	ldr	r3, [pc, #92]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	f000 80b1 	beq.w	800a7b8 <RadioIrqProcess+0x3b8>
 800a656:	4b15      	ldr	r3, [pc, #84]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 80ab 	beq.w	800a7b8 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 800a662:	4b12      	ldr	r3, [pc, #72]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	4798      	blx	r3
        break;
 800a66a:	e0a5      	b.n	800a7b8 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800a66c:	f000 fdde 	bl	800b22c <SUBGRF_GetOperatingMode>
 800a670:	4603      	mov	r3, r0
 800a672:	2b05      	cmp	r3, #5
 800a674:	f040 80a0 	bne.w	800a7b8 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 800a678:	480d      	ldr	r0, [pc, #52]	; (800a6b0 <RadioIrqProcess+0x2b0>)
 800a67a:	f002 f9ed 	bl	800ca58 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a67e:	2000      	movs	r0, #0
 800a680:	f000 ff1e 	bl	800b4c0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a684:	4b09      	ldr	r3, [pc, #36]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 8095 	beq.w	800a7b8 <RadioIrqProcess+0x3b8>
 800a68e:	4b07      	ldr	r3, [pc, #28]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 808f 	beq.w	800a7b8 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800a69a:	4b04      	ldr	r3, [pc, #16]	; (800a6ac <RadioIrqProcess+0x2ac>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	4798      	blx	r3
        break;
 800a6a2:	e089      	b.n	800a7b8 <RadioIrqProcess+0x3b8>
 800a6a4:	20000750 	.word	0x20000750
 800a6a8:	200007ac 	.word	0x200007ac
 800a6ac:	2000074c 	.word	0x2000074c
 800a6b0:	200007c4 	.word	0x200007c4
 800a6b4:	2000064c 	.word	0x2000064c
 800a6b8:	20000774 	.word	0x20000774
 800a6bc:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800a6c0:	4b44      	ldr	r3, [pc, #272]	; (800a7d4 <RadioIrqProcess+0x3d4>)
 800a6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d079      	beq.n	800a7bc <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800a6c8:	4a43      	ldr	r2, [pc, #268]	; (800a7d8 <RadioIrqProcess+0x3d8>)
 800a6ca:	4b42      	ldr	r3, [pc, #264]	; (800a7d4 <RadioIrqProcess+0x3d4>)
 800a6cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ce:	0c1b      	lsrs	r3, r3, #16
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	f640 1003 	movw	r0, #2307	; 0x903
 800a6d8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800a6da:	4a3f      	ldr	r2, [pc, #252]	; (800a7d8 <RadioIrqProcess+0x3d8>)
 800a6dc:	4b3d      	ldr	r3, [pc, #244]	; (800a7d4 <RadioIrqProcess+0x3d4>)
 800a6de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e0:	0a1b      	lsrs	r3, r3, #8
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	f640 1004 	movw	r0, #2308	; 0x904
 800a6ea:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800a6ec:	4a3a      	ldr	r2, [pc, #232]	; (800a7d8 <RadioIrqProcess+0x3d8>)
 800a6ee:	4b39      	ldr	r3, [pc, #228]	; (800a7d4 <RadioIrqProcess+0x3d4>)
 800a6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	f640 1005 	movw	r0, #2309	; 0x905
 800a6fa:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800a6fc:	4c36      	ldr	r4, [pc, #216]	; (800a7d8 <RadioIrqProcess+0x3d8>)
 800a6fe:	4b37      	ldr	r3, [pc, #220]	; (800a7dc <RadioIrqProcess+0x3dc>)
 800a700:	f640 1002 	movw	r0, #2306	; 0x902
 800a704:	4798      	blx	r3
 800a706:	4603      	mov	r3, r0
 800a708:	f043 0301 	orr.w	r3, r3, #1
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	4619      	mov	r1, r3
 800a710:	f640 1002 	movw	r0, #2306	; 0x902
 800a714:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800a716:	4b2f      	ldr	r3, [pc, #188]	; (800a7d4 <RadioIrqProcess+0x3d4>)
 800a718:	2200      	movs	r2, #0
 800a71a:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a71c:	2300      	movs	r3, #0
 800a71e:	2200      	movs	r2, #0
 800a720:	f240 2162 	movw	r1, #610	; 0x262
 800a724:	f240 2062 	movw	r0, #610	; 0x262
 800a728:	f001 f89e 	bl	800b868 <SUBGRF_SetDioIrqParams>
        break;
 800a72c:	e046      	b.n	800a7bc <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800a72e:	f001 ff38 	bl	800c5a2 <RFW_Is_Init>
 800a732:	4603      	mov	r3, r0
 800a734:	2b01      	cmp	r3, #1
 800a736:	d143      	bne.n	800a7c0 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 800a738:	f001 ff69 	bl	800c60e <RFW_ReceivePayload>
        break;
 800a73c:	e040      	b.n	800a7c0 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800a73e:	4828      	ldr	r0, [pc, #160]	; (800a7e0 <RadioIrqProcess+0x3e0>)
 800a740:	f002 f98a 	bl	800ca58 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800a744:	4b23      	ldr	r3, [pc, #140]	; (800a7d4 <RadioIrqProcess+0x3d4>)
 800a746:	785b      	ldrb	r3, [r3, #1]
 800a748:	f083 0301 	eor.w	r3, r3, #1
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d002      	beq.n	800a758 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800a752:	2000      	movs	r0, #0
 800a754:	f000 feb4 	bl	800b4c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a758:	4b22      	ldr	r3, [pc, #136]	; (800a7e4 <RadioIrqProcess+0x3e4>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d031      	beq.n	800a7c4 <RadioIrqProcess+0x3c4>
 800a760:	4b20      	ldr	r3, [pc, #128]	; (800a7e4 <RadioIrqProcess+0x3e4>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d02c      	beq.n	800a7c4 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800a76a:	4b1e      	ldr	r3, [pc, #120]	; (800a7e4 <RadioIrqProcess+0x3e4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	4798      	blx	r3
        break;
 800a772:	e027      	b.n	800a7c4 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 800a774:	4b17      	ldr	r3, [pc, #92]	; (800a7d4 <RadioIrqProcess+0x3d4>)
 800a776:	785b      	ldrb	r3, [r3, #1]
 800a778:	f083 0301 	eor.w	r3, r3, #1
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800a782:	2000      	movs	r0, #0
 800a784:	f000 fe9c 	bl	800b4c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800a788:	4b16      	ldr	r3, [pc, #88]	; (800a7e4 <RadioIrqProcess+0x3e4>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d01b      	beq.n	800a7c8 <RadioIrqProcess+0x3c8>
 800a790:	4b14      	ldr	r3, [pc, #80]	; (800a7e4 <RadioIrqProcess+0x3e4>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d016      	beq.n	800a7c8 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800a79a:	4b12      	ldr	r3, [pc, #72]	; (800a7e4 <RadioIrqProcess+0x3e4>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	4798      	blx	r3
        break;
 800a7a2:	e011      	b.n	800a7c8 <RadioIrqProcess+0x3c8>
        break;
 800a7a4:	bf00      	nop
 800a7a6:	e010      	b.n	800a7ca <RadioIrqProcess+0x3ca>
        break;
 800a7a8:	bf00      	nop
 800a7aa:	e00e      	b.n	800a7ca <RadioIrqProcess+0x3ca>
        break;
 800a7ac:	bf00      	nop
 800a7ae:	e00c      	b.n	800a7ca <RadioIrqProcess+0x3ca>
        break;
 800a7b0:	bf00      	nop
 800a7b2:	e00a      	b.n	800a7ca <RadioIrqProcess+0x3ca>
        break;
 800a7b4:	bf00      	nop
 800a7b6:	e008      	b.n	800a7ca <RadioIrqProcess+0x3ca>
        break;
 800a7b8:	bf00      	nop
 800a7ba:	e006      	b.n	800a7ca <RadioIrqProcess+0x3ca>
        break;
 800a7bc:	bf00      	nop
 800a7be:	e004      	b.n	800a7ca <RadioIrqProcess+0x3ca>
        break;
 800a7c0:	bf00      	nop
 800a7c2:	e002      	b.n	800a7ca <RadioIrqProcess+0x3ca>
        break;
 800a7c4:	bf00      	nop
 800a7c6:	e000      	b.n	800a7ca <RadioIrqProcess+0x3ca>
        break;
 800a7c8:	bf00      	nop
    }
}
 800a7ca:	bf00      	nop
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20000750 	.word	0x20000750
 800a7d8:	0800a20f 	.word	0x0800a20f
 800a7dc:	0800a233 	.word	0x0800a233
 800a7e0:	200007c4 	.word	0x200007c4
 800a7e4:	2000074c 	.word	0x2000074c

0800a7e8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800a7ec:	4b09      	ldr	r3, [pc, #36]	; (800a814 <RadioTxPrbs+0x2c>)
 800a7ee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f001 fcdb 	bl	800c1b0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800a7fa:	4b07      	ldr	r3, [pc, #28]	; (800a818 <RadioTxPrbs+0x30>)
 800a7fc:	212d      	movs	r1, #45	; 0x2d
 800a7fe:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a802:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800a804:	f000 ff1f 	bl	800b646 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800a808:	4804      	ldr	r0, [pc, #16]	; (800a81c <RadioTxPrbs+0x34>)
 800a80a:	f000 fe75 	bl	800b4f8 <SUBGRF_SetTx>
}
 800a80e:	bf00      	nop
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20000750 	.word	0x20000750
 800a818:	0800a20f 	.word	0x0800a20f
 800a81c:	000fffff 	.word	0x000fffff

0800a820 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800a82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a82e:	4618      	mov	r0, r3
 800a830:	f001 fce6 	bl	800c200 <SUBGRF_SetRfTxPower>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a838:	210e      	movs	r1, #14
 800a83a:	f640 101f 	movw	r0, #2335	; 0x91f
 800a83e:	f001 fbc3 	bl	800bfc8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800a842:	7bfb      	ldrb	r3, [r7, #15]
 800a844:	2101      	movs	r1, #1
 800a846:	4618      	mov	r0, r3
 800a848:	f001 fcb2 	bl	800c1b0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800a84c:	f000 fef2 	bl	800b634 <SUBGRF_SetTxContinuousWave>
}
 800a850:	bf00      	nop
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800a858:	b480      	push	{r7}
 800a85a:	b089      	sub	sp, #36	; 0x24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	4613      	mov	r3, r2
 800a864:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800a86e:	2300      	movs	r3, #0
 800a870:	61bb      	str	r3, [r7, #24]
 800a872:	e011      	b.n	800a898 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	4413      	add	r3, r2
 800a87a:	781a      	ldrb	r2, [r3, #0]
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	440b      	add	r3, r1
 800a882:	43d2      	mvns	r2, r2
 800a884:	b2d2      	uxtb	r2, r2
 800a886:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	3301      	adds	r3, #1
 800a896:	61bb      	str	r3, [r7, #24]
 800a898:	79fb      	ldrb	r3, [r7, #7]
 800a89a:	69ba      	ldr	r2, [r7, #24]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	dbe9      	blt.n	800a874 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	61bb      	str	r3, [r7, #24]
 800a8a4:	e049      	b.n	800a93a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	425a      	negs	r2, r3
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	f002 0207 	and.w	r2, r2, #7
 800a8b2:	bf58      	it	pl
 800a8b4:	4253      	negpl	r3, r2
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f1c3 0307 	rsb	r3, r3, #7
 800a8bc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	da00      	bge.n	800a8c6 <payload_integration+0x6e>
 800a8c4:	3307      	adds	r3, #7
 800a8c6:	10db      	asrs	r3, r3, #3
 800a8c8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	425a      	negs	r2, r3
 800a8d0:	f003 0307 	and.w	r3, r3, #7
 800a8d4:	f002 0207 	and.w	r2, r2, #7
 800a8d8:	bf58      	it	pl
 800a8da:	4253      	negpl	r3, r2
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	f1c3 0307 	rsb	r3, r3, #7
 800a8e2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	da00      	bge.n	800a8ee <payload_integration+0x96>
 800a8ec:	3307      	adds	r3, #7
 800a8ee:	10db      	asrs	r3, r3, #3
 800a8f0:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800a8f2:	7dbb      	ldrb	r3, [r7, #22]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	fa42 f303 	asr.w	r3, r2, r3
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800a90a:	7ffa      	ldrb	r2, [r7, #31]
 800a90c:	7cfb      	ldrb	r3, [r7, #19]
 800a90e:	4053      	eors	r3, r2
 800a910:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800a912:	7d3b      	ldrb	r3, [r7, #20]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4413      	add	r3, r2
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	b25a      	sxtb	r2, r3
 800a91c:	7ff9      	ldrb	r1, [r7, #31]
 800a91e:	7d7b      	ldrb	r3, [r7, #21]
 800a920:	fa01 f303 	lsl.w	r3, r1, r3
 800a924:	b25b      	sxtb	r3, r3
 800a926:	4313      	orrs	r3, r2
 800a928:	b259      	sxtb	r1, r3
 800a92a:	7d3b      	ldrb	r3, [r7, #20]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	b2ca      	uxtb	r2, r1
 800a932:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	3301      	adds	r3, #1
 800a938:	61bb      	str	r3, [r7, #24]
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	69ba      	ldr	r2, [r7, #24]
 800a940:	429a      	cmp	r2, r3
 800a942:	dbb0      	blt.n	800a8a6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800a944:	7ffb      	ldrb	r3, [r7, #31]
 800a946:	01db      	lsls	r3, r3, #7
 800a948:	b25a      	sxtb	r2, r3
 800a94a:	7ffb      	ldrb	r3, [r7, #31]
 800a94c:	019b      	lsls	r3, r3, #6
 800a94e:	b25b      	sxtb	r3, r3
 800a950:	4313      	orrs	r3, r2
 800a952:	b25b      	sxtb	r3, r3
 800a954:	7ffa      	ldrb	r2, [r7, #31]
 800a956:	2a00      	cmp	r2, #0
 800a958:	d101      	bne.n	800a95e <payload_integration+0x106>
 800a95a:	2220      	movs	r2, #32
 800a95c:	e000      	b.n	800a960 <payload_integration+0x108>
 800a95e:	2200      	movs	r2, #0
 800a960:	4313      	orrs	r3, r2
 800a962:	b259      	sxtb	r1, r3
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	4413      	add	r3, r2
 800a96a:	b2ca      	uxtb	r2, r1
 800a96c:	701a      	strb	r2, [r3, #0]
}
 800a96e:	bf00      	nop
 800a970:	3724      	adds	r7, #36	; 0x24
 800a972:	46bd      	mov	sp, r7
 800a974:	bc80      	pop	{r7}
 800a976:	4770      	bx	lr

0800a978 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08c      	sub	sp, #48	; 0x30
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60b9      	str	r1, [r7, #8]
 800a980:	607a      	str	r2, [r7, #4]
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800a98c:	2300      	movs	r3, #0
 800a98e:	623b      	str	r3, [r7, #32]
 800a990:	2300      	movs	r3, #0
 800a992:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a994:	f001 fdff 	bl	800c596 <RFW_DeInit>

    if( rxContinuous != 0 )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	bf14      	ite	ne
 800a9a8:	2301      	movne	r3, #1
 800a9aa:	2300      	moveq	r3, #0
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	4ba3      	ldr	r3, [pc, #652]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800a9b0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d003      	beq.n	800a9c0 <RadioSetRxGenericConfig+0x48>
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	f000 80dc 	beq.w	800ab76 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800a9be:	e194      	b.n	800acea <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <RadioSetRxGenericConfig+0x58>
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d102      	bne.n	800a9d6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9d4:	e18a      	b.n	800acec <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	7f9b      	ldrb	r3, [r3, #30]
 800a9da:	2b08      	cmp	r3, #8
 800a9dc:	d902      	bls.n	800a9e4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800a9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9e2:	e183      	b.n	800acec <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	6919      	ldr	r1, [r3, #16]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	7f9b      	ldrb	r3, [r3, #30]
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	f107 0320 	add.w	r3, r7, #32
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f001 ff52 	bl	800c89c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	bf14      	ite	ne
 800aa00:	2301      	movne	r3, #1
 800aa02:	2300      	moveq	r3, #0
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fe26 	bl	800b658 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800aa0c:	4b8b      	ldr	r3, [pc, #556]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	4a88      	ldr	r2, [pc, #544]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa1a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800aa22:	4b86      	ldr	r3, [pc, #536]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f001 fce5 	bl	800c3fc <SUBGRF_GetFskBandwidthRegValue>
 800aa32:	4603      	mov	r3, r0
 800aa34:	461a      	mov	r2, r3
 800aa36:	4b81      	ldr	r3, [pc, #516]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800aa3c:	4b7f      	ldr	r3, [pc, #508]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	4b7b      	ldr	r3, [pc, #492]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa4e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	7fda      	ldrb	r2, [r3, #31]
 800aa54:	4b79      	ldr	r3, [pc, #484]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa56:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	7f9b      	ldrb	r3, [r3, #30]
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	4b76      	ldr	r3, [pc, #472]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa62:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800aa6a:	4b74      	ldr	r3, [pc, #464]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa6c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d105      	bne.n	800aa84 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	4b6f      	ldr	r3, [pc, #444]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa80:	759a      	strb	r2, [r3, #22]
 800aa82:	e00b      	b.n	800aa9c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d103      	bne.n	800aa96 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800aa8e:	4b6b      	ldr	r3, [pc, #428]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa90:	22ff      	movs	r2, #255	; 0xff
 800aa92:	759a      	strb	r2, [r3, #22]
 800aa94:	e002      	b.n	800aa9c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800aa96:	4b69      	ldr	r3, [pc, #420]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aa98:	22ff      	movs	r2, #255	; 0xff
 800aa9a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d004      	beq.n	800aab0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d12d      	bne.n	800ab0c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800aab6:	2bf1      	cmp	r3, #241	; 0xf1
 800aab8:	d00c      	beq.n	800aad4 <RadioSetRxGenericConfig+0x15c>
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800aac0:	2bf2      	cmp	r3, #242	; 0xf2
 800aac2:	d007      	beq.n	800aad4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d002      	beq.n	800aad4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800aace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aad2:	e10b      	b.n	800acec <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800aad4:	2300      	movs	r3, #0
 800aad6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800aadc:	4b58      	ldr	r3, [pc, #352]	; (800ac40 <RadioSetRxGenericConfig+0x2c8>)
 800aade:	6819      	ldr	r1, [r3, #0]
 800aae0:	f107 0314 	add.w	r3, r7, #20
 800aae4:	4a57      	ldr	r2, [pc, #348]	; (800ac44 <RadioSetRxGenericConfig+0x2cc>)
 800aae6:	4618      	mov	r0, r3
 800aae8:	f001 fd48 	bl	800c57c <RFW_Init>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <RadioSetRxGenericConfig+0x180>
                return -1;
 800aaf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaf6:	e0f9      	b.n	800acec <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800aaf8:	4b50      	ldr	r3, [pc, #320]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800aafe:	4b4f      	ldr	r3, [pc, #316]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800ab00:	2201      	movs	r2, #1
 800ab02:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800ab04:	4b4d      	ldr	r3, [pc, #308]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	755a      	strb	r2, [r3, #21]
        {
 800ab0a:	e00e      	b.n	800ab2a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800ab12:	4b4a      	ldr	r3, [pc, #296]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800ab14:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800ab1c:	4b47      	ldr	r3, [pc, #284]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800ab1e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800ab26:	4b45      	ldr	r3, [pc, #276]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800ab28:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800ab2a:	f7ff fa6e 	bl	800a00a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800ab2e:	2000      	movs	r0, #0
 800ab30:	f7fe fc0a 	bl	8009348 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ab34:	4844      	ldr	r0, [pc, #272]	; (800ac48 <RadioSetRxGenericConfig+0x2d0>)
 800ab36:	f001 f82d 	bl	800bb94 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ab3a:	4844      	ldr	r0, [pc, #272]	; (800ac4c <RadioSetRxGenericConfig+0x2d4>)
 800ab3c:	f001 f8fc 	bl	800bd38 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800ab40:	f107 0320 	add.w	r3, r7, #32
 800ab44:	4618      	mov	r0, r3
 800ab46:	f000 fbc0 	bl	800b2ca <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	8b9b      	ldrh	r3, [r3, #28]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fc0a 	bl	800b368 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	8b1b      	ldrh	r3, [r3, #24]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 fbe5 	bl	800b328 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ab64:	fb03 f202 	mul.w	r2, r3, r2
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab70:	4a32      	ldr	r2, [pc, #200]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800ab72:	6093      	str	r3, [r2, #8]
        break;
 800ab74:	e0b9      	b.n	800acea <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d102      	bne.n	800ab84 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800ab7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab82:	e0b3      	b.n	800acec <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d104      	bne.n	800ab98 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ab96:	e002      	b.n	800ab9e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800ab98:	23ff      	movs	r3, #255	; 0xff
 800ab9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	bf14      	ite	ne
 800aba6:	2301      	movne	r3, #1
 800aba8:	2300      	moveq	r3, #0
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fd53 	bl	800b658 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fd5d 	bl	800b676 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800abbc:	4b1f      	ldr	r3, [pc, #124]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800abca:	4b1c      	ldr	r3, [pc, #112]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800abcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800abd6:	4b19      	ldr	r3, [pc, #100]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800abd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800abe2:	4b16      	ldr	r3, [pc, #88]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800abe4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d010      	beq.n	800ac14 <RadioSetRxGenericConfig+0x29c>
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	dc2c      	bgt.n	800ac50 <RadioSetRxGenericConfig+0x2d8>
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <RadioSetRxGenericConfig+0x288>
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d005      	beq.n	800ac0a <RadioSetRxGenericConfig+0x292>
            break;
 800abfe:	e027      	b.n	800ac50 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ac00:	4b0e      	ldr	r3, [pc, #56]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ac08:	e023      	b.n	800ac52 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ac0a:	4b0c      	ldr	r3, [pc, #48]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ac12:	e01e      	b.n	800ac52 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ac1a:	2b0b      	cmp	r3, #11
 800ac1c:	d004      	beq.n	800ac28 <RadioSetRxGenericConfig+0x2b0>
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ac24:	2b0c      	cmp	r3, #12
 800ac26:	d104      	bne.n	800ac32 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ac28:	4b04      	ldr	r3, [pc, #16]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ac30:	e00f      	b.n	800ac52 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ac32:	4b02      	ldr	r3, [pc, #8]	; (800ac3c <RadioSetRxGenericConfig+0x2c4>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ac3a:	e00a      	b.n	800ac52 <RadioSetRxGenericConfig+0x2da>
 800ac3c:	20000750 	.word	0x20000750
 800ac40:	2000074c 	.word	0x2000074c
 800ac44:	200007c4 	.word	0x200007c4
 800ac48:	20000788 	.word	0x20000788
 800ac4c:	2000075e 	.word	0x2000075e
            break;
 800ac50:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ac52:	4b28      	ldr	r3, [pc, #160]	; (800acf4 <RadioSetRxGenericConfig+0x37c>)
 800ac54:	2201      	movs	r2, #1
 800ac56:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800ac5c:	4b25      	ldr	r3, [pc, #148]	; (800acf4 <RadioSetRxGenericConfig+0x37c>)
 800ac5e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800ac66:	4b23      	ldr	r3, [pc, #140]	; (800acf4 <RadioSetRxGenericConfig+0x37c>)
 800ac68:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800ac6a:	4a22      	ldr	r2, [pc, #136]	; (800acf4 <RadioSetRxGenericConfig+0x37c>)
 800ac6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac70:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ac78:	4b1e      	ldr	r3, [pc, #120]	; (800acf4 <RadioSetRxGenericConfig+0x37c>)
 800ac7a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800ac84:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <RadioSetRxGenericConfig+0x37c>)
 800ac86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800ac8a:	f7ff f9be 	bl	800a00a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800ac8e:	2001      	movs	r0, #1
 800ac90:	f7fe fb5a 	bl	8009348 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ac94:	4818      	ldr	r0, [pc, #96]	; (800acf8 <RadioSetRxGenericConfig+0x380>)
 800ac96:	f000 ff7d 	bl	800bb94 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ac9a:	4818      	ldr	r0, [pc, #96]	; (800acfc <RadioSetRxGenericConfig+0x384>)
 800ac9c:	f001 f84c 	bl	800bd38 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800aca0:	4b14      	ldr	r3, [pc, #80]	; (800acf4 <RadioSetRxGenericConfig+0x37c>)
 800aca2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d10d      	bne.n	800acc6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800acaa:	f240 7036 	movw	r0, #1846	; 0x736
 800acae:	f001 f99f 	bl	800bff0 <SUBGRF_ReadRegister>
 800acb2:	4603      	mov	r3, r0
 800acb4:	f023 0304 	bic.w	r3, r3, #4
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	4619      	mov	r1, r3
 800acbc:	f240 7036 	movw	r0, #1846	; 0x736
 800acc0:	f001 f982 	bl	800bfc8 <SUBGRF_WriteRegister>
 800acc4:	e00c      	b.n	800ace0 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800acc6:	f240 7036 	movw	r0, #1846	; 0x736
 800acca:	f001 f991 	bl	800bff0 <SUBGRF_ReadRegister>
 800acce:	4603      	mov	r3, r0
 800acd0:	f043 0304 	orr.w	r3, r3, #4
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	4619      	mov	r1, r3
 800acd8:	f240 7036 	movw	r0, #1846	; 0x736
 800acdc:	f001 f974 	bl	800bfc8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800ace0:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <RadioSetRxGenericConfig+0x37c>)
 800ace2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ace6:	609a      	str	r2, [r3, #8]
        break;
 800ace8:	bf00      	nop
    }
    return status;
 800acea:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800acec:	4618      	mov	r0, r3
 800acee:	3730      	adds	r7, #48	; 0x30
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	20000750 	.word	0x20000750
 800acf8:	20000788 	.word	0x20000788
 800acfc:	2000075e 	.word	0x2000075e

0800ad00 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08e      	sub	sp, #56	; 0x38
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60b9      	str	r1, [r7, #8]
 800ad08:	607b      	str	r3, [r7, #4]
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73fb      	strb	r3, [r7, #15]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800ad12:	2300      	movs	r3, #0
 800ad14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad16:	2300      	movs	r3, #0
 800ad18:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ad1a:	f001 fc3c 	bl	800c596 <RFW_DeInit>
    switch( modem )
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	f200 8204 	bhi.w	800b12e <RadioSetTxGenericConfig+0x42e>
 800ad26:	a201      	add	r2, pc, #4	; (adr r2, 800ad2c <RadioSetTxGenericConfig+0x2c>)
 800ad28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2c:	0800aeb1 	.word	0x0800aeb1
 800ad30:	0800aff9 	.word	0x0800aff9
 800ad34:	0800b0f1 	.word	0x0800b0f1
 800ad38:	0800ad3d 	.word	0x0800ad3d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	7c9b      	ldrb	r3, [r3, #18]
 800ad40:	2b08      	cmp	r3, #8
 800ad42:	d902      	bls.n	800ad4a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800ad44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad48:	e206      	b.n	800b158 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	6899      	ldr	r1, [r3, #8]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	7c9b      	ldrb	r3, [r3, #18]
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f001 fd9f 	bl	800c89c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d102      	bne.n	800ad6c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800ad66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad6a:	e1f5      	b.n	800b158 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f242 7210 	movw	r2, #10000	; 0x2710
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d813      	bhi.n	800ada0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800ad78:	2302      	movs	r3, #2
 800ad7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800ad7e:	4b99      	ldr	r3, [pc, #612]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ad80:	2203      	movs	r2, #3
 800ad82:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800ad84:	4b97      	ldr	r3, [pc, #604]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ad86:	2203      	movs	r2, #3
 800ad88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a94      	ldr	r2, [pc, #592]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ad92:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	7cda      	ldrb	r2, [r3, #19]
 800ad98:	4b92      	ldr	r3, [pc, #584]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ad9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad9e:	e017      	b.n	800add0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ada6:	4b8f      	ldr	r3, [pc, #572]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800adac:	4b8d      	ldr	r3, [pc, #564]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a8a      	ldr	r2, [pc, #552]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800adba:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	7cda      	ldrb	r2, [r3, #19]
 800adc0:	4b88      	ldr	r3, [pc, #544]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800adc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	089b      	lsrs	r3, r3, #2
 800adcc:	4a85      	ldr	r2, [pc, #532]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800adce:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	b29b      	uxth	r3, r3
 800add6:	00db      	lsls	r3, r3, #3
 800add8:	b29a      	uxth	r2, r3
 800adda:	4b82      	ldr	r3, [pc, #520]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800addc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800adde:	4b81      	ldr	r3, [pc, #516]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ade0:	2204      	movs	r2, #4
 800ade2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	7c9b      	ldrb	r3, [r3, #18]
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	b2da      	uxtb	r2, r3
 800adec:	4b7d      	ldr	r3, [pc, #500]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800adee:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800adf0:	4b7c      	ldr	r3, [pc, #496]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	7d9b      	ldrb	r3, [r3, #22]
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d003      	beq.n	800ae06 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	7d1b      	ldrb	r3, [r3, #20]
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d12b      	bne.n	800ae5e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	7d5b      	ldrb	r3, [r3, #21]
 800ae0a:	2bf1      	cmp	r3, #241	; 0xf1
 800ae0c:	d00a      	beq.n	800ae24 <RadioSetTxGenericConfig+0x124>
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	7d5b      	ldrb	r3, [r3, #21]
 800ae12:	2bf2      	cmp	r3, #242	; 0xf2
 800ae14:	d006      	beq.n	800ae24 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	7d5b      	ldrb	r3, [r3, #21]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d002      	beq.n	800ae24 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800ae1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae22:	e199      	b.n	800b158 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800ae2e:	4b6e      	ldr	r3, [pc, #440]	; (800afe8 <RadioSetTxGenericConfig+0x2e8>)
 800ae30:	6819      	ldr	r1, [r3, #0]
 800ae32:	f107 0320 	add.w	r3, r7, #32
 800ae36:	4a6d      	ldr	r2, [pc, #436]	; (800afec <RadioSetTxGenericConfig+0x2ec>)
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f001 fb9f 	bl	800c57c <RFW_Init>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800ae44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae48:	e186      	b.n	800b158 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800ae4a:	4b66      	ldr	r3, [pc, #408]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800ae50:	4b64      	ldr	r3, [pc, #400]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800ae56:	4b63      	ldr	r3, [pc, #396]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	755a      	strb	r2, [r3, #21]
        {
 800ae5c:	e00b      	b.n	800ae76 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	7d5a      	ldrb	r2, [r3, #21]
 800ae62:	4b60      	ldr	r3, [pc, #384]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ae64:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	7d9a      	ldrb	r2, [r3, #22]
 800ae6a:	4b5e      	ldr	r3, [pc, #376]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ae6c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	7d1a      	ldrb	r2, [r3, #20]
 800ae72:	4b5c      	ldr	r3, [pc, #368]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800ae74:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800ae76:	f7ff f8c8 	bl	800a00a <RadioStandby>
        RadioSetModem( radio_modem );
 800ae7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fa62 	bl	8009348 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ae84:	485a      	ldr	r0, [pc, #360]	; (800aff0 <RadioSetTxGenericConfig+0x2f0>)
 800ae86:	f000 fe85 	bl	800bb94 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ae8a:	485a      	ldr	r0, [pc, #360]	; (800aff4 <RadioSetTxGenericConfig+0x2f4>)
 800ae8c:	f000 ff54 	bl	800bd38 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800ae90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 fa18 	bl	800b2ca <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	8a1b      	ldrh	r3, [r3, #16]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 fa62 	bl	800b368 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	899b      	ldrh	r3, [r3, #12]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 fa3d 	bl	800b328 <SUBGRF_SetCrcPolynomial>
        break;
 800aeae:	e13f      	b.n	800b130 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d102      	bne.n	800aebe <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800aeb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aebc:	e14c      	b.n	800b158 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	7c9b      	ldrb	r3, [r3, #18]
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	d902      	bls.n	800aecc <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800aec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aeca:	e145      	b.n	800b158 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	6899      	ldr	r1, [r3, #8]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	7c9b      	ldrb	r3, [r3, #18]
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aeda:	4618      	mov	r0, r3
 800aedc:	f001 fcde 	bl	800c89c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800aee0:	4b40      	ldr	r3, [pc, #256]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a3d      	ldr	r2, [pc, #244]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800aeee:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	7cda      	ldrb	r2, [r3, #19]
 800aef4:	4b3b      	ldr	r3, [pc, #236]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800aef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	699b      	ldr	r3, [r3, #24]
 800aefe:	4a39      	ldr	r2, [pc, #228]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800af00:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800af02:	4b38      	ldr	r3, [pc, #224]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800af04:	2200      	movs	r2, #0
 800af06:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	00db      	lsls	r3, r3, #3
 800af10:	b29a      	uxth	r2, r3
 800af12:	4b34      	ldr	r3, [pc, #208]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800af14:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800af16:	4b33      	ldr	r3, [pc, #204]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800af18:	2204      	movs	r2, #4
 800af1a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	7c9b      	ldrb	r3, [r3, #18]
 800af20:	00db      	lsls	r3, r3, #3
 800af22:	b2da      	uxtb	r2, r3
 800af24:	4b2f      	ldr	r3, [pc, #188]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800af26:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800af28:	4b2e      	ldr	r3, [pc, #184]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	7d9b      	ldrb	r3, [r3, #22]
 800af32:	2b02      	cmp	r3, #2
 800af34:	d003      	beq.n	800af3e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	7d1b      	ldrb	r3, [r3, #20]
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d12a      	bne.n	800af94 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	7d5b      	ldrb	r3, [r3, #21]
 800af42:	2bf1      	cmp	r3, #241	; 0xf1
 800af44:	d00a      	beq.n	800af5c <RadioSetTxGenericConfig+0x25c>
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	7d5b      	ldrb	r3, [r3, #21]
 800af4a:	2bf2      	cmp	r3, #242	; 0xf2
 800af4c:	d006      	beq.n	800af5c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	7d5b      	ldrb	r3, [r3, #21]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d002      	beq.n	800af5c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800af56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af5a:	e0fd      	b.n	800b158 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800af5c:	2301      	movs	r3, #1
 800af5e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800af64:	4b20      	ldr	r3, [pc, #128]	; (800afe8 <RadioSetTxGenericConfig+0x2e8>)
 800af66:	6819      	ldr	r1, [r3, #0]
 800af68:	f107 0314 	add.w	r3, r7, #20
 800af6c:	4a1f      	ldr	r2, [pc, #124]	; (800afec <RadioSetTxGenericConfig+0x2ec>)
 800af6e:	4618      	mov	r0, r3
 800af70:	f001 fb04 	bl	800c57c <RFW_Init>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d002      	beq.n	800af80 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800af7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af7e:	e0eb      	b.n	800b158 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800af80:	4b18      	ldr	r3, [pc, #96]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800af82:	2200      	movs	r2, #0
 800af84:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800af86:	4b17      	ldr	r3, [pc, #92]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800af88:	2201      	movs	r2, #1
 800af8a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800af8c:	4b15      	ldr	r3, [pc, #84]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800af8e:	2200      	movs	r2, #0
 800af90:	755a      	strb	r2, [r3, #21]
        {
 800af92:	e00b      	b.n	800afac <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	7d5a      	ldrb	r2, [r3, #21]
 800af98:	4b12      	ldr	r3, [pc, #72]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800af9a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	7d9a      	ldrb	r2, [r3, #22]
 800afa0:	4b10      	ldr	r3, [pc, #64]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800afa2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	7d1a      	ldrb	r2, [r3, #20]
 800afa8:	4b0e      	ldr	r3, [pc, #56]	; (800afe4 <RadioSetTxGenericConfig+0x2e4>)
 800afaa:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800afac:	f7ff f82d 	bl	800a00a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800afb0:	2000      	movs	r0, #0
 800afb2:	f7fe f9c9 	bl	8009348 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800afb6:	480e      	ldr	r0, [pc, #56]	; (800aff0 <RadioSetTxGenericConfig+0x2f0>)
 800afb8:	f000 fdec 	bl	800bb94 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800afbc:	480d      	ldr	r0, [pc, #52]	; (800aff4 <RadioSetTxGenericConfig+0x2f4>)
 800afbe:	f000 febb 	bl	800bd38 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800afc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 f97f 	bl	800b2ca <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	8a1b      	ldrh	r3, [r3, #16]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 f9c9 	bl	800b368 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	899b      	ldrh	r3, [r3, #12]
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 f9a4 	bl	800b328 <SUBGRF_SetCrcPolynomial>
        break;
 800afe0:	e0a6      	b.n	800b130 <RadioSetTxGenericConfig+0x430>
 800afe2:	bf00      	nop
 800afe4:	20000750 	.word	0x20000750
 800afe8:	2000074c 	.word	0x2000074c
 800afec:	200007ac 	.word	0x200007ac
 800aff0:	20000788 	.word	0x20000788
 800aff4:	2000075e 	.word	0x2000075e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800aff8:	4b59      	ldr	r3, [pc, #356]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	781a      	ldrb	r2, [r3, #0]
 800b004:	4b56      	ldr	r3, [pc, #344]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	785a      	ldrb	r2, [r3, #1]
 800b00e:	4b54      	ldr	r3, [pc, #336]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	789a      	ldrb	r2, [r3, #2]
 800b018:	4b51      	ldr	r3, [pc, #324]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b01a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	78db      	ldrb	r3, [r3, #3]
 800b022:	2b02      	cmp	r3, #2
 800b024:	d010      	beq.n	800b048 <RadioSetTxGenericConfig+0x348>
 800b026:	2b02      	cmp	r3, #2
 800b028:	dc20      	bgt.n	800b06c <RadioSetTxGenericConfig+0x36c>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d002      	beq.n	800b034 <RadioSetTxGenericConfig+0x334>
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d005      	beq.n	800b03e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800b032:	e01b      	b.n	800b06c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b034:	4b4a      	ldr	r3, [pc, #296]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b03c:	e017      	b.n	800b06e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b03e:	4b48      	ldr	r3, [pc, #288]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b046:	e012      	b.n	800b06e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	2b0b      	cmp	r3, #11
 800b04e:	d003      	beq.n	800b058 <RadioSetTxGenericConfig+0x358>
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	2b0c      	cmp	r3, #12
 800b056:	d104      	bne.n	800b062 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b058:	4b41      	ldr	r3, [pc, #260]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b060:	e005      	b.n	800b06e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b062:	4b3f      	ldr	r3, [pc, #252]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b064:	2200      	movs	r2, #0
 800b066:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b06a:	e000      	b.n	800b06e <RadioSetTxGenericConfig+0x36e>
            break;
 800b06c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b06e:	4b3c      	ldr	r3, [pc, #240]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b070:	2201      	movs	r2, #1
 800b072:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	889a      	ldrh	r2, [r3, #4]
 800b078:	4b39      	ldr	r3, [pc, #228]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b07a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	799a      	ldrb	r2, [r3, #6]
 800b080:	4b37      	ldr	r3, [pc, #220]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b082:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	79da      	ldrb	r2, [r3, #7]
 800b088:	4b35      	ldr	r3, [pc, #212]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b08a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	7a1a      	ldrb	r2, [r3, #8]
 800b092:	4b33      	ldr	r3, [pc, #204]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800b098:	f7fe ffb7 	bl	800a00a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b09c:	2001      	movs	r0, #1
 800b09e:	f7fe f953 	bl	8009348 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b0a2:	4830      	ldr	r0, [pc, #192]	; (800b164 <RadioSetTxGenericConfig+0x464>)
 800b0a4:	f000 fd76 	bl	800bb94 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b0a8:	482f      	ldr	r0, [pc, #188]	; (800b168 <RadioSetTxGenericConfig+0x468>)
 800b0aa:	f000 fe45 	bl	800bd38 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800b0ae:	4b2c      	ldr	r3, [pc, #176]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b0b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0b4:	2b06      	cmp	r3, #6
 800b0b6:	d10d      	bne.n	800b0d4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800b0b8:	f640 0089 	movw	r0, #2185	; 0x889
 800b0bc:	f000 ff98 	bl	800bff0 <SUBGRF_ReadRegister>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f023 0304 	bic.w	r3, r3, #4
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	f640 0089 	movw	r0, #2185	; 0x889
 800b0ce:	f000 ff7b 	bl	800bfc8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800b0d2:	e02d      	b.n	800b130 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800b0d4:	f640 0089 	movw	r0, #2185	; 0x889
 800b0d8:	f000 ff8a 	bl	800bff0 <SUBGRF_ReadRegister>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f043 0304 	orr.w	r3, r3, #4
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	f640 0089 	movw	r0, #2185	; 0x889
 800b0ea:	f000 ff6d 	bl	800bfc8 <SUBGRF_WriteRegister>
        break;
 800b0ee:	e01f      	b.n	800b130 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d004      	beq.n	800b102 <RadioSetTxGenericConfig+0x402>
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b100:	d902      	bls.n	800b108 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800b102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b106:	e027      	b.n	800b158 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800b108:	2003      	movs	r0, #3
 800b10a:	f7fe f91d 	bl	8009348 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800b10e:	4b14      	ldr	r3, [pc, #80]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b110:	2202      	movs	r2, #2
 800b112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a11      	ldr	r2, [pc, #68]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b11c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800b11e:	4b10      	ldr	r3, [pc, #64]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b120:	2216      	movs	r2, #22
 800b122:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b126:	480f      	ldr	r0, [pc, #60]	; (800b164 <RadioSetTxGenericConfig+0x464>)
 800b128:	f000 fd34 	bl	800bb94 <SUBGRF_SetModulationParams>
        break;
 800b12c:	e000      	b.n	800b130 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800b12e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800b130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b134:	4618      	mov	r0, r3
 800b136:	f001 f863 	bl	800c200 <SUBGRF_SetRfTxPower>
 800b13a:	4603      	mov	r3, r0
 800b13c:	461a      	mov	r2, r3
 800b13e:	4b08      	ldr	r3, [pc, #32]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b140:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800b144:	4b06      	ldr	r3, [pc, #24]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b146:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800b14a:	4618      	mov	r0, r3
 800b14c:	f001 fa37 	bl	800c5be <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800b150:	4a03      	ldr	r2, [pc, #12]	; (800b160 <RadioSetTxGenericConfig+0x460>)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6053      	str	r3, [r2, #4]
    return 0;
 800b156:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3738      	adds	r7, #56	; 0x38
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	20000750 	.word	0x20000750
 800b164:	20000788 	.word	0x20000788
 800b168:	2000075e 	.word	0x2000075e

0800b16c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800b174:	2301      	movs	r3, #1
 800b176:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800b178:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	bc80      	pop	{r7}
 800b182:	4770      	bx	lr

0800b184 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800b18e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	bc80      	pop	{r7}
 800b198:	4770      	bx	lr
	...

0800b19c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800b1aa:	4a1d      	ldr	r2, [pc, #116]	; (800b220 <SUBGRF_Init+0x84>)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800b1b0:	f7f6 fb44 	bl	800183c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800b1b4:	2002      	movs	r0, #2
 800b1b6:	f001 f8ff 	bl	800c3b8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800b1ba:	4b1a      	ldr	r3, [pc, #104]	; (800b224 <SUBGRF_Init+0x88>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	f000 f97d 	bl	800b4c0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800b1c6:	f001 fb3e 	bl	800c846 <RBI_IsTCXO>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d10e      	bne.n	800b1ee <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800b1d0:	2140      	movs	r1, #64	; 0x40
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	f000 fb82 	bl	800b8dc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800b1d8:	2100      	movs	r1, #0
 800b1da:	f640 1011 	movw	r0, #2321	; 0x911
 800b1de:	f000 fef3 	bl	800bfc8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800b1e2:	237f      	movs	r3, #127	; 0x7f
 800b1e4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800b1e6:	7b38      	ldrb	r0, [r7, #12]
 800b1e8:	f000 fa8b 	bl	800b702 <SUBGRF_Calibrate>
 800b1ec:	e009      	b.n	800b202 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800b1ee:	2120      	movs	r1, #32
 800b1f0:	f640 1011 	movw	r0, #2321	; 0x911
 800b1f4:	f000 fee8 	bl	800bfc8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800b1f8:	2120      	movs	r1, #32
 800b1fa:	f640 1012 	movw	r0, #2322	; 0x912
 800b1fe:	f000 fee3 	bl	800bfc8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800b202:	210e      	movs	r1, #14
 800b204:	f640 101f 	movw	r0, #2335	; 0x91f
 800b208:	f000 fede 	bl	800bfc8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800b20c:	f001 fa86 	bl	800c71c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800b210:	4b05      	ldr	r3, [pc, #20]	; (800b228 <SUBGRF_Init+0x8c>)
 800b212:	2201      	movs	r2, #1
 800b214:	701a      	strb	r2, [r3, #0]
}
 800b216:	bf00      	nop
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	200007e8 	.word	0x200007e8
 800b224:	200007e4 	.word	0x200007e4
 800b228:	200007dc 	.word	0x200007dc

0800b22c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800b22c:	b480      	push	{r7}
 800b22e:	af00      	add	r7, sp, #0
    return OperatingMode;
 800b230:	4b02      	ldr	r3, [pc, #8]	; (800b23c <SUBGRF_GetOperatingMode+0x10>)
 800b232:	781b      	ldrb	r3, [r3, #0]
}
 800b234:	4618      	mov	r0, r3
 800b236:	46bd      	mov	sp, r7
 800b238:	bc80      	pop	{r7}
 800b23a:	4770      	bx	lr
 800b23c:	200007dc 	.word	0x200007dc

0800b240 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	460b      	mov	r3, r1
 800b24a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800b24c:	78fb      	ldrb	r3, [r7, #3]
 800b24e:	461a      	mov	r2, r3
 800b250:	6879      	ldr	r1, [r7, #4]
 800b252:	2000      	movs	r0, #0
 800b254:	f000 ff24 	bl	800c0a0 <SUBGRF_WriteBuffer>
}
 800b258:	bf00      	nop
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4613      	mov	r3, r2
 800b26c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800b272:	f107 0317 	add.w	r3, r7, #23
 800b276:	4619      	mov	r1, r3
 800b278:	68b8      	ldr	r0, [r7, #8]
 800b27a:	f000 fe27 	bl	800becc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	79fa      	ldrb	r2, [r7, #7]
 800b284:	429a      	cmp	r2, r3
 800b286:	d201      	bcs.n	800b28c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800b288:	2301      	movs	r3, #1
 800b28a:	e007      	b.n	800b29c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800b28c:	7df8      	ldrb	r0, [r7, #23]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	461a      	mov	r2, r3
 800b294:	68f9      	ldr	r1, [r7, #12]
 800b296:	f000 ff25 	bl	800c0e4 <SUBGRF_ReadBuffer>

    return 0;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3718      	adds	r7, #24
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	607a      	str	r2, [r7, #4]
 800b2b0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800b2b2:	7afb      	ldrb	r3, [r7, #11]
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7ff ffc2 	bl	800b240 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f91b 	bl	800b4f8 <SUBGRF_SetTx>
}
 800b2c2:	bf00      	nop
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b082      	sub	sp, #8
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800b2d2:	2208      	movs	r2, #8
 800b2d4:	6879      	ldr	r1, [r7, #4]
 800b2d6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800b2da:	f000 fe9d 	bl	800c018 <SUBGRF_WriteRegisters>
    return 0;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800b2f2:	88fb      	ldrh	r3, [r7, #6]
 800b2f4:	0a1b      	lsrs	r3, r3, #8
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800b2fc:	88fb      	ldrh	r3, [r7, #6]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800b302:	f000 fb6f 	bl	800b9e4 <SUBGRF_GetPacketType>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d108      	bne.n	800b31e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800b30c:	f107 030c 	add.w	r3, r7, #12
 800b310:	2202      	movs	r2, #2
 800b312:	4619      	mov	r1, r3
 800b314:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800b318:	f000 fe7e 	bl	800c018 <SUBGRF_WriteRegisters>
            break;
 800b31c:	e000      	b.n	800b320 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800b31e:	bf00      	nop
    }
}
 800b320:	bf00      	nop
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800b332:	88fb      	ldrh	r3, [r7, #6]
 800b334:	0a1b      	lsrs	r3, r3, #8
 800b336:	b29b      	uxth	r3, r3
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800b33c:	88fb      	ldrh	r3, [r7, #6]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800b342:	f000 fb4f 	bl	800b9e4 <SUBGRF_GetPacketType>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d108      	bne.n	800b35e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800b34c:	f107 030c 	add.w	r3, r7, #12
 800b350:	2202      	movs	r2, #2
 800b352:	4619      	mov	r1, r3
 800b354:	f240 60be 	movw	r0, #1726	; 0x6be
 800b358:	f000 fe5e 	bl	800c018 <SUBGRF_WriteRegisters>
            break;
 800b35c:	e000      	b.n	800b360 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800b35e:	bf00      	nop
    }
}
 800b360:	bf00      	nop
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800b376:	f000 fb35 	bl	800b9e4 <SUBGRF_GetPacketType>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d121      	bne.n	800b3c4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800b380:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800b384:	f000 fe34 	bl	800bff0 <SUBGRF_ReadRegister>
 800b388:	4603      	mov	r3, r0
 800b38a:	f023 0301 	bic.w	r3, r3, #1
 800b38e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800b390:	88fb      	ldrh	r3, [r7, #6]
 800b392:	0a1b      	lsrs	r3, r3, #8
 800b394:	b29b      	uxth	r3, r3
 800b396:	b25b      	sxtb	r3, r3
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	b25a      	sxtb	r2, r3
 800b39e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	b25b      	sxtb	r3, r3
 800b3a6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800b3b0:	f000 fe0a 	bl	800bfc8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800b3b4:	88fb      	ldrh	r3, [r7, #6]
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800b3be:	f000 fe03 	bl	800bfc8 <SUBGRF_WriteRegister>
            break;
 800b3c2:	e000      	b.n	800b3c6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800b3c4:	bf00      	nop
    }
}
 800b3c6:	bf00      	nop
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800b3e0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b3e4:	f000 fe04 	bl	800bff0 <SUBGRF_ReadRegister>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800b3ec:	79fb      	ldrb	r3, [r7, #7]
 800b3ee:	f023 0301 	bic.w	r3, r3, #1
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b3fa:	f000 fde5 	bl	800bfc8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800b3fe:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b402:	f000 fdf5 	bl	800bff0 <SUBGRF_ReadRegister>
 800b406:	4603      	mov	r3, r0
 800b408:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800b40a:	79bb      	ldrb	r3, [r7, #6]
 800b40c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b410:	b2db      	uxtb	r3, r3
 800b412:	4619      	mov	r1, r3
 800b414:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b418:	f000 fdd6 	bl	800bfc8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800b41c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800b420:	f000 f88a 	bl	800b538 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800b424:	463b      	mov	r3, r7
 800b426:	2204      	movs	r2, #4
 800b428:	4619      	mov	r1, r3
 800b42a:	f640 0019 	movw	r0, #2073	; 0x819
 800b42e:	f000 fe15 	bl	800c05c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800b432:	2000      	movs	r0, #0
 800b434:	f000 f844 	bl	800b4c0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800b438:	79fb      	ldrb	r3, [r7, #7]
 800b43a:	4619      	mov	r1, r3
 800b43c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b440:	f000 fdc2 	bl	800bfc8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800b444:	79bb      	ldrb	r3, [r7, #6]
 800b446:	4619      	mov	r1, r3
 800b448:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b44c:	f000 fdbc 	bl	800bfc8 <SUBGRF_WriteRegister>

    return number;
 800b450:	683b      	ldr	r3, [r7, #0]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
	...

0800b45c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800b464:	2000      	movs	r0, #0
 800b466:	f001 f999 	bl	800c79c <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800b46a:	2002      	movs	r0, #2
 800b46c:	f000 ffa4 	bl	800c3b8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b470:	793b      	ldrb	r3, [r7, #4]
 800b472:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b476:	b2db      	uxtb	r3, r3
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b47c:	793b      	ldrb	r3, [r7, #4]
 800b47e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b482:	b2db      	uxtb	r3, r3
 800b484:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b486:	b25b      	sxtb	r3, r3
 800b488:	4313      	orrs	r3, r2
 800b48a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800b48c:	793b      	ldrb	r3, [r7, #4]
 800b48e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b492:	b2db      	uxtb	r3, r3
 800b494:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b496:	4313      	orrs	r3, r2
 800b498:	b25b      	sxtb	r3, r3
 800b49a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b49c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800b49e:	f107 030f 	add.w	r3, r7, #15
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	2084      	movs	r0, #132	; 0x84
 800b4a8:	f000 fe3e 	bl	800c128 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800b4ac:	4b03      	ldr	r3, [pc, #12]	; (800b4bc <SUBGRF_SetSleep+0x60>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	701a      	strb	r2, [r3, #0]
}
 800b4b2:	bf00      	nop
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	200007dc 	.word	0x200007dc

0800b4c0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800b4ca:	1dfb      	adds	r3, r7, #7
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	2080      	movs	r0, #128	; 0x80
 800b4d2:	f000 fe29 	bl	800c128 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800b4d6:	79fb      	ldrb	r3, [r7, #7]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d103      	bne.n	800b4e4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800b4dc:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <SUBGRF_SetStandby+0x34>)
 800b4de:	2201      	movs	r2, #1
 800b4e0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800b4e2:	e002      	b.n	800b4ea <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800b4e4:	4b03      	ldr	r3, [pc, #12]	; (800b4f4 <SUBGRF_SetStandby+0x34>)
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	701a      	strb	r2, [r3, #0]
}
 800b4ea:	bf00      	nop
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	200007dc 	.word	0x200007dc

0800b4f8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800b500:	4b0c      	ldr	r3, [pc, #48]	; (800b534 <SUBGRF_SetTx+0x3c>)
 800b502:	2204      	movs	r2, #4
 800b504:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	0c1b      	lsrs	r3, r3, #16
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	0a1b      	lsrs	r3, r3, #8
 800b512:	b2db      	uxtb	r3, r3
 800b514:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800b51c:	f107 030c 	add.w	r3, r7, #12
 800b520:	2203      	movs	r2, #3
 800b522:	4619      	mov	r1, r3
 800b524:	2083      	movs	r0, #131	; 0x83
 800b526:	f000 fdff 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b52a:	bf00      	nop
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	200007dc 	.word	0x200007dc

0800b538 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b540:	4b0c      	ldr	r3, [pc, #48]	; (800b574 <SUBGRF_SetRx+0x3c>)
 800b542:	2205      	movs	r2, #5
 800b544:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	0c1b      	lsrs	r3, r3, #16
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	0a1b      	lsrs	r3, r3, #8
 800b552:	b2db      	uxtb	r3, r3
 800b554:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b55c:	f107 030c 	add.w	r3, r7, #12
 800b560:	2203      	movs	r2, #3
 800b562:	4619      	mov	r1, r3
 800b564:	2082      	movs	r0, #130	; 0x82
 800b566:	f000 fddf 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b56a:	bf00      	nop
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	200007dc 	.word	0x200007dc

0800b578 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b580:	4b0e      	ldr	r3, [pc, #56]	; (800b5bc <SUBGRF_SetRxBoosted+0x44>)
 800b582:	2205      	movs	r2, #5
 800b584:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800b586:	2197      	movs	r1, #151	; 0x97
 800b588:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800b58c:	f000 fd1c 	bl	800bfc8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	0c1b      	lsrs	r3, r3, #16
 800b594:	b2db      	uxtb	r3, r3
 800b596:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	0a1b      	lsrs	r3, r3, #8
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b5a6:	f107 030c 	add.w	r3, r7, #12
 800b5aa:	2203      	movs	r2, #3
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	2082      	movs	r0, #130	; 0x82
 800b5b0:	f000 fdba 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b5b4:	bf00      	nop
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	200007dc 	.word	0x200007dc

0800b5c0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	0c1b      	lsrs	r3, r3, #16
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	0a1b      	lsrs	r3, r3, #8
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	0c1b      	lsrs	r3, r3, #16
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	0a1b      	lsrs	r3, r3, #8
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800b5f6:	f107 0308 	add.w	r3, r7, #8
 800b5fa:	2206      	movs	r2, #6
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	2094      	movs	r0, #148	; 0x94
 800b600:	f000 fd92 	bl	800c128 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800b604:	4b03      	ldr	r3, [pc, #12]	; (800b614 <SUBGRF_SetRxDutyCycle+0x54>)
 800b606:	2206      	movs	r2, #6
 800b608:	701a      	strb	r2, [r3, #0]
}
 800b60a:	bf00      	nop
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	200007dc 	.word	0x200007dc

0800b618 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800b61c:	2200      	movs	r2, #0
 800b61e:	2100      	movs	r1, #0
 800b620:	20c5      	movs	r0, #197	; 0xc5
 800b622:	f000 fd81 	bl	800c128 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800b626:	4b02      	ldr	r3, [pc, #8]	; (800b630 <SUBGRF_SetCad+0x18>)
 800b628:	2207      	movs	r2, #7
 800b62a:	701a      	strb	r2, [r3, #0]
}
 800b62c:	bf00      	nop
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	200007dc 	.word	0x200007dc

0800b634 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800b638:	2200      	movs	r2, #0
 800b63a:	2100      	movs	r1, #0
 800b63c:	20d1      	movs	r0, #209	; 0xd1
 800b63e:	f000 fd73 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b642:	bf00      	nop
 800b644:	bd80      	pop	{r7, pc}

0800b646 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800b646:	b580      	push	{r7, lr}
 800b648:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800b64a:	2200      	movs	r2, #0
 800b64c:	2100      	movs	r1, #0
 800b64e:	20d2      	movs	r0, #210	; 0xd2
 800b650:	f000 fd6a 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b654:	bf00      	nop
 800b656:	bd80      	pop	{r7, pc}

0800b658 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800b662:	1dfb      	adds	r3, r7, #7
 800b664:	2201      	movs	r2, #1
 800b666:	4619      	mov	r1, r3
 800b668:	209f      	movs	r0, #159	; 0x9f
 800b66a:	f000 fd5d 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	4603      	mov	r3, r0
 800b67e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800b680:	1dfb      	adds	r3, r7, #7
 800b682:	2201      	movs	r2, #1
 800b684:	4619      	mov	r1, r3
 800b686:	20a0      	movs	r0, #160	; 0xa0
 800b688:	f000 fd4e 	bl	800c128 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800b68c:	79fb      	ldrb	r3, [r7, #7]
 800b68e:	2b3f      	cmp	r3, #63	; 0x3f
 800b690:	d91c      	bls.n	800b6cc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800b692:	79fb      	ldrb	r3, [r7, #7]
 800b694:	085b      	lsrs	r3, r3, #1
 800b696:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800b698:	2300      	movs	r3, #0
 800b69a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800b6a0:	e005      	b.n	800b6ae <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
 800b6a4:	089b      	lsrs	r3, r3, #2
 800b6a6:	73fb      	strb	r3, [r7, #15]
            exp++;
 800b6a8:	7bbb      	ldrb	r3, [r7, #14]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800b6ae:	7bfb      	ldrb	r3, [r7, #15]
 800b6b0:	2b1f      	cmp	r3, #31
 800b6b2:	d8f6      	bhi.n	800b6a2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
 800b6b6:	00db      	lsls	r3, r3, #3
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	7bbb      	ldrb	r3, [r7, #14]
 800b6bc:	4413      	add	r3, r2
 800b6be:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800b6c0:	7b7b      	ldrb	r3, [r7, #13]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	f240 7006 	movw	r0, #1798	; 0x706
 800b6c8:	f000 fc7e 	bl	800bfc8 <SUBGRF_WriteRegister>
    }
}
 800b6cc:	bf00      	nop
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800b6da:	f001 f8bf 	bl	800c85c <RBI_IsDCDC>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d102      	bne.n	800b6ea <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	71fb      	strb	r3, [r7, #7]
 800b6e8:	e001      	b.n	800b6ee <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800b6ee:	1dfb      	adds	r3, r7, #7
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	2096      	movs	r0, #150	; 0x96
 800b6f6:	f000 fd17 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b6fa:	bf00      	nop
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b084      	sub	sp, #16
 800b706:	af00      	add	r7, sp, #0
 800b708:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b70a:	793b      	ldrb	r3, [r7, #4]
 800b70c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b710:	b2db      	uxtb	r3, r3
 800b712:	019b      	lsls	r3, r3, #6
 800b714:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b716:	793b      	ldrb	r3, [r7, #4]
 800b718:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b720:	b25b      	sxtb	r3, r3
 800b722:	4313      	orrs	r3, r2
 800b724:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b726:	793b      	ldrb	r3, [r7, #4]
 800b728:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b730:	b25b      	sxtb	r3, r3
 800b732:	4313      	orrs	r3, r2
 800b734:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b736:	793b      	ldrb	r3, [r7, #4]
 800b738:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b740:	b25b      	sxtb	r3, r3
 800b742:	4313      	orrs	r3, r2
 800b744:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b746:	793b      	ldrb	r3, [r7, #4]
 800b748:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b750:	b25b      	sxtb	r3, r3
 800b752:	4313      	orrs	r3, r2
 800b754:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b756:	793b      	ldrb	r3, [r7, #4]
 800b758:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b760:	b25b      	sxtb	r3, r3
 800b762:	4313      	orrs	r3, r2
 800b764:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800b766:	793b      	ldrb	r3, [r7, #4]
 800b768:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b770:	4313      	orrs	r3, r2
 800b772:	b25b      	sxtb	r3, r3
 800b774:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b776:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800b778:	f107 030f 	add.w	r3, r7, #15
 800b77c:	2201      	movs	r2, #1
 800b77e:	4619      	mov	r1, r3
 800b780:	2089      	movs	r0, #137	; 0x89
 800b782:	f000 fcd1 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b786:	bf00      	nop
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
	...

0800b790 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a1d      	ldr	r2, [pc, #116]	; (800b810 <SUBGRF_CalibrateImage+0x80>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d904      	bls.n	800b7aa <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800b7a0:	23e1      	movs	r3, #225	; 0xe1
 800b7a2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800b7a4:	23e9      	movs	r3, #233	; 0xe9
 800b7a6:	737b      	strb	r3, [r7, #13]
 800b7a8:	e027      	b.n	800b7fa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a19      	ldr	r2, [pc, #100]	; (800b814 <SUBGRF_CalibrateImage+0x84>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d904      	bls.n	800b7bc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800b7b2:	23d7      	movs	r3, #215	; 0xd7
 800b7b4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800b7b6:	23db      	movs	r3, #219	; 0xdb
 800b7b8:	737b      	strb	r3, [r7, #13]
 800b7ba:	e01e      	b.n	800b7fa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a16      	ldr	r2, [pc, #88]	; (800b818 <SUBGRF_CalibrateImage+0x88>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d904      	bls.n	800b7ce <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800b7c4:	23c1      	movs	r3, #193	; 0xc1
 800b7c6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800b7c8:	23c5      	movs	r3, #197	; 0xc5
 800b7ca:	737b      	strb	r3, [r7, #13]
 800b7cc:	e015      	b.n	800b7fa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a12      	ldr	r2, [pc, #72]	; (800b81c <SUBGRF_CalibrateImage+0x8c>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d904      	bls.n	800b7e0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800b7d6:	2375      	movs	r3, #117	; 0x75
 800b7d8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800b7da:	2381      	movs	r3, #129	; 0x81
 800b7dc:	737b      	strb	r3, [r7, #13]
 800b7de:	e00c      	b.n	800b7fa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a0f      	ldr	r2, [pc, #60]	; (800b820 <SUBGRF_CalibrateImage+0x90>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d904      	bls.n	800b7f2 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800b7e8:	236b      	movs	r3, #107	; 0x6b
 800b7ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800b7ec:	236f      	movs	r3, #111	; 0x6f
 800b7ee:	737b      	strb	r3, [r7, #13]
 800b7f0:	e003      	b.n	800b7fa <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800b7f2:	2329      	movs	r3, #41	; 0x29
 800b7f4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800b7f6:	232b      	movs	r3, #43	; 0x2b
 800b7f8:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800b7fa:	f107 030c 	add.w	r3, r7, #12
 800b7fe:	2202      	movs	r2, #2
 800b800:	4619      	mov	r1, r3
 800b802:	2098      	movs	r0, #152	; 0x98
 800b804:	f000 fc90 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	35a4e900 	.word	0x35a4e900
 800b814:	32a9f880 	.word	0x32a9f880
 800b818:	2de54480 	.word	0x2de54480
 800b81c:	1b6b0b00 	.word	0x1b6b0b00
 800b820:	1954fc40 	.word	0x1954fc40

0800b824 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800b824:	b590      	push	{r4, r7, lr}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4604      	mov	r4, r0
 800b82c:	4608      	mov	r0, r1
 800b82e:	4611      	mov	r1, r2
 800b830:	461a      	mov	r2, r3
 800b832:	4623      	mov	r3, r4
 800b834:	71fb      	strb	r3, [r7, #7]
 800b836:	4603      	mov	r3, r0
 800b838:	71bb      	strb	r3, [r7, #6]
 800b83a:	460b      	mov	r3, r1
 800b83c:	717b      	strb	r3, [r7, #5]
 800b83e:	4613      	mov	r3, r2
 800b840:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800b842:	79fb      	ldrb	r3, [r7, #7]
 800b844:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800b846:	79bb      	ldrb	r3, [r7, #6]
 800b848:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800b84a:	797b      	ldrb	r3, [r7, #5]
 800b84c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800b84e:	793b      	ldrb	r3, [r7, #4]
 800b850:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800b852:	f107 030c 	add.w	r3, r7, #12
 800b856:	2204      	movs	r2, #4
 800b858:	4619      	mov	r1, r3
 800b85a:	2095      	movs	r0, #149	; 0x95
 800b85c:	f000 fc64 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b860:	bf00      	nop
 800b862:	3714      	adds	r7, #20
 800b864:	46bd      	mov	sp, r7
 800b866:	bd90      	pop	{r4, r7, pc}

0800b868 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800b868:	b590      	push	{r4, r7, lr}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	4604      	mov	r4, r0
 800b870:	4608      	mov	r0, r1
 800b872:	4611      	mov	r1, r2
 800b874:	461a      	mov	r2, r3
 800b876:	4623      	mov	r3, r4
 800b878:	80fb      	strh	r3, [r7, #6]
 800b87a:	4603      	mov	r3, r0
 800b87c:	80bb      	strh	r3, [r7, #4]
 800b87e:	460b      	mov	r3, r1
 800b880:	807b      	strh	r3, [r7, #2]
 800b882:	4613      	mov	r3, r2
 800b884:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b886:	88fb      	ldrh	r3, [r7, #6]
 800b888:	0a1b      	lsrs	r3, r3, #8
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800b890:	88fb      	ldrh	r3, [r7, #6]
 800b892:	b2db      	uxtb	r3, r3
 800b894:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800b896:	88bb      	ldrh	r3, [r7, #4]
 800b898:	0a1b      	lsrs	r3, r3, #8
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800b8a0:	88bb      	ldrh	r3, [r7, #4]
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800b8a6:	887b      	ldrh	r3, [r7, #2]
 800b8a8:	0a1b      	lsrs	r3, r3, #8
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800b8b0:	887b      	ldrh	r3, [r7, #2]
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800b8b6:	883b      	ldrh	r3, [r7, #0]
 800b8b8:	0a1b      	lsrs	r3, r3, #8
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800b8c0:	883b      	ldrh	r3, [r7, #0]
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800b8c6:	f107 0308 	add.w	r3, r7, #8
 800b8ca:	2208      	movs	r2, #8
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	2008      	movs	r0, #8
 800b8d0:	f000 fc2a 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b8d4:	bf00      	nop
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd90      	pop	{r4, r7, pc}

0800b8dc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	6039      	str	r1, [r7, #0]
 800b8e6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800b8e8:	79fb      	ldrb	r3, [r7, #7]
 800b8ea:	f003 0307 	and.w	r3, r3, #7
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	0c1b      	lsrs	r3, r3, #16
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	0a1b      	lsrs	r3, r3, #8
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	b2db      	uxtb	r3, r3
 800b906:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800b908:	f107 030c 	add.w	r3, r7, #12
 800b90c:	2204      	movs	r2, #4
 800b90e:	4619      	mov	r1, r3
 800b910:	2097      	movs	r0, #151	; 0x97
 800b912:	f000 fc09 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b916:	bf00      	nop
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
	...

0800b920 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800b920:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800b92e:	4b1d      	ldr	r3, [pc, #116]	; (800b9a4 <SUBGRF_SetRfFrequency+0x84>)
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	f083 0301 	eor.w	r3, r3, #1
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d005      	beq.n	800b948 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7ff ff27 	bl	800b790 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800b942:	4b18      	ldr	r3, [pc, #96]	; (800b9a4 <SUBGRF_SetRfFrequency+0x84>)
 800b944:	2201      	movs	r2, #1
 800b946:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	461c      	mov	r4, r3
 800b94e:	4615      	mov	r5, r2
 800b950:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b954:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b958:	4a13      	ldr	r2, [pc, #76]	; (800b9a8 <SUBGRF_SetRfFrequency+0x88>)
 800b95a:	f04f 0300 	mov.w	r3, #0
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f4 fc5d 	bl	8000220 <__aeabi_uldivmod>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	4613      	mov	r3, r2
 800b96c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	0e1b      	lsrs	r3, r3, #24
 800b972:	b2db      	uxtb	r3, r3
 800b974:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	0c1b      	lsrs	r3, r3, #16
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	0a1b      	lsrs	r3, r3, #8
 800b982:	b2db      	uxtb	r3, r3
 800b984:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b98c:	f107 0308 	add.w	r3, r7, #8
 800b990:	2204      	movs	r2, #4
 800b992:	4619      	mov	r1, r3
 800b994:	2086      	movs	r0, #134	; 0x86
 800b996:	f000 fbc7 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b99a:	bf00      	nop
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b9a4:	200007e4 	.word	0x200007e4
 800b9a8:	01e84800 	.word	0x01e84800

0800b9ac <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800b9b6:	79fa      	ldrb	r2, [r7, #7]
 800b9b8:	4b09      	ldr	r3, [pc, #36]	; (800b9e0 <SUBGRF_SetPacketType+0x34>)
 800b9ba:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d104      	bne.n	800b9cc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800b9c8:	f000 fafe 	bl	800bfc8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800b9cc:	1dfb      	adds	r3, r7, #7
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	208a      	movs	r0, #138	; 0x8a
 800b9d4:	f000 fba8 	bl	800c128 <SUBGRF_WriteCommand>
}
 800b9d8:	bf00      	nop
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	200007dd 	.word	0x200007dd

0800b9e4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	af00      	add	r7, sp, #0
    return PacketType;
 800b9e8:	4b02      	ldr	r3, [pc, #8]	; (800b9f4 <SUBGRF_GetPacketType+0x10>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bc80      	pop	{r7}
 800b9f2:	4770      	bx	lr
 800b9f4:	200007dd 	.word	0x200007dd

0800b9f8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	4603      	mov	r3, r0
 800ba00:	71fb      	strb	r3, [r7, #7]
 800ba02:	460b      	mov	r3, r1
 800ba04:	71bb      	strb	r3, [r7, #6]
 800ba06:	4613      	mov	r3, r2
 800ba08:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800ba0a:	79fb      	ldrb	r3, [r7, #7]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d149      	bne.n	800baa4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800ba10:	2000      	movs	r0, #0
 800ba12:	f000 ff2e 	bl	800c872 <RBI_GetRFOMaxPowerConfig>
 800ba16:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800ba18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	da01      	bge.n	800ba26 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b0e      	cmp	r3, #14
 800ba2a:	d10e      	bne.n	800ba4a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	2201      	movs	r2, #1
 800ba30:	2100      	movs	r1, #0
 800ba32:	2004      	movs	r0, #4
 800ba34:	f7ff fef6 	bl	800b824 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800ba38:	79ba      	ldrb	r2, [r7, #6]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	330e      	adds	r3, #14
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	71bb      	strb	r3, [r7, #6]
 800ba48:	e01f      	b.n	800ba8a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b0a      	cmp	r3, #10
 800ba4e:	d10e      	bne.n	800ba6e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800ba50:	2301      	movs	r3, #1
 800ba52:	2201      	movs	r2, #1
 800ba54:	2100      	movs	r1, #0
 800ba56:	2001      	movs	r0, #1
 800ba58:	f7ff fee4 	bl	800b824 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800ba5c:	79ba      	ldrb	r2, [r7, #6]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	330d      	adds	r3, #13
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	71bb      	strb	r3, [r7, #6]
 800ba6c:	e00d      	b.n	800ba8a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800ba6e:	2301      	movs	r3, #1
 800ba70:	2201      	movs	r2, #1
 800ba72:	2100      	movs	r1, #0
 800ba74:	2007      	movs	r0, #7
 800ba76:	f7ff fed5 	bl	800b824 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800ba7a:	79ba      	ldrb	r2, [r7, #6]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	330e      	adds	r3, #14
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800ba8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ba8e:	f113 0f11 	cmn.w	r3, #17
 800ba92:	da01      	bge.n	800ba98 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800ba94:	23ef      	movs	r3, #239	; 0xef
 800ba96:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800ba98:	2118      	movs	r1, #24
 800ba9a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ba9e:	f000 fa93 	bl	800bfc8 <SUBGRF_WriteRegister>
 800baa2:	e067      	b.n	800bb74 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800baa4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800baa8:	f000 faa2 	bl	800bff0 <SUBGRF_ReadRegister>
 800baac:	4603      	mov	r3, r0
 800baae:	f043 031e 	orr.w	r3, r3, #30
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	4619      	mov	r1, r3
 800bab6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800baba:	f000 fa85 	bl	800bfc8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800babe:	2001      	movs	r0, #1
 800bac0:	f000 fed7 	bl	800c872 <RBI_GetRFOMaxPowerConfig>
 800bac4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800bac6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	429a      	cmp	r2, r3
 800bace:	da01      	bge.n	800bad4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b14      	cmp	r3, #20
 800bad8:	d10e      	bne.n	800baf8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800bada:	2301      	movs	r3, #1
 800badc:	2200      	movs	r2, #0
 800bade:	2105      	movs	r1, #5
 800bae0:	2003      	movs	r0, #3
 800bae2:	f7ff fe9f 	bl	800b824 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800bae6:	79ba      	ldrb	r2, [r7, #6]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	b2db      	uxtb	r3, r3
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	3316      	adds	r3, #22
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	71bb      	strb	r3, [r7, #6]
 800baf6:	e031      	b.n	800bb5c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2b11      	cmp	r3, #17
 800bafc:	d10e      	bne.n	800bb1c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800bafe:	2301      	movs	r3, #1
 800bb00:	2200      	movs	r2, #0
 800bb02:	2103      	movs	r1, #3
 800bb04:	2002      	movs	r0, #2
 800bb06:	f7ff fe8d 	bl	800b824 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800bb0a:	79ba      	ldrb	r2, [r7, #6]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	3316      	adds	r3, #22
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	71bb      	strb	r3, [r7, #6]
 800bb1a:	e01f      	b.n	800bb5c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2b0e      	cmp	r3, #14
 800bb20:	d10e      	bne.n	800bb40 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800bb22:	2301      	movs	r3, #1
 800bb24:	2200      	movs	r2, #0
 800bb26:	2102      	movs	r1, #2
 800bb28:	2002      	movs	r0, #2
 800bb2a:	f7ff fe7b 	bl	800b824 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800bb2e:	79ba      	ldrb	r2, [r7, #6]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	330e      	adds	r3, #14
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	71bb      	strb	r3, [r7, #6]
 800bb3e:	e00d      	b.n	800bb5c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800bb40:	2301      	movs	r3, #1
 800bb42:	2200      	movs	r2, #0
 800bb44:	2107      	movs	r1, #7
 800bb46:	2004      	movs	r0, #4
 800bb48:	f7ff fe6c 	bl	800b824 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800bb4c:	79ba      	ldrb	r2, [r7, #6]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	3316      	adds	r3, #22
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800bb5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bb60:	f113 0f09 	cmn.w	r3, #9
 800bb64:	da01      	bge.n	800bb6a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800bb66:	23f7      	movs	r3, #247	; 0xf7
 800bb68:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800bb6a:	2138      	movs	r1, #56	; 0x38
 800bb6c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800bb70:	f000 fa2a 	bl	800bfc8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800bb74:	79bb      	ldrb	r3, [r7, #6]
 800bb76:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800bb78:	797b      	ldrb	r3, [r7, #5]
 800bb7a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800bb7c:	f107 0308 	add.w	r3, r7, #8
 800bb80:	2202      	movs	r2, #2
 800bb82:	4619      	mov	r1, r3
 800bb84:	208e      	movs	r0, #142	; 0x8e
 800bb86:	f000 facf 	bl	800c128 <SUBGRF_WriteCommand>
}
 800bb8a:	bf00      	nop
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
	...

0800bb94 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800bb94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bb98:	b086      	sub	sp, #24
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bba2:	4a61      	ldr	r2, [pc, #388]	; (800bd28 <SUBGRF_SetModulationParams+0x194>)
 800bba4:	f107 0308 	add.w	r3, r7, #8
 800bba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbac:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	781a      	ldrb	r2, [r3, #0]
 800bbb4:	4b5d      	ldr	r3, [pc, #372]	; (800bd2c <SUBGRF_SetModulationParams+0x198>)
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d004      	beq.n	800bbc6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff fef3 	bl	800b9ac <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	f200 80a5 	bhi.w	800bd1a <SUBGRF_SetModulationParams+0x186>
 800bbd0:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <SUBGRF_SetModulationParams+0x44>)
 800bbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd6:	bf00      	nop
 800bbd8:	0800bbe9 	.word	0x0800bbe9
 800bbdc:	0800bca9 	.word	0x0800bca9
 800bbe0:	0800bc6b 	.word	0x0800bc6b
 800bbe4:	0800bcd7 	.word	0x0800bcd7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800bbe8:	2308      	movs	r3, #8
 800bbea:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	4a4f      	ldr	r2, [pc, #316]	; (800bd30 <SUBGRF_SetModulationParams+0x19c>)
 800bbf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbf6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	0c1b      	lsrs	r3, r3, #16
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	0a1b      	lsrs	r3, r3, #8
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	7b1b      	ldrb	r3, [r3, #12]
 800bc12:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7b5b      	ldrb	r3, [r3, #13]
 800bc18:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	461c      	mov	r4, r3
 800bc22:	4615      	mov	r5, r2
 800bc24:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800bc28:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800bc2c:	4a41      	ldr	r2, [pc, #260]	; (800bd34 <SUBGRF_SetModulationParams+0x1a0>)
 800bc2e:	f04f 0300 	mov.w	r3, #0
 800bc32:	4640      	mov	r0, r8
 800bc34:	4649      	mov	r1, r9
 800bc36:	f7f4 faf3 	bl	8000220 <__aeabi_uldivmod>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4613      	mov	r3, r2
 800bc40:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	0c1b      	lsrs	r3, r3, #16
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	0a1b      	lsrs	r3, r3, #8
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bc58:	7cfb      	ldrb	r3, [r7, #19]
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	f107 0308 	add.w	r3, r7, #8
 800bc60:	4619      	mov	r1, r3
 800bc62:	208b      	movs	r0, #139	; 0x8b
 800bc64:	f000 fa60 	bl	800c128 <SUBGRF_WriteCommand>
        break;
 800bc68:	e058      	b.n	800bd1c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800bc6a:	2304      	movs	r3, #4
 800bc6c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	4a2f      	ldr	r2, [pc, #188]	; (800bd30 <SUBGRF_SetModulationParams+0x19c>)
 800bc74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc78:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	0c1b      	lsrs	r3, r3, #16
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	0a1b      	lsrs	r3, r3, #8
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	7d1b      	ldrb	r3, [r3, #20]
 800bc94:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bc96:	7cfb      	ldrb	r3, [r7, #19]
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	f107 0308 	add.w	r3, r7, #8
 800bc9e:	4619      	mov	r1, r3
 800bca0:	208b      	movs	r0, #139	; 0x8b
 800bca2:	f000 fa41 	bl	800c128 <SUBGRF_WriteCommand>
        break;
 800bca6:	e039      	b.n	800bd1c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800bca8:	2304      	movs	r3, #4
 800bcaa:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	7e1b      	ldrb	r3, [r3, #24]
 800bcb0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	7e5b      	ldrb	r3, [r3, #25]
 800bcb6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	7e9b      	ldrb	r3, [r3, #26]
 800bcbc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	7edb      	ldrb	r3, [r3, #27]
 800bcc2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bcc4:	7cfb      	ldrb	r3, [r7, #19]
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	f107 0308 	add.w	r3, r7, #8
 800bccc:	4619      	mov	r1, r3
 800bcce:	208b      	movs	r0, #139	; 0x8b
 800bcd0:	f000 fa2a 	bl	800c128 <SUBGRF_WriteCommand>

        break;
 800bcd4:	e022      	b.n	800bd1c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800bcd6:	2305      	movs	r3, #5
 800bcd8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	4a14      	ldr	r2, [pc, #80]	; (800bd30 <SUBGRF_SetModulationParams+0x19c>)
 800bce0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	0c1b      	lsrs	r3, r3, #16
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	0a1b      	lsrs	r3, r3, #8
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	7b1b      	ldrb	r3, [r3, #12]
 800bd00:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	7b5b      	ldrb	r3, [r3, #13]
 800bd06:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bd08:	7cfb      	ldrb	r3, [r7, #19]
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	f107 0308 	add.w	r3, r7, #8
 800bd10:	4619      	mov	r1, r3
 800bd12:	208b      	movs	r0, #139	; 0x8b
 800bd14:	f000 fa08 	bl	800c128 <SUBGRF_WriteCommand>
        break;
 800bd18:	e000      	b.n	800bd1c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800bd1a:	bf00      	nop
    }
}
 800bd1c:	bf00      	nop
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bd26:	bf00      	nop
 800bd28:	0800dce0 	.word	0x0800dce0
 800bd2c:	200007dd 	.word	0x200007dd
 800bd30:	3d090000 	.word	0x3d090000
 800bd34:	01e84800 	.word	0x01e84800

0800bd38 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b086      	sub	sp, #24
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bd44:	4a48      	ldr	r2, [pc, #288]	; (800be68 <SUBGRF_SetPacketParams+0x130>)
 800bd46:	f107 030c 	add.w	r3, r7, #12
 800bd4a:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd4c:	c303      	stmia	r3!, {r0, r1}
 800bd4e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	781a      	ldrb	r2, [r3, #0]
 800bd54:	4b45      	ldr	r3, [pc, #276]	; (800be6c <SUBGRF_SetPacketParams+0x134>)
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d004      	beq.n	800bd66 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff fe23 	bl	800b9ac <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	2b03      	cmp	r3, #3
 800bd6c:	d878      	bhi.n	800be60 <SUBGRF_SetPacketParams+0x128>
 800bd6e:	a201      	add	r2, pc, #4	; (adr r2, 800bd74 <SUBGRF_SetPacketParams+0x3c>)
 800bd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd74:	0800bd85 	.word	0x0800bd85
 800bd78:	0800be15 	.word	0x0800be15
 800bd7c:	0800be09 	.word	0x0800be09
 800bd80:	0800bd85 	.word	0x0800bd85
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	7a5b      	ldrb	r3, [r3, #9]
 800bd88:	2bf1      	cmp	r3, #241	; 0xf1
 800bd8a:	d10a      	bne.n	800bda2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800bd8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bd90:	f7ff faaa 	bl	800b2e8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800bd94:	f248 0005 	movw	r0, #32773	; 0x8005
 800bd98:	f7ff fac6 	bl	800b328 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	75bb      	strb	r3, [r7, #22]
 800bda0:	e011      	b.n	800bdc6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	7a5b      	ldrb	r3, [r3, #9]
 800bda6:	2bf2      	cmp	r3, #242	; 0xf2
 800bda8:	d10a      	bne.n	800bdc0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800bdaa:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800bdae:	f7ff fa9b 	bl	800b2e8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800bdb2:	f241 0021 	movw	r0, #4129	; 0x1021
 800bdb6:	f7ff fab7 	bl	800b328 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800bdba:	2306      	movs	r3, #6
 800bdbc:	75bb      	strb	r3, [r7, #22]
 800bdbe:	e002      	b.n	800bdc6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	7a5b      	ldrb	r3, [r3, #9]
 800bdc4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800bdc6:	2309      	movs	r3, #9
 800bdc8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	885b      	ldrh	r3, [r3, #2]
 800bdce:	0a1b      	lsrs	r3, r3, #8
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	885b      	ldrh	r3, [r3, #2]
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	791b      	ldrb	r3, [r3, #4]
 800bde2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	795b      	ldrb	r3, [r3, #5]
 800bde8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	799b      	ldrb	r3, [r3, #6]
 800bdee:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	79db      	ldrb	r3, [r3, #7]
 800bdf4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	7a1b      	ldrb	r3, [r3, #8]
 800bdfa:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800bdfc:	7dbb      	ldrb	r3, [r7, #22]
 800bdfe:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	7a9b      	ldrb	r3, [r3, #10]
 800be04:	753b      	strb	r3, [r7, #20]
        break;
 800be06:	e022      	b.n	800be4e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800be08:	2301      	movs	r3, #1
 800be0a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	7b1b      	ldrb	r3, [r3, #12]
 800be10:	733b      	strb	r3, [r7, #12]
        break;
 800be12:	e01c      	b.n	800be4e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800be14:	2306      	movs	r3, #6
 800be16:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	89db      	ldrh	r3, [r3, #14]
 800be1c:	0a1b      	lsrs	r3, r3, #8
 800be1e:	b29b      	uxth	r3, r3
 800be20:	b2db      	uxtb	r3, r3
 800be22:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	89db      	ldrh	r3, [r3, #14]
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	7c1a      	ldrb	r2, [r3, #16]
 800be30:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <SUBGRF_SetPacketParams+0x138>)
 800be32:	4611      	mov	r1, r2
 800be34:	7019      	strb	r1, [r3, #0]
 800be36:	4613      	mov	r3, r2
 800be38:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	7c5b      	ldrb	r3, [r3, #17]
 800be3e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	7c9b      	ldrb	r3, [r3, #18]
 800be44:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	7cdb      	ldrb	r3, [r3, #19]
 800be4a:	747b      	strb	r3, [r7, #17]
        break;
 800be4c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	b29a      	uxth	r2, r3
 800be52:	f107 030c 	add.w	r3, r7, #12
 800be56:	4619      	mov	r1, r3
 800be58:	208c      	movs	r0, #140	; 0x8c
 800be5a:	f000 f965 	bl	800c128 <SUBGRF_WriteCommand>
 800be5e:	e000      	b.n	800be62 <SUBGRF_SetPacketParams+0x12a>
        return;
 800be60:	bf00      	nop
}
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	0800dce8 	.word	0x0800dce8
 800be6c:	200007dd 	.word	0x200007dd
 800be70:	200007de 	.word	0x200007de

0800be74 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	4603      	mov	r3, r0
 800be7c:	460a      	mov	r2, r1
 800be7e:	71fb      	strb	r3, [r7, #7]
 800be80:	4613      	mov	r3, r2
 800be82:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800be88:	79bb      	ldrb	r3, [r7, #6]
 800be8a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800be8c:	f107 030c 	add.w	r3, r7, #12
 800be90:	2202      	movs	r2, #2
 800be92:	4619      	mov	r1, r3
 800be94:	208f      	movs	r0, #143	; 0x8f
 800be96:	f000 f947 	bl	800c128 <SUBGRF_WriteCommand>
}
 800be9a:	bf00      	nop
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b082      	sub	sp, #8
 800bea6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800beac:	1d3b      	adds	r3, r7, #4
 800beae:	2201      	movs	r2, #1
 800beb0:	4619      	mov	r1, r3
 800beb2:	2015      	movs	r0, #21
 800beb4:	f000 f95a 	bl	800c16c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800beb8:	793b      	ldrb	r3, [r7, #4]
 800beba:	425b      	negs	r3, r3
 800bebc:	105b      	asrs	r3, r3, #1
 800bebe:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800bec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800bed6:	f107 030c 	add.w	r3, r7, #12
 800beda:	2202      	movs	r2, #2
 800bedc:	4619      	mov	r1, r3
 800bede:	2013      	movs	r0, #19
 800bee0:	f000 f944 	bl	800c16c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800bee4:	f7ff fd7e 	bl	800b9e4 <SUBGRF_GetPacketType>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b01      	cmp	r3, #1
 800beec:	d10d      	bne.n	800bf0a <SUBGRF_GetRxBufferStatus+0x3e>
 800beee:	4b0c      	ldr	r3, [pc, #48]	; (800bf20 <SUBGRF_GetRxBufferStatus+0x54>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d108      	bne.n	800bf0a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800bef8:	f240 7002 	movw	r0, #1794	; 0x702
 800befc:	f000 f878 	bl	800bff0 <SUBGRF_ReadRegister>
 800bf00:	4603      	mov	r3, r0
 800bf02:	461a      	mov	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	701a      	strb	r2, [r3, #0]
 800bf08:	e002      	b.n	800bf10 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800bf0a:	7b3a      	ldrb	r2, [r7, #12]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800bf10:	7b7a      	ldrb	r2, [r7, #13]
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	701a      	strb	r2, [r3, #0]
}
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	200007de 	.word	0x200007de

0800bf24 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800bf2c:	f107 030c 	add.w	r3, r7, #12
 800bf30:	2203      	movs	r2, #3
 800bf32:	4619      	mov	r1, r3
 800bf34:	2014      	movs	r0, #20
 800bf36:	f000 f919 	bl	800c16c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800bf3a:	f7ff fd53 	bl	800b9e4 <SUBGRF_GetPacketType>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	461a      	mov	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d002      	beq.n	800bf54 <SUBGRF_GetPacketStatus+0x30>
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d013      	beq.n	800bf7a <SUBGRF_GetPacketStatus+0x56>
 800bf52:	e02a      	b.n	800bfaa <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800bf54:	7b3a      	ldrb	r2, [r7, #12]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800bf5a:	7b7b      	ldrb	r3, [r7, #13]
 800bf5c:	425b      	negs	r3, r3
 800bf5e:	105b      	asrs	r3, r3, #1
 800bf60:	b25a      	sxtb	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800bf66:	7bbb      	ldrb	r3, [r7, #14]
 800bf68:	425b      	negs	r3, r3
 800bf6a:	105b      	asrs	r3, r3, #1
 800bf6c:	b25a      	sxtb	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	609a      	str	r2, [r3, #8]
            break;
 800bf78:	e020      	b.n	800bfbc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800bf7a:	7b3b      	ldrb	r3, [r7, #12]
 800bf7c:	425b      	negs	r3, r3
 800bf7e:	105b      	asrs	r3, r3, #1
 800bf80:	b25a      	sxtb	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800bf86:	7b7b      	ldrb	r3, [r7, #13]
 800bf88:	b25b      	sxtb	r3, r3
 800bf8a:	3302      	adds	r3, #2
 800bf8c:	109b      	asrs	r3, r3, #2
 800bf8e:	b25a      	sxtb	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800bf94:	7bbb      	ldrb	r3, [r7, #14]
 800bf96:	425b      	negs	r3, r3
 800bf98:	105b      	asrs	r3, r3, #1
 800bf9a:	b25a      	sxtb	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800bfa0:	4b08      	ldr	r3, [pc, #32]	; (800bfc4 <SUBGRF_GetPacketStatus+0xa0>)
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	611a      	str	r2, [r3, #16]
            break;
 800bfa8:	e008      	b.n	800bfbc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800bfaa:	2214      	movs	r2, #20
 800bfac:	2100      	movs	r1, #0
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fc93 	bl	800c8da <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	220f      	movs	r2, #15
 800bfb8:	701a      	strb	r2, [r3, #0]
            break;
 800bfba:	bf00      	nop
    }
}
 800bfbc:	bf00      	nop
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	200007e0 	.word	0x200007e0

0800bfc8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	4603      	mov	r3, r0
 800bfd0:	460a      	mov	r2, r1
 800bfd2:	80fb      	strh	r3, [r7, #6]
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800bfd8:	1d7a      	adds	r2, r7, #5
 800bfda:	88f9      	ldrh	r1, [r7, #6]
 800bfdc:	2301      	movs	r3, #1
 800bfde:	4803      	ldr	r0, [pc, #12]	; (800bfec <SUBGRF_WriteRegister+0x24>)
 800bfe0:	f7fa fdaa 	bl	8006b38 <HAL_SUBGHZ_WriteRegisters>
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	20000528 	.word	0x20000528

0800bff0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	4603      	mov	r3, r0
 800bff8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800bffa:	f107 020f 	add.w	r2, r7, #15
 800bffe:	88f9      	ldrh	r1, [r7, #6]
 800c000:	2301      	movs	r3, #1
 800c002:	4804      	ldr	r0, [pc, #16]	; (800c014 <SUBGRF_ReadRegister+0x24>)
 800c004:	f7fa fdf7 	bl	8006bf6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800c008:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	20000528 	.word	0x20000528

0800c018 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	6039      	str	r1, [r7, #0]
 800c022:	80fb      	strh	r3, [r7, #6]
 800c024:	4613      	mov	r3, r2
 800c026:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c028:	f3ef 8310 	mrs	r3, PRIMASK
 800c02c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c02e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c030:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c032:	b672      	cpsid	i
}
 800c034:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800c036:	88bb      	ldrh	r3, [r7, #4]
 800c038:	88f9      	ldrh	r1, [r7, #6]
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	4806      	ldr	r0, [pc, #24]	; (800c058 <SUBGRF_WriteRegisters+0x40>)
 800c03e:	f7fa fd7b 	bl	8006b38 <HAL_SUBGHZ_WriteRegisters>
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	f383 8810 	msr	PRIMASK, r3
}
 800c04c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c04e:	bf00      	nop
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	20000528 	.word	0x20000528

0800c05c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	4603      	mov	r3, r0
 800c064:	6039      	str	r1, [r7, #0]
 800c066:	80fb      	strh	r3, [r7, #6]
 800c068:	4613      	mov	r3, r2
 800c06a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c06c:	f3ef 8310 	mrs	r3, PRIMASK
 800c070:	60fb      	str	r3, [r7, #12]
  return(result);
 800c072:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c074:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c076:	b672      	cpsid	i
}
 800c078:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800c07a:	88bb      	ldrh	r3, [r7, #4]
 800c07c:	88f9      	ldrh	r1, [r7, #6]
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	4806      	ldr	r0, [pc, #24]	; (800c09c <SUBGRF_ReadRegisters+0x40>)
 800c082:	f7fa fdb8 	bl	8006bf6 <HAL_SUBGHZ_ReadRegisters>
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	f383 8810 	msr	PRIMASK, r3
}
 800c090:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c092:	bf00      	nop
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	20000528 	.word	0x20000528

0800c0a0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	6039      	str	r1, [r7, #0]
 800c0aa:	71fb      	strb	r3, [r7, #7]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0b0:	f3ef 8310 	mrs	r3, PRIMASK
 800c0b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c0b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0ba:	b672      	cpsid	i
}
 800c0bc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800c0be:	79bb      	ldrb	r3, [r7, #6]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	79f9      	ldrb	r1, [r7, #7]
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	4806      	ldr	r0, [pc, #24]	; (800c0e0 <SUBGRF_WriteBuffer+0x40>)
 800c0c8:	f7fa fea9 	bl	8006e1e <HAL_SUBGHZ_WriteBuffer>
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	f383 8810 	msr	PRIMASK, r3
}
 800c0d6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c0d8:	bf00      	nop
 800c0da:	3718      	adds	r7, #24
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	20000528 	.word	0x20000528

0800c0e4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	6039      	str	r1, [r7, #0]
 800c0ee:	71fb      	strb	r3, [r7, #7]
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0f4:	f3ef 8310 	mrs	r3, PRIMASK
 800c0f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c0fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0fe:	b672      	cpsid	i
}
 800c100:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800c102:	79bb      	ldrb	r3, [r7, #6]
 800c104:	b29b      	uxth	r3, r3
 800c106:	79f9      	ldrb	r1, [r7, #7]
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	4806      	ldr	r0, [pc, #24]	; (800c124 <SUBGRF_ReadBuffer+0x40>)
 800c10c:	f7fa feda 	bl	8006ec4 <HAL_SUBGHZ_ReadBuffer>
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	f383 8810 	msr	PRIMASK, r3
}
 800c11a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c11c:	bf00      	nop
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	20000528 	.word	0x20000528

0800c128 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	4603      	mov	r3, r0
 800c130:	6039      	str	r1, [r7, #0]
 800c132:	71fb      	strb	r3, [r7, #7]
 800c134:	4613      	mov	r3, r2
 800c136:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c138:	f3ef 8310 	mrs	r3, PRIMASK
 800c13c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c13e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c140:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c142:	b672      	cpsid	i
}
 800c144:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800c146:	88bb      	ldrh	r3, [r7, #4]
 800c148:	79f9      	ldrb	r1, [r7, #7]
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	4806      	ldr	r0, [pc, #24]	; (800c168 <SUBGRF_WriteCommand+0x40>)
 800c14e:	f7fa fdb3 	bl	8006cb8 <HAL_SUBGHZ_ExecSetCmd>
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	f383 8810 	msr	PRIMASK, r3
}
 800c15c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c15e:	bf00      	nop
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20000528 	.word	0x20000528

0800c16c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	6039      	str	r1, [r7, #0]
 800c176:	71fb      	strb	r3, [r7, #7]
 800c178:	4613      	mov	r3, r2
 800c17a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c17c:	f3ef 8310 	mrs	r3, PRIMASK
 800c180:	60fb      	str	r3, [r7, #12]
  return(result);
 800c182:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c186:	b672      	cpsid	i
}
 800c188:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800c18a:	88bb      	ldrh	r3, [r7, #4]
 800c18c:	79f9      	ldrb	r1, [r7, #7]
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	4806      	ldr	r0, [pc, #24]	; (800c1ac <SUBGRF_ReadCommand+0x40>)
 800c192:	f7fa fdf0 	bl	8006d76 <HAL_SUBGHZ_ExecGetCmd>
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	f383 8810 	msr	PRIMASK, r3
}
 800c1a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c1a2:	bf00      	nop
 800c1a4:	3718      	adds	r7, #24
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20000528 	.word	0x20000528

0800c1b0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	460a      	mov	r2, r1
 800c1ba:	71fb      	strb	r3, [r7, #7]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800c1c4:	79bb      	ldrb	r3, [r7, #6]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d10d      	bne.n	800c1e6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800c1ca:	79fb      	ldrb	r3, [r7, #7]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d104      	bne.n	800c1da <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800c1d4:	2004      	movs	r0, #4
 800c1d6:	f000 f8ef 	bl	800c3b8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800c1da:	79fb      	ldrb	r3, [r7, #7]
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	d107      	bne.n	800c1f0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	73fb      	strb	r3, [r7, #15]
 800c1e4:	e004      	b.n	800c1f0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800c1e6:	79bb      	ldrb	r3, [r7, #6]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800c1f0:	7bfb      	ldrb	r3, [r7, #15]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f000 fad2 	bl	800c79c <RBI_ConfigRFSwitch>
}
 800c1f8:	bf00      	nop
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800c20a:	2301      	movs	r3, #1
 800c20c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800c20e:	f000 fb0f 	bl	800c830 <RBI_GetTxConfig>
 800c212:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2b02      	cmp	r3, #2
 800c218:	d016      	beq.n	800c248 <SUBGRF_SetRfTxPower+0x48>
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	dc16      	bgt.n	800c24e <SUBGRF_SetRfTxPower+0x4e>
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d003      	beq.n	800c22e <SUBGRF_SetRfTxPower+0x2e>
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d00a      	beq.n	800c242 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800c22c:	e00f      	b.n	800c24e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800c22e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c232:	2b0f      	cmp	r3, #15
 800c234:	dd02      	ble.n	800c23c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800c236:	2302      	movs	r3, #2
 800c238:	73fb      	strb	r3, [r7, #15]
            break;
 800c23a:	e009      	b.n	800c250 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800c23c:	2301      	movs	r3, #1
 800c23e:	73fb      	strb	r3, [r7, #15]
            break;
 800c240:	e006      	b.n	800c250 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800c242:	2301      	movs	r3, #1
 800c244:	73fb      	strb	r3, [r7, #15]
            break;
 800c246:	e003      	b.n	800c250 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800c248:	2302      	movs	r3, #2
 800c24a:	73fb      	strb	r3, [r7, #15]
            break;
 800c24c:	e000      	b.n	800c250 <SUBGRF_SetRfTxPower+0x50>
            break;
 800c24e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800c250:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800c254:	7bfb      	ldrb	r3, [r7, #15]
 800c256:	2202      	movs	r2, #2
 800c258:	4618      	mov	r0, r3
 800c25a:	f7ff fbcd 	bl	800b9f8 <SUBGRF_SetTxParams>

    return paSelect;
 800c25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800c268:	b480      	push	{r7}
 800c26a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800c26c:	2301      	movs	r3, #1
}
 800c26e:	4618      	mov	r0, r3
 800c270:	46bd      	mov	sp, r7
 800c272:	bc80      	pop	{r7}
 800c274:	4770      	bx	lr
	...

0800c278 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800c280:	4b03      	ldr	r3, [pc, #12]	; (800c290 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2001      	movs	r0, #1
 800c286:	4798      	blx	r3
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	200007e8 	.word	0x200007e8

0800c294 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800c29c:	4b03      	ldr	r3, [pc, #12]	; (800c2ac <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2002      	movs	r0, #2
 800c2a2:	4798      	blx	r3
}
 800c2a4:	bf00      	nop
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	200007e8 	.word	0x200007e8

0800c2b0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800c2b8:	4b03      	ldr	r3, [pc, #12]	; (800c2c8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2040      	movs	r0, #64	; 0x40
 800c2be:	4798      	blx	r3
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	200007e8 	.word	0x200007e8

0800c2cc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800c2d8:	78fb      	ldrb	r3, [r7, #3]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d002      	beq.n	800c2e4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d005      	beq.n	800c2ee <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800c2e2:	e00a      	b.n	800c2fa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800c2e4:	4b07      	ldr	r3, [pc, #28]	; (800c304 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2080      	movs	r0, #128	; 0x80
 800c2ea:	4798      	blx	r3
            break;
 800c2ec:	e005      	b.n	800c2fa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800c2ee:	4b05      	ldr	r3, [pc, #20]	; (800c304 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c2f6:	4798      	blx	r3
            break;
 800c2f8:	bf00      	nop
    }
}
 800c2fa:	bf00      	nop
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	200007e8 	.word	0x200007e8

0800c308 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800c310:	4b04      	ldr	r3, [pc, #16]	; (800c324 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c318:	4798      	blx	r3
}
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	200007e8 	.word	0x200007e8

0800c328 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800c330:	4b03      	ldr	r3, [pc, #12]	; (800c340 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2020      	movs	r0, #32
 800c336:	4798      	blx	r3
}
 800c338:	bf00      	nop
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	200007e8 	.word	0x200007e8

0800c344 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800c34c:	4b03      	ldr	r3, [pc, #12]	; (800c35c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2004      	movs	r0, #4
 800c352:	4798      	blx	r3
}
 800c354:	bf00      	nop
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	200007e8 	.word	0x200007e8

0800c360 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800c368:	4b03      	ldr	r3, [pc, #12]	; (800c378 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2008      	movs	r0, #8
 800c36e:	4798      	blx	r3
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	200007e8 	.word	0x200007e8

0800c37c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800c384:	4b03      	ldr	r3, [pc, #12]	; (800c394 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2010      	movs	r0, #16
 800c38a:	4798      	blx	r3
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	200007e8 	.word	0x200007e8

0800c398 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800c3a0:	4b04      	ldr	r3, [pc, #16]	; (800c3b4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c3a8:	4798      	blx	r3
}
 800c3aa:	bf00      	nop
 800c3ac:	3708      	adds	r7, #8
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	200007e8 	.word	0x200007e8

0800c3b8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800c3c2:	f000 fa4b 	bl	800c85c <RBI_IsDCDC>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d112      	bne.n	800c3f2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800c3cc:	f640 1023 	movw	r0, #2339	; 0x923
 800c3d0:	f7ff fe0e 	bl	800bff0 <SUBGRF_ReadRegister>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800c3d8:	7bfb      	ldrb	r3, [r7, #15]
 800c3da:	f023 0306 	bic.w	r3, r3, #6
 800c3de:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800c3e0:	7bfa      	ldrb	r2, [r7, #15]
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	f640 1023 	movw	r0, #2339	; 0x923
 800c3ee:	f7ff fdeb 	bl	800bfc8 <SUBGRF_WriteRegister>
  }
}
 800c3f2:	bf00      	nop
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d101      	bne.n	800c40e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800c40a:	231f      	movs	r3, #31
 800c40c:	e016      	b.n	800c43c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c40e:	2300      	movs	r3, #0
 800c410:	73fb      	strb	r3, [r7, #15]
 800c412:	e00f      	b.n	800c434 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	4a0c      	ldr	r2, [pc, #48]	; (800c448 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800c418:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d205      	bcs.n	800c42e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	4a08      	ldr	r2, [pc, #32]	; (800c448 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	4413      	add	r3, r2
 800c42a:	791b      	ldrb	r3, [r3, #4]
 800c42c:	e006      	b.n	800c43c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	3301      	adds	r3, #1
 800c432:	73fb      	strb	r3, [r7, #15]
 800c434:	7bfb      	ldrb	r3, [r7, #15]
 800c436:	2b15      	cmp	r3, #21
 800c438:	d9ec      	bls.n	800c414 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800c43a:	e7fe      	b.n	800c43a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	bc80      	pop	{r7}
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	0800de78 	.word	0x0800de78

0800c44c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b08a      	sub	sp, #40	; 0x28
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800c456:	4b35      	ldr	r3, [pc, #212]	; (800c52c <SUBGRF_GetCFO+0xe0>)
 800c458:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800c45a:	f640 0007 	movw	r0, #2055	; 0x807
 800c45e:	f7ff fdc7 	bl	800bff0 <SUBGRF_ReadRegister>
 800c462:	4603      	mov	r3, r0
 800c464:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800c466:	7ffb      	ldrb	r3, [r7, #31]
 800c468:	08db      	lsrs	r3, r3, #3
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	f003 0303 	and.w	r3, r3, #3
 800c470:	3328      	adds	r3, #40	; 0x28
 800c472:	443b      	add	r3, r7
 800c474:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800c478:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800c47a:	7ffb      	ldrb	r3, [r7, #31]
 800c47c:	f003 0307 	and.w	r3, r3, #7
 800c480:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800c482:	7fba      	ldrb	r2, [r7, #30]
 800c484:	7f7b      	ldrb	r3, [r7, #29]
 800c486:	3301      	adds	r3, #1
 800c488:	fa02 f303 	lsl.w	r3, r2, r3
 800c48c:	461a      	mov	r2, r3
 800c48e:	4b28      	ldr	r3, [pc, #160]	; (800c530 <SUBGRF_GetCFO+0xe4>)
 800c490:	fbb3 f3f2 	udiv	r3, r3, r2
 800c494:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800c496:	69ba      	ldr	r2, [r7, #24]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c49e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800c4a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4aa:	697a      	ldr	r2, [r7, #20]
 800c4ac:	fb02 f303 	mul.w	r3, r2, r3
 800c4b0:	2b07      	cmp	r3, #7
 800c4b2:	d802      	bhi.n	800c4ba <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800c4ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	fb02 f303 	mul.w	r3, r2, r3
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	d802      	bhi.n	800c4ce <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800c4ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	fb02 f303 	mul.w	r3, r2, r3
 800c4d8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800c4da:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800c4de:	f7ff fd87 	bl	800bff0 <SUBGRF_ReadRegister>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	021b      	lsls	r3, r3, #8
 800c4e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c4ea:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800c4ec:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800c4f0:	f7ff fd7e 	bl	800bff0 <SUBGRF_ReadRegister>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c504:	2b00      	cmp	r3, #0
 800c506:	d005      	beq.n	800c514 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800c508:	6a3b      	ldr	r3, [r7, #32]
 800c50a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800c50e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800c512:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	095b      	lsrs	r3, r3, #5
 800c518:	6a3a      	ldr	r2, [r7, #32]
 800c51a:	fb02 f303 	mul.w	r3, r2, r3
 800c51e:	11da      	asrs	r2, r3, #7
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	601a      	str	r2, [r3, #0]
}
 800c524:	bf00      	nop
 800c526:	3728      	adds	r7, #40	; 0x28
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	0c0a0804 	.word	0x0c0a0804
 800c530:	01e84800 	.word	0x01e84800

0800c534 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800c534:	b480      	push	{r7}
 800c536:	b087      	sub	sp, #28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	4603      	mov	r3, r0
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800c546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c54a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800c54c:	697b      	ldr	r3, [r7, #20]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	371c      	adds	r7, #28
 800c552:	46bd      	mov	sp, r7
 800c554:	bc80      	pop	{r7}
 800c556:	4770      	bx	lr

0800c558 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800c558:	b480      	push	{r7}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800c566:	2300      	movs	r3, #0
 800c568:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800c56a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c56e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800c570:	697b      	ldr	r3, [r7, #20]
}
 800c572:	4618      	mov	r0, r3
 800c574:	371c      	adds	r7, #28
 800c576:	46bd      	mov	sp, r7
 800c578:	bc80      	pop	{r7}
 800c57a:	4770      	bx	lr

0800c57c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800c588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	bc80      	pop	{r7}
 800c594:	4770      	bx	lr

0800c596 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800c596:	b480      	push	{r7}
 800c598:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800c59a:	bf00      	nop
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bc80      	pop	{r7}
 800c5a0:	4770      	bx	lr

0800c5a2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800c5a6:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bc80      	pop	{r7}
 800c5ae:	4770      	bx	lr

0800c5b0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800c5b4:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bc80      	pop	{r7}
 800c5bc:	4770      	bx	lr

0800c5be <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800c5be:	b480      	push	{r7}
 800c5c0:	b083      	sub	sp, #12
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800c5c8:	bf00      	nop
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bc80      	pop	{r7}
 800c5d0:	4770      	bx	lr

0800c5d2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b087      	sub	sp, #28
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	60f8      	str	r0, [r7, #12]
 800c5da:	460b      	mov	r3, r1
 800c5dc:	607a      	str	r2, [r7, #4]
 800c5de:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800c5e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5e4:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800c5e6:	697b      	ldr	r3, [r7, #20]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	371c      	adds	r7, #28
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bc80      	pop	{r7}
 800c5f0:	4770      	bx	lr

0800c5f2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800c5f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bc80      	pop	{r7}
 800c600:	4770      	bx	lr

0800c602 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800c602:	b480      	push	{r7}
 800c604:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800c606:	bf00      	nop
 800c608:	46bd      	mov	sp, r7
 800c60a:	bc80      	pop	{r7}
 800c60c:	4770      	bx	lr

0800c60e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800c60e:	b480      	push	{r7}
 800c610:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800c612:	bf00      	nop
 800c614:	46bd      	mov	sp, r7
 800c616:	bc80      	pop	{r7}
 800c618:	4770      	bx	lr

0800c61a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800c61a:	b480      	push	{r7}
 800c61c:	b083      	sub	sp, #12
 800c61e:	af00      	add	r7, sp, #0
 800c620:	4603      	mov	r3, r0
 800c622:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	bc80      	pop	{r7}
 800c62c:	4770      	bx	lr

0800c62e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800c632:	f7f5 fefd 	bl	8002430 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800c636:	f000 f809 	bl	800c64c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800c63a:	bf00      	nop
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800c63e:	b480      	push	{r7}
 800c640:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800c642:	bf00      	nop
 800c644:	46bd      	mov	sp, r7
 800c646:	bc80      	pop	{r7}
 800c648:	4770      	bx	lr
	...

0800c64c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800c650:	4b0a      	ldr	r3, [pc, #40]	; (800c67c <SubghzApp_Init+0x30>)
 800c652:	4a0b      	ldr	r2, [pc, #44]	; (800c680 <SubghzApp_Init+0x34>)
 800c654:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800c656:	4b09      	ldr	r3, [pc, #36]	; (800c67c <SubghzApp_Init+0x30>)
 800c658:	4a0a      	ldr	r2, [pc, #40]	; (800c684 <SubghzApp_Init+0x38>)
 800c65a:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800c65c:	4b07      	ldr	r3, [pc, #28]	; (800c67c <SubghzApp_Init+0x30>)
 800c65e:	4a0a      	ldr	r2, [pc, #40]	; (800c688 <SubghzApp_Init+0x3c>)
 800c660:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800c662:	4b06      	ldr	r3, [pc, #24]	; (800c67c <SubghzApp_Init+0x30>)
 800c664:	4a09      	ldr	r2, [pc, #36]	; (800c68c <SubghzApp_Init+0x40>)
 800c666:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800c668:	4b04      	ldr	r3, [pc, #16]	; (800c67c <SubghzApp_Init+0x30>)
 800c66a:	4a09      	ldr	r2, [pc, #36]	; (800c690 <SubghzApp_Init+0x44>)
 800c66c:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800c66e:	4b09      	ldr	r3, [pc, #36]	; (800c694 <SubghzApp_Init+0x48>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4802      	ldr	r0, [pc, #8]	; (800c67c <SubghzApp_Init+0x30>)
 800c674:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800c676:	bf00      	nop
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	200007ec 	.word	0x200007ec
 800c680:	0800c699 	.word	0x0800c699
 800c684:	0800c6a5 	.word	0x0800c6a5
 800c688:	0800c6c9 	.word	0x0800c6c9
 800c68c:	0800c6d5 	.word	0x0800c6d5
 800c690:	0800c6e1 	.word	0x0800c6e1
 800c694:	0800dde8 	.word	0x0800dde8

0800c698 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800c698:	b480      	push	{r7}
 800c69a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800c69c:	bf00      	nop
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bc80      	pop	{r7}
 800c6a2:	4770      	bx	lr

0800c6a4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	4608      	mov	r0, r1
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	817b      	strh	r3, [r7, #10]
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	813b      	strh	r3, [r7, #8]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800c6be:	bf00      	nop
 800c6c0:	3714      	adds	r7, #20
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bc80      	pop	{r7}
 800c6c6:	4770      	bx	lr

0800c6c8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800c6cc:	bf00      	nop
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bc80      	pop	{r7}
 800c6d2:	4770      	bx	lr

0800c6d4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800c6d8:	bf00      	nop
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bc80      	pop	{r7}
 800c6de:	4770      	bx	lr

0800c6e0 <OnRxError>:

static void OnRxError(void)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800c6e4:	bf00      	nop
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bc80      	pop	{r7}
 800c6ea:	4770      	bx	lr

0800c6ec <LL_AHB2_GRP1_EnableClock>:
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800c6f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4313      	orrs	r3, r2
 800c702:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800c704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4013      	ands	r3, r2
 800c70e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c710:	68fb      	ldr	r3, [r7, #12]
}
 800c712:	bf00      	nop
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	bc80      	pop	{r7}
 800c71a:	4770      	bx	lr

0800c71c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800c722:	2300      	movs	r3, #0
 800c724:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800c726:	463b      	mov	r3, r7
 800c728:	2200      	movs	r2, #0
 800c72a:	601a      	str	r2, [r3, #0]
 800c72c:	605a      	str	r2, [r3, #4]
 800c72e:	609a      	str	r2, [r3, #8]
 800c730:	60da      	str	r2, [r3, #12]
 800c732:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800c734:	2004      	movs	r0, #4
 800c736:	f7ff ffd9 	bl	800c6ec <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800c73a:	2310      	movs	r3, #16
 800c73c:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800c73e:	2301      	movs	r3, #1
 800c740:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800c742:	2300      	movs	r3, #0
 800c744:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c746:	2303      	movs	r3, #3
 800c748:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800c74a:	463b      	mov	r3, r7
 800c74c:	4619      	mov	r1, r3
 800c74e:	4812      	ldr	r0, [pc, #72]	; (800c798 <RBI_Init+0x7c>)
 800c750:	f7f7 f83a 	bl	80037c8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800c754:	2320      	movs	r3, #32
 800c756:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800c758:	463b      	mov	r3, r7
 800c75a:	4619      	mov	r1, r3
 800c75c:	480e      	ldr	r0, [pc, #56]	; (800c798 <RBI_Init+0x7c>)
 800c75e:	f7f7 f833 	bl	80037c8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800c762:	2308      	movs	r3, #8
 800c764:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800c766:	463b      	mov	r3, r7
 800c768:	4619      	mov	r1, r3
 800c76a:	480b      	ldr	r0, [pc, #44]	; (800c798 <RBI_Init+0x7c>)
 800c76c:	f7f7 f82c 	bl	80037c8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800c770:	2200      	movs	r2, #0
 800c772:	2120      	movs	r1, #32
 800c774:	4808      	ldr	r0, [pc, #32]	; (800c798 <RBI_Init+0x7c>)
 800c776:	f7f7 f987 	bl	8003a88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800c77a:	2200      	movs	r2, #0
 800c77c:	2110      	movs	r1, #16
 800c77e:	4806      	ldr	r0, [pc, #24]	; (800c798 <RBI_Init+0x7c>)
 800c780:	f7f7 f982 	bl	8003a88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800c784:	2200      	movs	r2, #0
 800c786:	2108      	movs	r1, #8
 800c788:	4803      	ldr	r0, [pc, #12]	; (800c798 <RBI_Init+0x7c>)
 800c78a:	f7f7 f97d 	bl	8003a88 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800c78e:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800c790:	4618      	mov	r0, r3
 800c792:	3718      	adds	r7, #24
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	48000800 	.word	0x48000800

0800c79c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */

	switch (Config) {
 800c7aa:	79fb      	ldrb	r3, [r7, #7]
 800c7ac:	2b03      	cmp	r3, #3
 800c7ae:	d837      	bhi.n	800c820 <RBI_ConfigRFSwitch+0x84>
 800c7b0:	a201      	add	r2, pc, #4	; (adr r2, 800c7b8 <RBI_ConfigRFSwitch+0x1c>)
 800c7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b6:	bf00      	nop
 800c7b8:	0800c7c9 	.word	0x0800c7c9
 800c7bc:	0800c7df 	.word	0x0800c7df
 800c7c0:	0800c7f5 	.word	0x0800c7f5
 800c7c4:	0800c80b 	.word	0x0800c80b
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
		//				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	2110      	movs	r1, #16
 800c7cc:	4817      	ldr	r0, [pc, #92]	; (800c82c <RBI_ConfigRFSwitch+0x90>)
 800c7ce:	f7f7 f95b 	bl	8003a88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	2120      	movs	r1, #32
 800c7d6:	4815      	ldr	r0, [pc, #84]	; (800c82c <RBI_ConfigRFSwitch+0x90>)
 800c7d8:	f7f7 f956 	bl	8003a88 <HAL_GPIO_WritePin>
		break;
 800c7dc:	e021      	b.n	800c822 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800c7de:	2200      	movs	r2, #0
 800c7e0:	2110      	movs	r1, #16
 800c7e2:	4812      	ldr	r0, [pc, #72]	; (800c82c <RBI_ConfigRFSwitch+0x90>)
 800c7e4:	f7f7 f950 	bl	8003a88 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	2120      	movs	r1, #32
 800c7ec:	480f      	ldr	r0, [pc, #60]	; (800c82c <RBI_ConfigRFSwitch+0x90>)
 800c7ee:	f7f7 f94b 	bl	8003a88 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800c7f2:	e016      	b.n	800c822 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	2110      	movs	r1, #16
 800c7f8:	480c      	ldr	r0, [pc, #48]	; (800c82c <RBI_ConfigRFSwitch+0x90>)
 800c7fa:	f7f7 f945 	bl	8003a88 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800c7fe:	2201      	movs	r2, #1
 800c800:	2120      	movs	r1, #32
 800c802:	480a      	ldr	r0, [pc, #40]	; (800c82c <RBI_ConfigRFSwitch+0x90>)
 800c804:	f7f7 f940 	bl	8003a88 <HAL_GPIO_WritePin>
		break;
 800c808:	e00b      	b.n	800c822 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800c80a:	2200      	movs	r2, #0
 800c80c:	2110      	movs	r1, #16
 800c80e:	4807      	ldr	r0, [pc, #28]	; (800c82c <RBI_ConfigRFSwitch+0x90>)
 800c810:	f7f7 f93a 	bl	8003a88 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800c814:	2201      	movs	r2, #1
 800c816:	2120      	movs	r1, #32
 800c818:	4804      	ldr	r0, [pc, #16]	; (800c82c <RBI_ConfigRFSwitch+0x90>)
 800c81a:	f7f7 f935 	bl	8003a88 <HAL_GPIO_WritePin>
		break;
 800c81e:	e000      	b.n	800c822 <RBI_ConfigRFSwitch+0x86>
	}
	default:
		break;
 800c820:	bf00      	nop
//	}
//	default:
//		break;
//	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800c822:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	48000800 	.word	0x48000800

0800c830 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800c836:	2300      	movs	r3, #0
 800c838:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800c83a:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	bc80      	pop	{r7}
 800c844:	4770      	bx	lr

0800c846 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c846:	b480      	push	{r7}
 800c848:	b083      	sub	sp, #12
 800c84a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800c84c:	2301      	movs	r3, #1
 800c84e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800c850:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c852:	4618      	mov	r0, r3
 800c854:	370c      	adds	r7, #12
 800c856:	46bd      	mov	sp, r7
 800c858:	bc80      	pop	{r7}
 800c85a:	4770      	bx	lr

0800c85c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800c862:	2301      	movs	r3, #1
 800c864:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800c866:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c868:	4618      	mov	r0, r3
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bc80      	pop	{r7}
 800c870:	4770      	bx	lr

0800c872 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c872:	b480      	push	{r7}
 800c874:	b085      	sub	sp, #20
 800c876:	af00      	add	r7, sp, #0
 800c878:	4603      	mov	r3, r0
 800c87a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800c880:	79fb      	ldrb	r3, [r7, #7]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d102      	bne.n	800c88c <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800c886:	230f      	movs	r3, #15
 800c888:	60fb      	str	r3, [r7, #12]
 800c88a:	e001      	b.n	800c890 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800c88c:	2316      	movs	r3, #22
 800c88e:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800c890:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800c892:	4618      	mov	r0, r3
 800c894:	3714      	adds	r7, #20
 800c896:	46bd      	mov	sp, r7
 800c898:	bc80      	pop	{r7}
 800c89a:	4770      	bx	lr

0800c89c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800c89c:	b480      	push	{r7}
 800c89e:	b087      	sub	sp, #28
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	613b      	str	r3, [r7, #16]

  while( size-- )
 800c8b2:	e007      	b.n	800c8c4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800c8b4:	693a      	ldr	r2, [r7, #16]
 800c8b6:	1c53      	adds	r3, r2, #1
 800c8b8:	613b      	str	r3, [r7, #16]
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	1c59      	adds	r1, r3, #1
 800c8be:	6179      	str	r1, [r7, #20]
 800c8c0:	7812      	ldrb	r2, [r2, #0]
 800c8c2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c8c4:	88fb      	ldrh	r3, [r7, #6]
 800c8c6:	1e5a      	subs	r2, r3, #1
 800c8c8:	80fa      	strh	r2, [r7, #6]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1f2      	bne.n	800c8b4 <UTIL_MEM_cpy_8+0x18>
    }
}
 800c8ce:	bf00      	nop
 800c8d0:	bf00      	nop
 800c8d2:	371c      	adds	r7, #28
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bc80      	pop	{r7}
 800c8d8:	4770      	bx	lr

0800c8da <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b085      	sub	sp, #20
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	70fb      	strb	r3, [r7, #3]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800c8ee:	e004      	b.n	800c8fa <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	60fa      	str	r2, [r7, #12]
 800c8f6:	78fa      	ldrb	r2, [r7, #3]
 800c8f8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c8fa:	883b      	ldrh	r3, [r7, #0]
 800c8fc:	1e5a      	subs	r2, r3, #1
 800c8fe:	803a      	strh	r2, [r7, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1f5      	bne.n	800c8f0 <UTIL_MEM_set_8+0x16>
  }
}
 800c904:	bf00      	nop
 800c906:	bf00      	nop
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bc80      	pop	{r7}
 800c90e:	4770      	bx	lr

0800c910 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	603b      	str	r3, [r7, #0]
 800c91c:	4613      	mov	r3, r2
 800c91e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d023      	beq.n	800c96e <UTIL_TIMER_Create+0x5e>
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d020      	beq.n	800c96e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c932:	4b11      	ldr	r3, [pc, #68]	; (800c978 <UTIL_TIMER_Create+0x68>)
 800c934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c936:	68b8      	ldr	r0, [r7, #8]
 800c938:	4798      	blx	r3
 800c93a:	4602      	mov	r2, r0
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2200      	movs	r2, #0
 800c94a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	683a      	ldr	r2, [r7, #0]
 800c956:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	69ba      	ldr	r2, [r7, #24]
 800c95c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	79fa      	ldrb	r2, [r7, #7]
 800c962:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800c96a:	2300      	movs	r3, #0
 800c96c:	e000      	b.n	800c970 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800c96e:	2301      	movs	r3, #1
  }
}
 800c970:	4618      	mov	r0, r3
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	0800dd94 	.word	0x0800dd94

0800c97c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08a      	sub	sp, #40	; 0x28
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d056      	beq.n	800ca3e <UTIL_TIMER_Start+0xc2>
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f929 	bl	800cbe8 <TimerExists>
 800c996:	4603      	mov	r3, r0
 800c998:	f083 0301 	eor.w	r3, r3, #1
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d04d      	beq.n	800ca3e <UTIL_TIMER_Start+0xc2>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	7a5b      	ldrb	r3, [r3, #9]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d149      	bne.n	800ca3e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ae:	613b      	str	r3, [r7, #16]
  return(result);
 800c9b0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c9b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9b4:	b672      	cpsid	i
}
 800c9b6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c9be:	4b24      	ldr	r3, [pc, #144]	; (800ca50 <UTIL_TIMER_Start+0xd4>)
 800c9c0:	6a1b      	ldr	r3, [r3, #32]
 800c9c2:	4798      	blx	r3
 800c9c4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800c9c6:	6a3a      	ldr	r2, [r7, #32]
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d201      	bcs.n	800c9d2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a3a      	ldr	r2, [r7, #32]
 800c9d6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800c9ea:	4b1a      	ldr	r3, [pc, #104]	; (800ca54 <UTIL_TIMER_Start+0xd8>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d106      	bne.n	800ca00 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800c9f2:	4b17      	ldr	r3, [pc, #92]	; (800ca50 <UTIL_TIMER_Start+0xd4>)
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f96b 	bl	800ccd4 <TimerInsertNewHeadTimer>
 800c9fe:	e017      	b.n	800ca30 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800ca00:	4b13      	ldr	r3, [pc, #76]	; (800ca50 <UTIL_TIMER_Start+0xd4>)
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	4798      	blx	r3
 800ca06:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	441a      	add	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	4b0e      	ldr	r3, [pc, #56]	; (800ca54 <UTIL_TIMER_Start+0xd8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d203      	bcs.n	800ca2a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 f956 	bl	800ccd4 <TimerInsertNewHeadTimer>
 800ca28:	e002      	b.n	800ca30 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f922 	bl	800cc74 <TimerInsertTimer>
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f383 8810 	msr	PRIMASK, r3
}
 800ca3a:	bf00      	nop
  {
 800ca3c:	e002      	b.n	800ca44 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800ca44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3728      	adds	r7, #40	; 0x28
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	0800dd94 	.word	0x0800dd94
 800ca54:	20000808 	.word	0x20000808

0800ca58 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b088      	sub	sp, #32
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ca60:	2300      	movs	r3, #0
 800ca62:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d05b      	beq.n	800cb22 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca6a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca6e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca70:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800ca72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca74:	b672      	cpsid	i
}
 800ca76:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800ca78:	4b2d      	ldr	r3, [pc, #180]	; (800cb30 <UTIL_TIMER_Stop+0xd8>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800ca7e:	4b2c      	ldr	r3, [pc, #176]	; (800cb30 <UTIL_TIMER_Stop+0xd8>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800ca8a:	4b29      	ldr	r3, [pc, #164]	; (800cb30 <UTIL_TIMER_Stop+0xd8>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d041      	beq.n	800cb16 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800ca98:	4b25      	ldr	r3, [pc, #148]	; (800cb30 <UTIL_TIMER_Stop+0xd8>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d134      	bne.n	800cb0c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800caa2:	4b23      	ldr	r3, [pc, #140]	; (800cb30 <UTIL_TIMER_Stop+0xd8>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2200      	movs	r2, #0
 800caa8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800caaa:	4b21      	ldr	r3, [pc, #132]	; (800cb30 <UTIL_TIMER_Stop+0xd8>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	695b      	ldr	r3, [r3, #20]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00a      	beq.n	800caca <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800cab4:	4b1e      	ldr	r3, [pc, #120]	; (800cb30 <UTIL_TIMER_Stop+0xd8>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	695b      	ldr	r3, [r3, #20]
 800caba:	4a1d      	ldr	r2, [pc, #116]	; (800cb30 <UTIL_TIMER_Stop+0xd8>)
 800cabc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800cabe:	4b1c      	ldr	r3, [pc, #112]	; (800cb30 <UTIL_TIMER_Stop+0xd8>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 f8ac 	bl	800cc20 <TimerSetTimeout>
 800cac8:	e023      	b.n	800cb12 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800caca:	4b1a      	ldr	r3, [pc, #104]	; (800cb34 <UTIL_TIMER_Stop+0xdc>)
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	4798      	blx	r3
            TimerListHead = NULL;
 800cad0:	4b17      	ldr	r3, [pc, #92]	; (800cb30 <UTIL_TIMER_Stop+0xd8>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	e01c      	b.n	800cb12 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d110      	bne.n	800cb02 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	695b      	ldr	r3, [r3, #20]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d006      	beq.n	800caf6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	695b      	ldr	r3, [r3, #20]
 800caec:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	697a      	ldr	r2, [r7, #20]
 800caf2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800caf4:	e00d      	b.n	800cb12 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800caf6:	2300      	movs	r3, #0
 800caf8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	697a      	ldr	r2, [r7, #20]
 800cafe:	615a      	str	r2, [r3, #20]
            break;
 800cb00:	e007      	b.n	800cb12 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1e2      	bne.n	800cad8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	77fb      	strb	r3, [r7, #31]
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	f383 8810 	msr	PRIMASK, r3
}
 800cb20:	e001      	b.n	800cb26 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800cb22:	2301      	movs	r3, #1
 800cb24:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800cb26:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3720      	adds	r7, #32
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	20000808 	.word	0x20000808
 800cb34:	0800dd94 	.word	0x0800dd94

0800cb38 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d102      	bne.n	800cb52 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	73fb      	strb	r3, [r7, #15]
 800cb50:	e014      	b.n	800cb7c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800cb52:	4b0d      	ldr	r3, [pc, #52]	; (800cb88 <UTIL_TIMER_SetPeriod+0x50>)
 800cb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb56:	6838      	ldr	r0, [r7, #0]
 800cb58:	4798      	blx	r3
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f841 	bl	800cbe8 <TimerExists>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d007      	beq.n	800cb7c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7ff ff73 	bl	800ca58 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7ff ff02 	bl	800c97c <UTIL_TIMER_Start>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	0800dd94 	.word	0x0800dd94

0800cb8c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800cb92:	4b06      	ldr	r3, [pc, #24]	; (800cbac <UTIL_TIMER_GetCurrentTime+0x20>)
 800cb94:	69db      	ldr	r3, [r3, #28]
 800cb96:	4798      	blx	r3
 800cb98:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800cb9a:	4b04      	ldr	r3, [pc, #16]	; (800cbac <UTIL_TIMER_GetCurrentTime+0x20>)
 800cb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	4798      	blx	r3
 800cba2:	4603      	mov	r3, r0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	0800dd94 	.word	0x0800dd94

0800cbb0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800cbb8:	4b0a      	ldr	r3, [pc, #40]	; (800cbe4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800cbba:	69db      	ldr	r3, [r3, #28]
 800cbbc:	4798      	blx	r3
 800cbbe:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800cbc0:	4b08      	ldr	r3, [pc, #32]	; (800cbe4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	4798      	blx	r3
 800cbc8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800cbca:	4b06      	ldr	r3, [pc, #24]	; (800cbe4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbce:	68f9      	ldr	r1, [r7, #12]
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	1a8a      	subs	r2, r1, r2
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	4798      	blx	r3
 800cbd8:	4603      	mov	r3, r0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	0800dd94 	.word	0x0800dd94

0800cbe8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	; (800cc1c <TimerExists+0x34>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800cbf6:	e008      	b.n	800cc0a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d101      	bne.n	800cc04 <TimerExists+0x1c>
    {
      return true;
 800cc00:	2301      	movs	r3, #1
 800cc02:	e006      	b.n	800cc12 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	695b      	ldr	r3, [r3, #20]
 800cc08:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f3      	bne.n	800cbf8 <TimerExists+0x10>
  }
  return false;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bc80      	pop	{r7}
 800cc1a:	4770      	bx	lr
 800cc1c:	20000808 	.word	0x20000808

0800cc20 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800cc20:	b590      	push	{r4, r7, lr}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800cc28:	4b11      	ldr	r3, [pc, #68]	; (800cc70 <TimerSetTimeout+0x50>)
 800cc2a:	6a1b      	ldr	r3, [r3, #32]
 800cc2c:	4798      	blx	r3
 800cc2e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2201      	movs	r2, #1
 800cc34:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681c      	ldr	r4, [r3, #0]
 800cc3a:	4b0d      	ldr	r3, [pc, #52]	; (800cc70 <TimerSetTimeout+0x50>)
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	4798      	blx	r3
 800cc40:	4602      	mov	r2, r0
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	4413      	add	r3, r2
 800cc46:	429c      	cmp	r4, r3
 800cc48:	d207      	bcs.n	800cc5a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800cc4a:	4b09      	ldr	r3, [pc, #36]	; (800cc70 <TimerSetTimeout+0x50>)
 800cc4c:	699b      	ldr	r3, [r3, #24]
 800cc4e:	4798      	blx	r3
 800cc50:	4602      	mov	r2, r0
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	441a      	add	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800cc5a:	4b05      	ldr	r3, [pc, #20]	; (800cc70 <TimerSetTimeout+0x50>)
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	6812      	ldr	r2, [r2, #0]
 800cc62:	4610      	mov	r0, r2
 800cc64:	4798      	blx	r3
}
 800cc66:	bf00      	nop
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd90      	pop	{r4, r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	0800dd94 	.word	0x0800dd94

0800cc74 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cc7c:	4b14      	ldr	r3, [pc, #80]	; (800ccd0 <TimerInsertTimer+0x5c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800cc82:	4b13      	ldr	r3, [pc, #76]	; (800ccd0 <TimerInsertTimer+0x5c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	695b      	ldr	r3, [r3, #20]
 800cc88:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800cc8a:	e012      	b.n	800ccb2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d905      	bls.n	800cca4 <TimerInsertTimer+0x30>
    {
        cur = next;
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	695b      	ldr	r3, [r3, #20]
 800cca0:	60bb      	str	r3, [r7, #8]
 800cca2:	e006      	b.n	800ccb2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	615a      	str	r2, [r3, #20]
        return;
 800ccb0:	e009      	b.n	800ccc6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	695b      	ldr	r3, [r3, #20]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d1e8      	bne.n	800cc8c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	615a      	str	r2, [r3, #20]
}
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bc80      	pop	{r7}
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	20000808 	.word	0x20000808

0800ccd4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ccdc:	4b0b      	ldr	r3, [pc, #44]	; (800cd0c <TimerInsertNewHeadTimer+0x38>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800ccf4:	4a05      	ldr	r2, [pc, #20]	; (800cd0c <TimerInsertNewHeadTimer+0x38>)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800ccfa:	4b04      	ldr	r3, [pc, #16]	; (800cd0c <TimerInsertNewHeadTimer+0x38>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7ff ff8e 	bl	800cc20 <TimerSetTimeout>
}
 800cd04:	bf00      	nop
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	20000808 	.word	0x20000808

0800cd10 <_vsniprintf_r>:
 800cd10:	b530      	push	{r4, r5, lr}
 800cd12:	4614      	mov	r4, r2
 800cd14:	2c00      	cmp	r4, #0
 800cd16:	b09b      	sub	sp, #108	; 0x6c
 800cd18:	4605      	mov	r5, r0
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	da05      	bge.n	800cd2a <_vsniprintf_r+0x1a>
 800cd1e:	238b      	movs	r3, #139	; 0x8b
 800cd20:	6003      	str	r3, [r0, #0]
 800cd22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd26:	b01b      	add	sp, #108	; 0x6c
 800cd28:	bd30      	pop	{r4, r5, pc}
 800cd2a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cd2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cd32:	bf14      	ite	ne
 800cd34:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cd38:	4623      	moveq	r3, r4
 800cd3a:	9302      	str	r3, [sp, #8]
 800cd3c:	9305      	str	r3, [sp, #20]
 800cd3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd42:	9100      	str	r1, [sp, #0]
 800cd44:	9104      	str	r1, [sp, #16]
 800cd46:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cd4a:	4669      	mov	r1, sp
 800cd4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cd4e:	f000 f8b5 	bl	800cebc <_svfiprintf_r>
 800cd52:	1c43      	adds	r3, r0, #1
 800cd54:	bfbc      	itt	lt
 800cd56:	238b      	movlt	r3, #139	; 0x8b
 800cd58:	602b      	strlt	r3, [r5, #0]
 800cd5a:	2c00      	cmp	r4, #0
 800cd5c:	d0e3      	beq.n	800cd26 <_vsniprintf_r+0x16>
 800cd5e:	9b00      	ldr	r3, [sp, #0]
 800cd60:	2200      	movs	r2, #0
 800cd62:	701a      	strb	r2, [r3, #0]
 800cd64:	e7df      	b.n	800cd26 <_vsniprintf_r+0x16>
	...

0800cd68 <vsniprintf>:
 800cd68:	b507      	push	{r0, r1, r2, lr}
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	460a      	mov	r2, r1
 800cd70:	4601      	mov	r1, r0
 800cd72:	4803      	ldr	r0, [pc, #12]	; (800cd80 <vsniprintf+0x18>)
 800cd74:	6800      	ldr	r0, [r0, #0]
 800cd76:	f7ff ffcb 	bl	800cd10 <_vsniprintf_r>
 800cd7a:	b003      	add	sp, #12
 800cd7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd80:	20000064 	.word	0x20000064

0800cd84 <memset>:
 800cd84:	4402      	add	r2, r0
 800cd86:	4603      	mov	r3, r0
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d100      	bne.n	800cd8e <memset+0xa>
 800cd8c:	4770      	bx	lr
 800cd8e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd92:	e7f9      	b.n	800cd88 <memset+0x4>

0800cd94 <__errno>:
 800cd94:	4b01      	ldr	r3, [pc, #4]	; (800cd9c <__errno+0x8>)
 800cd96:	6818      	ldr	r0, [r3, #0]
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	20000064 	.word	0x20000064

0800cda0 <__libc_init_array>:
 800cda0:	b570      	push	{r4, r5, r6, lr}
 800cda2:	4d0d      	ldr	r5, [pc, #52]	; (800cdd8 <__libc_init_array+0x38>)
 800cda4:	4c0d      	ldr	r4, [pc, #52]	; (800cddc <__libc_init_array+0x3c>)
 800cda6:	1b64      	subs	r4, r4, r5
 800cda8:	10a4      	asrs	r4, r4, #2
 800cdaa:	2600      	movs	r6, #0
 800cdac:	42a6      	cmp	r6, r4
 800cdae:	d109      	bne.n	800cdc4 <__libc_init_array+0x24>
 800cdb0:	4d0b      	ldr	r5, [pc, #44]	; (800cde0 <__libc_init_array+0x40>)
 800cdb2:	4c0c      	ldr	r4, [pc, #48]	; (800cde4 <__libc_init_array+0x44>)
 800cdb4:	f000 fc68 	bl	800d688 <_init>
 800cdb8:	1b64      	subs	r4, r4, r5
 800cdba:	10a4      	asrs	r4, r4, #2
 800cdbc:	2600      	movs	r6, #0
 800cdbe:	42a6      	cmp	r6, r4
 800cdc0:	d105      	bne.n	800cdce <__libc_init_array+0x2e>
 800cdc2:	bd70      	pop	{r4, r5, r6, pc}
 800cdc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdc8:	4798      	blx	r3
 800cdca:	3601      	adds	r6, #1
 800cdcc:	e7ee      	b.n	800cdac <__libc_init_array+0xc>
 800cdce:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdd2:	4798      	blx	r3
 800cdd4:	3601      	adds	r6, #1
 800cdd6:	e7f2      	b.n	800cdbe <__libc_init_array+0x1e>
 800cdd8:	0800df64 	.word	0x0800df64
 800cddc:	0800df64 	.word	0x0800df64
 800cde0:	0800df64 	.word	0x0800df64
 800cde4:	0800df68 	.word	0x0800df68

0800cde8 <__retarget_lock_acquire_recursive>:
 800cde8:	4770      	bx	lr

0800cdea <__retarget_lock_release_recursive>:
 800cdea:	4770      	bx	lr

0800cdec <memcpy>:
 800cdec:	440a      	add	r2, r1
 800cdee:	4291      	cmp	r1, r2
 800cdf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdf4:	d100      	bne.n	800cdf8 <memcpy+0xc>
 800cdf6:	4770      	bx	lr
 800cdf8:	b510      	push	{r4, lr}
 800cdfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce02:	4291      	cmp	r1, r2
 800ce04:	d1f9      	bne.n	800cdfa <memcpy+0xe>
 800ce06:	bd10      	pop	{r4, pc}

0800ce08 <__ssputs_r>:
 800ce08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce0c:	688e      	ldr	r6, [r1, #8]
 800ce0e:	461f      	mov	r7, r3
 800ce10:	42be      	cmp	r6, r7
 800ce12:	680b      	ldr	r3, [r1, #0]
 800ce14:	4682      	mov	sl, r0
 800ce16:	460c      	mov	r4, r1
 800ce18:	4690      	mov	r8, r2
 800ce1a:	d82c      	bhi.n	800ce76 <__ssputs_r+0x6e>
 800ce1c:	898a      	ldrh	r2, [r1, #12]
 800ce1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce22:	d026      	beq.n	800ce72 <__ssputs_r+0x6a>
 800ce24:	6965      	ldr	r5, [r4, #20]
 800ce26:	6909      	ldr	r1, [r1, #16]
 800ce28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce2c:	eba3 0901 	sub.w	r9, r3, r1
 800ce30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce34:	1c7b      	adds	r3, r7, #1
 800ce36:	444b      	add	r3, r9
 800ce38:	106d      	asrs	r5, r5, #1
 800ce3a:	429d      	cmp	r5, r3
 800ce3c:	bf38      	it	cc
 800ce3e:	461d      	movcc	r5, r3
 800ce40:	0553      	lsls	r3, r2, #21
 800ce42:	d527      	bpl.n	800ce94 <__ssputs_r+0x8c>
 800ce44:	4629      	mov	r1, r5
 800ce46:	f000 f957 	bl	800d0f8 <_malloc_r>
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	b360      	cbz	r0, 800cea8 <__ssputs_r+0xa0>
 800ce4e:	6921      	ldr	r1, [r4, #16]
 800ce50:	464a      	mov	r2, r9
 800ce52:	f7ff ffcb 	bl	800cdec <memcpy>
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce60:	81a3      	strh	r3, [r4, #12]
 800ce62:	6126      	str	r6, [r4, #16]
 800ce64:	6165      	str	r5, [r4, #20]
 800ce66:	444e      	add	r6, r9
 800ce68:	eba5 0509 	sub.w	r5, r5, r9
 800ce6c:	6026      	str	r6, [r4, #0]
 800ce6e:	60a5      	str	r5, [r4, #8]
 800ce70:	463e      	mov	r6, r7
 800ce72:	42be      	cmp	r6, r7
 800ce74:	d900      	bls.n	800ce78 <__ssputs_r+0x70>
 800ce76:	463e      	mov	r6, r7
 800ce78:	6820      	ldr	r0, [r4, #0]
 800ce7a:	4632      	mov	r2, r6
 800ce7c:	4641      	mov	r1, r8
 800ce7e:	f000 fb86 	bl	800d58e <memmove>
 800ce82:	68a3      	ldr	r3, [r4, #8]
 800ce84:	1b9b      	subs	r3, r3, r6
 800ce86:	60a3      	str	r3, [r4, #8]
 800ce88:	6823      	ldr	r3, [r4, #0]
 800ce8a:	4433      	add	r3, r6
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	2000      	movs	r0, #0
 800ce90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce94:	462a      	mov	r2, r5
 800ce96:	f000 fb4b 	bl	800d530 <_realloc_r>
 800ce9a:	4606      	mov	r6, r0
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d1e0      	bne.n	800ce62 <__ssputs_r+0x5a>
 800cea0:	6921      	ldr	r1, [r4, #16]
 800cea2:	4650      	mov	r0, sl
 800cea4:	f000 fb9e 	bl	800d5e4 <_free_r>
 800cea8:	230c      	movs	r3, #12
 800ceaa:	f8ca 3000 	str.w	r3, [sl]
 800ceae:	89a3      	ldrh	r3, [r4, #12]
 800ceb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceb4:	81a3      	strh	r3, [r4, #12]
 800ceb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceba:	e7e9      	b.n	800ce90 <__ssputs_r+0x88>

0800cebc <_svfiprintf_r>:
 800cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec0:	4698      	mov	r8, r3
 800cec2:	898b      	ldrh	r3, [r1, #12]
 800cec4:	061b      	lsls	r3, r3, #24
 800cec6:	b09d      	sub	sp, #116	; 0x74
 800cec8:	4607      	mov	r7, r0
 800ceca:	460d      	mov	r5, r1
 800cecc:	4614      	mov	r4, r2
 800cece:	d50e      	bpl.n	800ceee <_svfiprintf_r+0x32>
 800ced0:	690b      	ldr	r3, [r1, #16]
 800ced2:	b963      	cbnz	r3, 800ceee <_svfiprintf_r+0x32>
 800ced4:	2140      	movs	r1, #64	; 0x40
 800ced6:	f000 f90f 	bl	800d0f8 <_malloc_r>
 800ceda:	6028      	str	r0, [r5, #0]
 800cedc:	6128      	str	r0, [r5, #16]
 800cede:	b920      	cbnz	r0, 800ceea <_svfiprintf_r+0x2e>
 800cee0:	230c      	movs	r3, #12
 800cee2:	603b      	str	r3, [r7, #0]
 800cee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cee8:	e0d0      	b.n	800d08c <_svfiprintf_r+0x1d0>
 800ceea:	2340      	movs	r3, #64	; 0x40
 800ceec:	616b      	str	r3, [r5, #20]
 800ceee:	2300      	movs	r3, #0
 800cef0:	9309      	str	r3, [sp, #36]	; 0x24
 800cef2:	2320      	movs	r3, #32
 800cef4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cef8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cefc:	2330      	movs	r3, #48	; 0x30
 800cefe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d0a4 <_svfiprintf_r+0x1e8>
 800cf02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf06:	f04f 0901 	mov.w	r9, #1
 800cf0a:	4623      	mov	r3, r4
 800cf0c:	469a      	mov	sl, r3
 800cf0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf12:	b10a      	cbz	r2, 800cf18 <_svfiprintf_r+0x5c>
 800cf14:	2a25      	cmp	r2, #37	; 0x25
 800cf16:	d1f9      	bne.n	800cf0c <_svfiprintf_r+0x50>
 800cf18:	ebba 0b04 	subs.w	fp, sl, r4
 800cf1c:	d00b      	beq.n	800cf36 <_svfiprintf_r+0x7a>
 800cf1e:	465b      	mov	r3, fp
 800cf20:	4622      	mov	r2, r4
 800cf22:	4629      	mov	r1, r5
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7ff ff6f 	bl	800ce08 <__ssputs_r>
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	f000 80a9 	beq.w	800d082 <_svfiprintf_r+0x1c6>
 800cf30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf32:	445a      	add	r2, fp
 800cf34:	9209      	str	r2, [sp, #36]	; 0x24
 800cf36:	f89a 3000 	ldrb.w	r3, [sl]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f000 80a1 	beq.w	800d082 <_svfiprintf_r+0x1c6>
 800cf40:	2300      	movs	r3, #0
 800cf42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf4a:	f10a 0a01 	add.w	sl, sl, #1
 800cf4e:	9304      	str	r3, [sp, #16]
 800cf50:	9307      	str	r3, [sp, #28]
 800cf52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf56:	931a      	str	r3, [sp, #104]	; 0x68
 800cf58:	4654      	mov	r4, sl
 800cf5a:	2205      	movs	r2, #5
 800cf5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf60:	4850      	ldr	r0, [pc, #320]	; (800d0a4 <_svfiprintf_r+0x1e8>)
 800cf62:	f7f3 f90d 	bl	8000180 <memchr>
 800cf66:	9a04      	ldr	r2, [sp, #16]
 800cf68:	b9d8      	cbnz	r0, 800cfa2 <_svfiprintf_r+0xe6>
 800cf6a:	06d0      	lsls	r0, r2, #27
 800cf6c:	bf44      	itt	mi
 800cf6e:	2320      	movmi	r3, #32
 800cf70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf74:	0711      	lsls	r1, r2, #28
 800cf76:	bf44      	itt	mi
 800cf78:	232b      	movmi	r3, #43	; 0x2b
 800cf7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf7e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf82:	2b2a      	cmp	r3, #42	; 0x2a
 800cf84:	d015      	beq.n	800cfb2 <_svfiprintf_r+0xf6>
 800cf86:	9a07      	ldr	r2, [sp, #28]
 800cf88:	4654      	mov	r4, sl
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	f04f 0c0a 	mov.w	ip, #10
 800cf90:	4621      	mov	r1, r4
 800cf92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf96:	3b30      	subs	r3, #48	; 0x30
 800cf98:	2b09      	cmp	r3, #9
 800cf9a:	d94d      	bls.n	800d038 <_svfiprintf_r+0x17c>
 800cf9c:	b1b0      	cbz	r0, 800cfcc <_svfiprintf_r+0x110>
 800cf9e:	9207      	str	r2, [sp, #28]
 800cfa0:	e014      	b.n	800cfcc <_svfiprintf_r+0x110>
 800cfa2:	eba0 0308 	sub.w	r3, r0, r8
 800cfa6:	fa09 f303 	lsl.w	r3, r9, r3
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	9304      	str	r3, [sp, #16]
 800cfae:	46a2      	mov	sl, r4
 800cfb0:	e7d2      	b.n	800cf58 <_svfiprintf_r+0x9c>
 800cfb2:	9b03      	ldr	r3, [sp, #12]
 800cfb4:	1d19      	adds	r1, r3, #4
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	9103      	str	r1, [sp, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	bfbb      	ittet	lt
 800cfbe:	425b      	neglt	r3, r3
 800cfc0:	f042 0202 	orrlt.w	r2, r2, #2
 800cfc4:	9307      	strge	r3, [sp, #28]
 800cfc6:	9307      	strlt	r3, [sp, #28]
 800cfc8:	bfb8      	it	lt
 800cfca:	9204      	strlt	r2, [sp, #16]
 800cfcc:	7823      	ldrb	r3, [r4, #0]
 800cfce:	2b2e      	cmp	r3, #46	; 0x2e
 800cfd0:	d10c      	bne.n	800cfec <_svfiprintf_r+0x130>
 800cfd2:	7863      	ldrb	r3, [r4, #1]
 800cfd4:	2b2a      	cmp	r3, #42	; 0x2a
 800cfd6:	d134      	bne.n	800d042 <_svfiprintf_r+0x186>
 800cfd8:	9b03      	ldr	r3, [sp, #12]
 800cfda:	1d1a      	adds	r2, r3, #4
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	9203      	str	r2, [sp, #12]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	bfb8      	it	lt
 800cfe4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cfe8:	3402      	adds	r4, #2
 800cfea:	9305      	str	r3, [sp, #20]
 800cfec:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d0a8 <_svfiprintf_r+0x1ec>
 800cff0:	7821      	ldrb	r1, [r4, #0]
 800cff2:	2203      	movs	r2, #3
 800cff4:	4650      	mov	r0, sl
 800cff6:	f7f3 f8c3 	bl	8000180 <memchr>
 800cffa:	b138      	cbz	r0, 800d00c <_svfiprintf_r+0x150>
 800cffc:	9b04      	ldr	r3, [sp, #16]
 800cffe:	eba0 000a 	sub.w	r0, r0, sl
 800d002:	2240      	movs	r2, #64	; 0x40
 800d004:	4082      	lsls	r2, r0
 800d006:	4313      	orrs	r3, r2
 800d008:	3401      	adds	r4, #1
 800d00a:	9304      	str	r3, [sp, #16]
 800d00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d010:	4826      	ldr	r0, [pc, #152]	; (800d0ac <_svfiprintf_r+0x1f0>)
 800d012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d016:	2206      	movs	r2, #6
 800d018:	f7f3 f8b2 	bl	8000180 <memchr>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d038      	beq.n	800d092 <_svfiprintf_r+0x1d6>
 800d020:	4b23      	ldr	r3, [pc, #140]	; (800d0b0 <_svfiprintf_r+0x1f4>)
 800d022:	bb1b      	cbnz	r3, 800d06c <_svfiprintf_r+0x1b0>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	3307      	adds	r3, #7
 800d028:	f023 0307 	bic.w	r3, r3, #7
 800d02c:	3308      	adds	r3, #8
 800d02e:	9303      	str	r3, [sp, #12]
 800d030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d032:	4433      	add	r3, r6
 800d034:	9309      	str	r3, [sp, #36]	; 0x24
 800d036:	e768      	b.n	800cf0a <_svfiprintf_r+0x4e>
 800d038:	fb0c 3202 	mla	r2, ip, r2, r3
 800d03c:	460c      	mov	r4, r1
 800d03e:	2001      	movs	r0, #1
 800d040:	e7a6      	b.n	800cf90 <_svfiprintf_r+0xd4>
 800d042:	2300      	movs	r3, #0
 800d044:	3401      	adds	r4, #1
 800d046:	9305      	str	r3, [sp, #20]
 800d048:	4619      	mov	r1, r3
 800d04a:	f04f 0c0a 	mov.w	ip, #10
 800d04e:	4620      	mov	r0, r4
 800d050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d054:	3a30      	subs	r2, #48	; 0x30
 800d056:	2a09      	cmp	r2, #9
 800d058:	d903      	bls.n	800d062 <_svfiprintf_r+0x1a6>
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0c6      	beq.n	800cfec <_svfiprintf_r+0x130>
 800d05e:	9105      	str	r1, [sp, #20]
 800d060:	e7c4      	b.n	800cfec <_svfiprintf_r+0x130>
 800d062:	fb0c 2101 	mla	r1, ip, r1, r2
 800d066:	4604      	mov	r4, r0
 800d068:	2301      	movs	r3, #1
 800d06a:	e7f0      	b.n	800d04e <_svfiprintf_r+0x192>
 800d06c:	ab03      	add	r3, sp, #12
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	462a      	mov	r2, r5
 800d072:	4b10      	ldr	r3, [pc, #64]	; (800d0b4 <_svfiprintf_r+0x1f8>)
 800d074:	a904      	add	r1, sp, #16
 800d076:	4638      	mov	r0, r7
 800d078:	f3af 8000 	nop.w
 800d07c:	1c42      	adds	r2, r0, #1
 800d07e:	4606      	mov	r6, r0
 800d080:	d1d6      	bne.n	800d030 <_svfiprintf_r+0x174>
 800d082:	89ab      	ldrh	r3, [r5, #12]
 800d084:	065b      	lsls	r3, r3, #25
 800d086:	f53f af2d 	bmi.w	800cee4 <_svfiprintf_r+0x28>
 800d08a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d08c:	b01d      	add	sp, #116	; 0x74
 800d08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d092:	ab03      	add	r3, sp, #12
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	462a      	mov	r2, r5
 800d098:	4b06      	ldr	r3, [pc, #24]	; (800d0b4 <_svfiprintf_r+0x1f8>)
 800d09a:	a904      	add	r1, sp, #16
 800d09c:	4638      	mov	r0, r7
 800d09e:	f000 f919 	bl	800d2d4 <_printf_i>
 800d0a2:	e7eb      	b.n	800d07c <_svfiprintf_r+0x1c0>
 800d0a4:	0800df28 	.word	0x0800df28
 800d0a8:	0800df2e 	.word	0x0800df2e
 800d0ac:	0800df32 	.word	0x0800df32
 800d0b0:	00000000 	.word	0x00000000
 800d0b4:	0800ce09 	.word	0x0800ce09

0800d0b8 <sbrk_aligned>:
 800d0b8:	b570      	push	{r4, r5, r6, lr}
 800d0ba:	4e0e      	ldr	r6, [pc, #56]	; (800d0f4 <sbrk_aligned+0x3c>)
 800d0bc:	460c      	mov	r4, r1
 800d0be:	6831      	ldr	r1, [r6, #0]
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	b911      	cbnz	r1, 800d0ca <sbrk_aligned+0x12>
 800d0c4:	f000 fa7e 	bl	800d5c4 <_sbrk_r>
 800d0c8:	6030      	str	r0, [r6, #0]
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	f000 fa79 	bl	800d5c4 <_sbrk_r>
 800d0d2:	1c43      	adds	r3, r0, #1
 800d0d4:	d00a      	beq.n	800d0ec <sbrk_aligned+0x34>
 800d0d6:	1cc4      	adds	r4, r0, #3
 800d0d8:	f024 0403 	bic.w	r4, r4, #3
 800d0dc:	42a0      	cmp	r0, r4
 800d0de:	d007      	beq.n	800d0f0 <sbrk_aligned+0x38>
 800d0e0:	1a21      	subs	r1, r4, r0
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f000 fa6e 	bl	800d5c4 <_sbrk_r>
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d101      	bne.n	800d0f0 <sbrk_aligned+0x38>
 800d0ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	bd70      	pop	{r4, r5, r6, pc}
 800d0f4:	2000094c 	.word	0x2000094c

0800d0f8 <_malloc_r>:
 800d0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0fc:	1ccd      	adds	r5, r1, #3
 800d0fe:	f025 0503 	bic.w	r5, r5, #3
 800d102:	3508      	adds	r5, #8
 800d104:	2d0c      	cmp	r5, #12
 800d106:	bf38      	it	cc
 800d108:	250c      	movcc	r5, #12
 800d10a:	2d00      	cmp	r5, #0
 800d10c:	4607      	mov	r7, r0
 800d10e:	db01      	blt.n	800d114 <_malloc_r+0x1c>
 800d110:	42a9      	cmp	r1, r5
 800d112:	d905      	bls.n	800d120 <_malloc_r+0x28>
 800d114:	230c      	movs	r3, #12
 800d116:	603b      	str	r3, [r7, #0]
 800d118:	2600      	movs	r6, #0
 800d11a:	4630      	mov	r0, r6
 800d11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d120:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d1f4 <_malloc_r+0xfc>
 800d124:	f000 f9f8 	bl	800d518 <__malloc_lock>
 800d128:	f8d8 3000 	ldr.w	r3, [r8]
 800d12c:	461c      	mov	r4, r3
 800d12e:	bb5c      	cbnz	r4, 800d188 <_malloc_r+0x90>
 800d130:	4629      	mov	r1, r5
 800d132:	4638      	mov	r0, r7
 800d134:	f7ff ffc0 	bl	800d0b8 <sbrk_aligned>
 800d138:	1c43      	adds	r3, r0, #1
 800d13a:	4604      	mov	r4, r0
 800d13c:	d155      	bne.n	800d1ea <_malloc_r+0xf2>
 800d13e:	f8d8 4000 	ldr.w	r4, [r8]
 800d142:	4626      	mov	r6, r4
 800d144:	2e00      	cmp	r6, #0
 800d146:	d145      	bne.n	800d1d4 <_malloc_r+0xdc>
 800d148:	2c00      	cmp	r4, #0
 800d14a:	d048      	beq.n	800d1de <_malloc_r+0xe6>
 800d14c:	6823      	ldr	r3, [r4, #0]
 800d14e:	4631      	mov	r1, r6
 800d150:	4638      	mov	r0, r7
 800d152:	eb04 0903 	add.w	r9, r4, r3
 800d156:	f000 fa35 	bl	800d5c4 <_sbrk_r>
 800d15a:	4581      	cmp	r9, r0
 800d15c:	d13f      	bne.n	800d1de <_malloc_r+0xe6>
 800d15e:	6821      	ldr	r1, [r4, #0]
 800d160:	1a6d      	subs	r5, r5, r1
 800d162:	4629      	mov	r1, r5
 800d164:	4638      	mov	r0, r7
 800d166:	f7ff ffa7 	bl	800d0b8 <sbrk_aligned>
 800d16a:	3001      	adds	r0, #1
 800d16c:	d037      	beq.n	800d1de <_malloc_r+0xe6>
 800d16e:	6823      	ldr	r3, [r4, #0]
 800d170:	442b      	add	r3, r5
 800d172:	6023      	str	r3, [r4, #0]
 800d174:	f8d8 3000 	ldr.w	r3, [r8]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d038      	beq.n	800d1ee <_malloc_r+0xf6>
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	42a2      	cmp	r2, r4
 800d180:	d12b      	bne.n	800d1da <_malloc_r+0xe2>
 800d182:	2200      	movs	r2, #0
 800d184:	605a      	str	r2, [r3, #4]
 800d186:	e00f      	b.n	800d1a8 <_malloc_r+0xb0>
 800d188:	6822      	ldr	r2, [r4, #0]
 800d18a:	1b52      	subs	r2, r2, r5
 800d18c:	d41f      	bmi.n	800d1ce <_malloc_r+0xd6>
 800d18e:	2a0b      	cmp	r2, #11
 800d190:	d917      	bls.n	800d1c2 <_malloc_r+0xca>
 800d192:	1961      	adds	r1, r4, r5
 800d194:	42a3      	cmp	r3, r4
 800d196:	6025      	str	r5, [r4, #0]
 800d198:	bf18      	it	ne
 800d19a:	6059      	strne	r1, [r3, #4]
 800d19c:	6863      	ldr	r3, [r4, #4]
 800d19e:	bf08      	it	eq
 800d1a0:	f8c8 1000 	streq.w	r1, [r8]
 800d1a4:	5162      	str	r2, [r4, r5]
 800d1a6:	604b      	str	r3, [r1, #4]
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	f104 060b 	add.w	r6, r4, #11
 800d1ae:	f000 f9b9 	bl	800d524 <__malloc_unlock>
 800d1b2:	f026 0607 	bic.w	r6, r6, #7
 800d1b6:	1d23      	adds	r3, r4, #4
 800d1b8:	1af2      	subs	r2, r6, r3
 800d1ba:	d0ae      	beq.n	800d11a <_malloc_r+0x22>
 800d1bc:	1b9b      	subs	r3, r3, r6
 800d1be:	50a3      	str	r3, [r4, r2]
 800d1c0:	e7ab      	b.n	800d11a <_malloc_r+0x22>
 800d1c2:	42a3      	cmp	r3, r4
 800d1c4:	6862      	ldr	r2, [r4, #4]
 800d1c6:	d1dd      	bne.n	800d184 <_malloc_r+0x8c>
 800d1c8:	f8c8 2000 	str.w	r2, [r8]
 800d1cc:	e7ec      	b.n	800d1a8 <_malloc_r+0xb0>
 800d1ce:	4623      	mov	r3, r4
 800d1d0:	6864      	ldr	r4, [r4, #4]
 800d1d2:	e7ac      	b.n	800d12e <_malloc_r+0x36>
 800d1d4:	4634      	mov	r4, r6
 800d1d6:	6876      	ldr	r6, [r6, #4]
 800d1d8:	e7b4      	b.n	800d144 <_malloc_r+0x4c>
 800d1da:	4613      	mov	r3, r2
 800d1dc:	e7cc      	b.n	800d178 <_malloc_r+0x80>
 800d1de:	230c      	movs	r3, #12
 800d1e0:	603b      	str	r3, [r7, #0]
 800d1e2:	4638      	mov	r0, r7
 800d1e4:	f000 f99e 	bl	800d524 <__malloc_unlock>
 800d1e8:	e797      	b.n	800d11a <_malloc_r+0x22>
 800d1ea:	6025      	str	r5, [r4, #0]
 800d1ec:	e7dc      	b.n	800d1a8 <_malloc_r+0xb0>
 800d1ee:	605b      	str	r3, [r3, #4]
 800d1f0:	deff      	udf	#255	; 0xff
 800d1f2:	bf00      	nop
 800d1f4:	20000948 	.word	0x20000948

0800d1f8 <_printf_common>:
 800d1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1fc:	4616      	mov	r6, r2
 800d1fe:	4699      	mov	r9, r3
 800d200:	688a      	ldr	r2, [r1, #8]
 800d202:	690b      	ldr	r3, [r1, #16]
 800d204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d208:	4293      	cmp	r3, r2
 800d20a:	bfb8      	it	lt
 800d20c:	4613      	movlt	r3, r2
 800d20e:	6033      	str	r3, [r6, #0]
 800d210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d214:	4607      	mov	r7, r0
 800d216:	460c      	mov	r4, r1
 800d218:	b10a      	cbz	r2, 800d21e <_printf_common+0x26>
 800d21a:	3301      	adds	r3, #1
 800d21c:	6033      	str	r3, [r6, #0]
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	0699      	lsls	r1, r3, #26
 800d222:	bf42      	ittt	mi
 800d224:	6833      	ldrmi	r3, [r6, #0]
 800d226:	3302      	addmi	r3, #2
 800d228:	6033      	strmi	r3, [r6, #0]
 800d22a:	6825      	ldr	r5, [r4, #0]
 800d22c:	f015 0506 	ands.w	r5, r5, #6
 800d230:	d106      	bne.n	800d240 <_printf_common+0x48>
 800d232:	f104 0a19 	add.w	sl, r4, #25
 800d236:	68e3      	ldr	r3, [r4, #12]
 800d238:	6832      	ldr	r2, [r6, #0]
 800d23a:	1a9b      	subs	r3, r3, r2
 800d23c:	42ab      	cmp	r3, r5
 800d23e:	dc26      	bgt.n	800d28e <_printf_common+0x96>
 800d240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d244:	1e13      	subs	r3, r2, #0
 800d246:	6822      	ldr	r2, [r4, #0]
 800d248:	bf18      	it	ne
 800d24a:	2301      	movne	r3, #1
 800d24c:	0692      	lsls	r2, r2, #26
 800d24e:	d42b      	bmi.n	800d2a8 <_printf_common+0xb0>
 800d250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d254:	4649      	mov	r1, r9
 800d256:	4638      	mov	r0, r7
 800d258:	47c0      	blx	r8
 800d25a:	3001      	adds	r0, #1
 800d25c:	d01e      	beq.n	800d29c <_printf_common+0xa4>
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	6922      	ldr	r2, [r4, #16]
 800d262:	f003 0306 	and.w	r3, r3, #6
 800d266:	2b04      	cmp	r3, #4
 800d268:	bf02      	ittt	eq
 800d26a:	68e5      	ldreq	r5, [r4, #12]
 800d26c:	6833      	ldreq	r3, [r6, #0]
 800d26e:	1aed      	subeq	r5, r5, r3
 800d270:	68a3      	ldr	r3, [r4, #8]
 800d272:	bf0c      	ite	eq
 800d274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d278:	2500      	movne	r5, #0
 800d27a:	4293      	cmp	r3, r2
 800d27c:	bfc4      	itt	gt
 800d27e:	1a9b      	subgt	r3, r3, r2
 800d280:	18ed      	addgt	r5, r5, r3
 800d282:	2600      	movs	r6, #0
 800d284:	341a      	adds	r4, #26
 800d286:	42b5      	cmp	r5, r6
 800d288:	d11a      	bne.n	800d2c0 <_printf_common+0xc8>
 800d28a:	2000      	movs	r0, #0
 800d28c:	e008      	b.n	800d2a0 <_printf_common+0xa8>
 800d28e:	2301      	movs	r3, #1
 800d290:	4652      	mov	r2, sl
 800d292:	4649      	mov	r1, r9
 800d294:	4638      	mov	r0, r7
 800d296:	47c0      	blx	r8
 800d298:	3001      	adds	r0, #1
 800d29a:	d103      	bne.n	800d2a4 <_printf_common+0xac>
 800d29c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a4:	3501      	adds	r5, #1
 800d2a6:	e7c6      	b.n	800d236 <_printf_common+0x3e>
 800d2a8:	18e1      	adds	r1, r4, r3
 800d2aa:	1c5a      	adds	r2, r3, #1
 800d2ac:	2030      	movs	r0, #48	; 0x30
 800d2ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2b2:	4422      	add	r2, r4
 800d2b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2bc:	3302      	adds	r3, #2
 800d2be:	e7c7      	b.n	800d250 <_printf_common+0x58>
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	4622      	mov	r2, r4
 800d2c4:	4649      	mov	r1, r9
 800d2c6:	4638      	mov	r0, r7
 800d2c8:	47c0      	blx	r8
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	d0e6      	beq.n	800d29c <_printf_common+0xa4>
 800d2ce:	3601      	adds	r6, #1
 800d2d0:	e7d9      	b.n	800d286 <_printf_common+0x8e>
	...

0800d2d4 <_printf_i>:
 800d2d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d8:	7e0f      	ldrb	r7, [r1, #24]
 800d2da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2dc:	2f78      	cmp	r7, #120	; 0x78
 800d2de:	4691      	mov	r9, r2
 800d2e0:	4680      	mov	r8, r0
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	469a      	mov	sl, r3
 800d2e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2ea:	d807      	bhi.n	800d2fc <_printf_i+0x28>
 800d2ec:	2f62      	cmp	r7, #98	; 0x62
 800d2ee:	d80a      	bhi.n	800d306 <_printf_i+0x32>
 800d2f0:	2f00      	cmp	r7, #0
 800d2f2:	f000 80d4 	beq.w	800d49e <_printf_i+0x1ca>
 800d2f6:	2f58      	cmp	r7, #88	; 0x58
 800d2f8:	f000 80c0 	beq.w	800d47c <_printf_i+0x1a8>
 800d2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d304:	e03a      	b.n	800d37c <_printf_i+0xa8>
 800d306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d30a:	2b15      	cmp	r3, #21
 800d30c:	d8f6      	bhi.n	800d2fc <_printf_i+0x28>
 800d30e:	a101      	add	r1, pc, #4	; (adr r1, 800d314 <_printf_i+0x40>)
 800d310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d314:	0800d36d 	.word	0x0800d36d
 800d318:	0800d381 	.word	0x0800d381
 800d31c:	0800d2fd 	.word	0x0800d2fd
 800d320:	0800d2fd 	.word	0x0800d2fd
 800d324:	0800d2fd 	.word	0x0800d2fd
 800d328:	0800d2fd 	.word	0x0800d2fd
 800d32c:	0800d381 	.word	0x0800d381
 800d330:	0800d2fd 	.word	0x0800d2fd
 800d334:	0800d2fd 	.word	0x0800d2fd
 800d338:	0800d2fd 	.word	0x0800d2fd
 800d33c:	0800d2fd 	.word	0x0800d2fd
 800d340:	0800d485 	.word	0x0800d485
 800d344:	0800d3ad 	.word	0x0800d3ad
 800d348:	0800d43f 	.word	0x0800d43f
 800d34c:	0800d2fd 	.word	0x0800d2fd
 800d350:	0800d2fd 	.word	0x0800d2fd
 800d354:	0800d4a7 	.word	0x0800d4a7
 800d358:	0800d2fd 	.word	0x0800d2fd
 800d35c:	0800d3ad 	.word	0x0800d3ad
 800d360:	0800d2fd 	.word	0x0800d2fd
 800d364:	0800d2fd 	.word	0x0800d2fd
 800d368:	0800d447 	.word	0x0800d447
 800d36c:	682b      	ldr	r3, [r5, #0]
 800d36e:	1d1a      	adds	r2, r3, #4
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	602a      	str	r2, [r5, #0]
 800d374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d37c:	2301      	movs	r3, #1
 800d37e:	e09f      	b.n	800d4c0 <_printf_i+0x1ec>
 800d380:	6820      	ldr	r0, [r4, #0]
 800d382:	682b      	ldr	r3, [r5, #0]
 800d384:	0607      	lsls	r7, r0, #24
 800d386:	f103 0104 	add.w	r1, r3, #4
 800d38a:	6029      	str	r1, [r5, #0]
 800d38c:	d501      	bpl.n	800d392 <_printf_i+0xbe>
 800d38e:	681e      	ldr	r6, [r3, #0]
 800d390:	e003      	b.n	800d39a <_printf_i+0xc6>
 800d392:	0646      	lsls	r6, r0, #25
 800d394:	d5fb      	bpl.n	800d38e <_printf_i+0xba>
 800d396:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d39a:	2e00      	cmp	r6, #0
 800d39c:	da03      	bge.n	800d3a6 <_printf_i+0xd2>
 800d39e:	232d      	movs	r3, #45	; 0x2d
 800d3a0:	4276      	negs	r6, r6
 800d3a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3a6:	485a      	ldr	r0, [pc, #360]	; (800d510 <_printf_i+0x23c>)
 800d3a8:	230a      	movs	r3, #10
 800d3aa:	e012      	b.n	800d3d2 <_printf_i+0xfe>
 800d3ac:	682b      	ldr	r3, [r5, #0]
 800d3ae:	6820      	ldr	r0, [r4, #0]
 800d3b0:	1d19      	adds	r1, r3, #4
 800d3b2:	6029      	str	r1, [r5, #0]
 800d3b4:	0605      	lsls	r5, r0, #24
 800d3b6:	d501      	bpl.n	800d3bc <_printf_i+0xe8>
 800d3b8:	681e      	ldr	r6, [r3, #0]
 800d3ba:	e002      	b.n	800d3c2 <_printf_i+0xee>
 800d3bc:	0641      	lsls	r1, r0, #25
 800d3be:	d5fb      	bpl.n	800d3b8 <_printf_i+0xe4>
 800d3c0:	881e      	ldrh	r6, [r3, #0]
 800d3c2:	4853      	ldr	r0, [pc, #332]	; (800d510 <_printf_i+0x23c>)
 800d3c4:	2f6f      	cmp	r7, #111	; 0x6f
 800d3c6:	bf0c      	ite	eq
 800d3c8:	2308      	moveq	r3, #8
 800d3ca:	230a      	movne	r3, #10
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3d2:	6865      	ldr	r5, [r4, #4]
 800d3d4:	60a5      	str	r5, [r4, #8]
 800d3d6:	2d00      	cmp	r5, #0
 800d3d8:	bfa2      	ittt	ge
 800d3da:	6821      	ldrge	r1, [r4, #0]
 800d3dc:	f021 0104 	bicge.w	r1, r1, #4
 800d3e0:	6021      	strge	r1, [r4, #0]
 800d3e2:	b90e      	cbnz	r6, 800d3e8 <_printf_i+0x114>
 800d3e4:	2d00      	cmp	r5, #0
 800d3e6:	d04b      	beq.n	800d480 <_printf_i+0x1ac>
 800d3e8:	4615      	mov	r5, r2
 800d3ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3ee:	fb03 6711 	mls	r7, r3, r1, r6
 800d3f2:	5dc7      	ldrb	r7, [r0, r7]
 800d3f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3f8:	4637      	mov	r7, r6
 800d3fa:	42bb      	cmp	r3, r7
 800d3fc:	460e      	mov	r6, r1
 800d3fe:	d9f4      	bls.n	800d3ea <_printf_i+0x116>
 800d400:	2b08      	cmp	r3, #8
 800d402:	d10b      	bne.n	800d41c <_printf_i+0x148>
 800d404:	6823      	ldr	r3, [r4, #0]
 800d406:	07de      	lsls	r6, r3, #31
 800d408:	d508      	bpl.n	800d41c <_printf_i+0x148>
 800d40a:	6923      	ldr	r3, [r4, #16]
 800d40c:	6861      	ldr	r1, [r4, #4]
 800d40e:	4299      	cmp	r1, r3
 800d410:	bfde      	ittt	le
 800d412:	2330      	movle	r3, #48	; 0x30
 800d414:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d418:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d41c:	1b52      	subs	r2, r2, r5
 800d41e:	6122      	str	r2, [r4, #16]
 800d420:	f8cd a000 	str.w	sl, [sp]
 800d424:	464b      	mov	r3, r9
 800d426:	aa03      	add	r2, sp, #12
 800d428:	4621      	mov	r1, r4
 800d42a:	4640      	mov	r0, r8
 800d42c:	f7ff fee4 	bl	800d1f8 <_printf_common>
 800d430:	3001      	adds	r0, #1
 800d432:	d14a      	bne.n	800d4ca <_printf_i+0x1f6>
 800d434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d438:	b004      	add	sp, #16
 800d43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d43e:	6823      	ldr	r3, [r4, #0]
 800d440:	f043 0320 	orr.w	r3, r3, #32
 800d444:	6023      	str	r3, [r4, #0]
 800d446:	4833      	ldr	r0, [pc, #204]	; (800d514 <_printf_i+0x240>)
 800d448:	2778      	movs	r7, #120	; 0x78
 800d44a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	6829      	ldr	r1, [r5, #0]
 800d452:	061f      	lsls	r7, r3, #24
 800d454:	f851 6b04 	ldr.w	r6, [r1], #4
 800d458:	d402      	bmi.n	800d460 <_printf_i+0x18c>
 800d45a:	065f      	lsls	r7, r3, #25
 800d45c:	bf48      	it	mi
 800d45e:	b2b6      	uxthmi	r6, r6
 800d460:	07df      	lsls	r7, r3, #31
 800d462:	bf48      	it	mi
 800d464:	f043 0320 	orrmi.w	r3, r3, #32
 800d468:	6029      	str	r1, [r5, #0]
 800d46a:	bf48      	it	mi
 800d46c:	6023      	strmi	r3, [r4, #0]
 800d46e:	b91e      	cbnz	r6, 800d478 <_printf_i+0x1a4>
 800d470:	6823      	ldr	r3, [r4, #0]
 800d472:	f023 0320 	bic.w	r3, r3, #32
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	2310      	movs	r3, #16
 800d47a:	e7a7      	b.n	800d3cc <_printf_i+0xf8>
 800d47c:	4824      	ldr	r0, [pc, #144]	; (800d510 <_printf_i+0x23c>)
 800d47e:	e7e4      	b.n	800d44a <_printf_i+0x176>
 800d480:	4615      	mov	r5, r2
 800d482:	e7bd      	b.n	800d400 <_printf_i+0x12c>
 800d484:	682b      	ldr	r3, [r5, #0]
 800d486:	6826      	ldr	r6, [r4, #0]
 800d488:	6961      	ldr	r1, [r4, #20]
 800d48a:	1d18      	adds	r0, r3, #4
 800d48c:	6028      	str	r0, [r5, #0]
 800d48e:	0635      	lsls	r5, r6, #24
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	d501      	bpl.n	800d498 <_printf_i+0x1c4>
 800d494:	6019      	str	r1, [r3, #0]
 800d496:	e002      	b.n	800d49e <_printf_i+0x1ca>
 800d498:	0670      	lsls	r0, r6, #25
 800d49a:	d5fb      	bpl.n	800d494 <_printf_i+0x1c0>
 800d49c:	8019      	strh	r1, [r3, #0]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	6123      	str	r3, [r4, #16]
 800d4a2:	4615      	mov	r5, r2
 800d4a4:	e7bc      	b.n	800d420 <_printf_i+0x14c>
 800d4a6:	682b      	ldr	r3, [r5, #0]
 800d4a8:	1d1a      	adds	r2, r3, #4
 800d4aa:	602a      	str	r2, [r5, #0]
 800d4ac:	681d      	ldr	r5, [r3, #0]
 800d4ae:	6862      	ldr	r2, [r4, #4]
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f7f2 fe64 	bl	8000180 <memchr>
 800d4b8:	b108      	cbz	r0, 800d4be <_printf_i+0x1ea>
 800d4ba:	1b40      	subs	r0, r0, r5
 800d4bc:	6060      	str	r0, [r4, #4]
 800d4be:	6863      	ldr	r3, [r4, #4]
 800d4c0:	6123      	str	r3, [r4, #16]
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4c8:	e7aa      	b.n	800d420 <_printf_i+0x14c>
 800d4ca:	6923      	ldr	r3, [r4, #16]
 800d4cc:	462a      	mov	r2, r5
 800d4ce:	4649      	mov	r1, r9
 800d4d0:	4640      	mov	r0, r8
 800d4d2:	47d0      	blx	sl
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	d0ad      	beq.n	800d434 <_printf_i+0x160>
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	079b      	lsls	r3, r3, #30
 800d4dc:	d413      	bmi.n	800d506 <_printf_i+0x232>
 800d4de:	68e0      	ldr	r0, [r4, #12]
 800d4e0:	9b03      	ldr	r3, [sp, #12]
 800d4e2:	4298      	cmp	r0, r3
 800d4e4:	bfb8      	it	lt
 800d4e6:	4618      	movlt	r0, r3
 800d4e8:	e7a6      	b.n	800d438 <_printf_i+0x164>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	4632      	mov	r2, r6
 800d4ee:	4649      	mov	r1, r9
 800d4f0:	4640      	mov	r0, r8
 800d4f2:	47d0      	blx	sl
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	d09d      	beq.n	800d434 <_printf_i+0x160>
 800d4f8:	3501      	adds	r5, #1
 800d4fa:	68e3      	ldr	r3, [r4, #12]
 800d4fc:	9903      	ldr	r1, [sp, #12]
 800d4fe:	1a5b      	subs	r3, r3, r1
 800d500:	42ab      	cmp	r3, r5
 800d502:	dcf2      	bgt.n	800d4ea <_printf_i+0x216>
 800d504:	e7eb      	b.n	800d4de <_printf_i+0x20a>
 800d506:	2500      	movs	r5, #0
 800d508:	f104 0619 	add.w	r6, r4, #25
 800d50c:	e7f5      	b.n	800d4fa <_printf_i+0x226>
 800d50e:	bf00      	nop
 800d510:	0800df39 	.word	0x0800df39
 800d514:	0800df4a 	.word	0x0800df4a

0800d518 <__malloc_lock>:
 800d518:	4801      	ldr	r0, [pc, #4]	; (800d520 <__malloc_lock+0x8>)
 800d51a:	f7ff bc65 	b.w	800cde8 <__retarget_lock_acquire_recursive>
 800d51e:	bf00      	nop
 800d520:	20000944 	.word	0x20000944

0800d524 <__malloc_unlock>:
 800d524:	4801      	ldr	r0, [pc, #4]	; (800d52c <__malloc_unlock+0x8>)
 800d526:	f7ff bc60 	b.w	800cdea <__retarget_lock_release_recursive>
 800d52a:	bf00      	nop
 800d52c:	20000944 	.word	0x20000944

0800d530 <_realloc_r>:
 800d530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d534:	4680      	mov	r8, r0
 800d536:	4614      	mov	r4, r2
 800d538:	460e      	mov	r6, r1
 800d53a:	b921      	cbnz	r1, 800d546 <_realloc_r+0x16>
 800d53c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d540:	4611      	mov	r1, r2
 800d542:	f7ff bdd9 	b.w	800d0f8 <_malloc_r>
 800d546:	b92a      	cbnz	r2, 800d554 <_realloc_r+0x24>
 800d548:	f000 f84c 	bl	800d5e4 <_free_r>
 800d54c:	4625      	mov	r5, r4
 800d54e:	4628      	mov	r0, r5
 800d550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d554:	f000 f890 	bl	800d678 <_malloc_usable_size_r>
 800d558:	4284      	cmp	r4, r0
 800d55a:	4607      	mov	r7, r0
 800d55c:	d802      	bhi.n	800d564 <_realloc_r+0x34>
 800d55e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d562:	d812      	bhi.n	800d58a <_realloc_r+0x5a>
 800d564:	4621      	mov	r1, r4
 800d566:	4640      	mov	r0, r8
 800d568:	f7ff fdc6 	bl	800d0f8 <_malloc_r>
 800d56c:	4605      	mov	r5, r0
 800d56e:	2800      	cmp	r0, #0
 800d570:	d0ed      	beq.n	800d54e <_realloc_r+0x1e>
 800d572:	42bc      	cmp	r4, r7
 800d574:	4622      	mov	r2, r4
 800d576:	4631      	mov	r1, r6
 800d578:	bf28      	it	cs
 800d57a:	463a      	movcs	r2, r7
 800d57c:	f7ff fc36 	bl	800cdec <memcpy>
 800d580:	4631      	mov	r1, r6
 800d582:	4640      	mov	r0, r8
 800d584:	f000 f82e 	bl	800d5e4 <_free_r>
 800d588:	e7e1      	b.n	800d54e <_realloc_r+0x1e>
 800d58a:	4635      	mov	r5, r6
 800d58c:	e7df      	b.n	800d54e <_realloc_r+0x1e>

0800d58e <memmove>:
 800d58e:	4288      	cmp	r0, r1
 800d590:	b510      	push	{r4, lr}
 800d592:	eb01 0402 	add.w	r4, r1, r2
 800d596:	d902      	bls.n	800d59e <memmove+0x10>
 800d598:	4284      	cmp	r4, r0
 800d59a:	4623      	mov	r3, r4
 800d59c:	d807      	bhi.n	800d5ae <memmove+0x20>
 800d59e:	1e43      	subs	r3, r0, #1
 800d5a0:	42a1      	cmp	r1, r4
 800d5a2:	d008      	beq.n	800d5b6 <memmove+0x28>
 800d5a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5ac:	e7f8      	b.n	800d5a0 <memmove+0x12>
 800d5ae:	4402      	add	r2, r0
 800d5b0:	4601      	mov	r1, r0
 800d5b2:	428a      	cmp	r2, r1
 800d5b4:	d100      	bne.n	800d5b8 <memmove+0x2a>
 800d5b6:	bd10      	pop	{r4, pc}
 800d5b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5c0:	e7f7      	b.n	800d5b2 <memmove+0x24>
	...

0800d5c4 <_sbrk_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	4d06      	ldr	r5, [pc, #24]	; (800d5e0 <_sbrk_r+0x1c>)
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	602b      	str	r3, [r5, #0]
 800d5d0:	f7f4 ff54 	bl	800247c <_sbrk>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d102      	bne.n	800d5de <_sbrk_r+0x1a>
 800d5d8:	682b      	ldr	r3, [r5, #0]
 800d5da:	b103      	cbz	r3, 800d5de <_sbrk_r+0x1a>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	20000950 	.word	0x20000950

0800d5e4 <_free_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	d041      	beq.n	800d670 <_free_r+0x8c>
 800d5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5f0:	1f0c      	subs	r4, r1, #4
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	bfb8      	it	lt
 800d5f6:	18e4      	addlt	r4, r4, r3
 800d5f8:	f7ff ff8e 	bl	800d518 <__malloc_lock>
 800d5fc:	4a1d      	ldr	r2, [pc, #116]	; (800d674 <_free_r+0x90>)
 800d5fe:	6813      	ldr	r3, [r2, #0]
 800d600:	b933      	cbnz	r3, 800d610 <_free_r+0x2c>
 800d602:	6063      	str	r3, [r4, #4]
 800d604:	6014      	str	r4, [r2, #0]
 800d606:	4628      	mov	r0, r5
 800d608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d60c:	f7ff bf8a 	b.w	800d524 <__malloc_unlock>
 800d610:	42a3      	cmp	r3, r4
 800d612:	d908      	bls.n	800d626 <_free_r+0x42>
 800d614:	6820      	ldr	r0, [r4, #0]
 800d616:	1821      	adds	r1, r4, r0
 800d618:	428b      	cmp	r3, r1
 800d61a:	bf01      	itttt	eq
 800d61c:	6819      	ldreq	r1, [r3, #0]
 800d61e:	685b      	ldreq	r3, [r3, #4]
 800d620:	1809      	addeq	r1, r1, r0
 800d622:	6021      	streq	r1, [r4, #0]
 800d624:	e7ed      	b.n	800d602 <_free_r+0x1e>
 800d626:	461a      	mov	r2, r3
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	b10b      	cbz	r3, 800d630 <_free_r+0x4c>
 800d62c:	42a3      	cmp	r3, r4
 800d62e:	d9fa      	bls.n	800d626 <_free_r+0x42>
 800d630:	6811      	ldr	r1, [r2, #0]
 800d632:	1850      	adds	r0, r2, r1
 800d634:	42a0      	cmp	r0, r4
 800d636:	d10b      	bne.n	800d650 <_free_r+0x6c>
 800d638:	6820      	ldr	r0, [r4, #0]
 800d63a:	4401      	add	r1, r0
 800d63c:	1850      	adds	r0, r2, r1
 800d63e:	4283      	cmp	r3, r0
 800d640:	6011      	str	r1, [r2, #0]
 800d642:	d1e0      	bne.n	800d606 <_free_r+0x22>
 800d644:	6818      	ldr	r0, [r3, #0]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	6053      	str	r3, [r2, #4]
 800d64a:	4408      	add	r0, r1
 800d64c:	6010      	str	r0, [r2, #0]
 800d64e:	e7da      	b.n	800d606 <_free_r+0x22>
 800d650:	d902      	bls.n	800d658 <_free_r+0x74>
 800d652:	230c      	movs	r3, #12
 800d654:	602b      	str	r3, [r5, #0]
 800d656:	e7d6      	b.n	800d606 <_free_r+0x22>
 800d658:	6820      	ldr	r0, [r4, #0]
 800d65a:	1821      	adds	r1, r4, r0
 800d65c:	428b      	cmp	r3, r1
 800d65e:	bf04      	itt	eq
 800d660:	6819      	ldreq	r1, [r3, #0]
 800d662:	685b      	ldreq	r3, [r3, #4]
 800d664:	6063      	str	r3, [r4, #4]
 800d666:	bf04      	itt	eq
 800d668:	1809      	addeq	r1, r1, r0
 800d66a:	6021      	streq	r1, [r4, #0]
 800d66c:	6054      	str	r4, [r2, #4]
 800d66e:	e7ca      	b.n	800d606 <_free_r+0x22>
 800d670:	bd38      	pop	{r3, r4, r5, pc}
 800d672:	bf00      	nop
 800d674:	20000948 	.word	0x20000948

0800d678 <_malloc_usable_size_r>:
 800d678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d67c:	1f18      	subs	r0, r3, #4
 800d67e:	2b00      	cmp	r3, #0
 800d680:	bfbc      	itt	lt
 800d682:	580b      	ldrlt	r3, [r1, r0]
 800d684:	18c0      	addlt	r0, r0, r3
 800d686:	4770      	bx	lr

0800d688 <_init>:
 800d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68a:	bf00      	nop
 800d68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68e:	bc08      	pop	{r3}
 800d690:	469e      	mov	lr, r3
 800d692:	4770      	bx	lr

0800d694 <_fini>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	bf00      	nop
 800d698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d69a:	bc08      	pop	{r3}
 800d69c:	469e      	mov	lr, r3
 800d69e:	4770      	bx	lr
